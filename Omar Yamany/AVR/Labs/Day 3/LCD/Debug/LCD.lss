
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002330  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002330  000023a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000016d4  00000000  00000000  000023ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000998  00000000  00000000  00003a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000046c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006311  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000071fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000810c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008399  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008b67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4c 11 	call	0x2298	; 0x2298 <main>
      7a:	0c 94 96 11 	jmp	0x232c	; 0x232c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 87 11 	jmp	0x230e	; 0x230e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 87 11 	jmp	0x230e	; 0x230e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 87 11 	jmp	0x230e	; 0x230e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 87 11 	jmp	0x230e	; 0x230e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 87 11 	jmp	0x230e	; 0x230e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <SET_Direction>:
 */

#include "DIO_Interface.h"

void SET_Direction(u8 Copy_PORT, u8 Copy_PIN, u8 Direction)//set a specific pin as input or output
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	if(Direction == OUTPUT)
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	09 f0       	breq	.+2      	; 0xb58 <SET_Direction+0x22>
     b56:	70 c0       	rjmp	.+224    	; 0xc38 <SET_Direction+0x102>
	{
		switch(Copy_PORT)
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3f 83       	std	Y+7, r19	; 0x07
     b60:	2e 83       	std	Y+6, r18	; 0x06
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	82 30       	cpi	r24, 0x02	; 2
     b68:	91 05       	cpc	r25, r1
     b6a:	51 f1       	breq	.+84     	; 0xbc0 <SET_Direction+0x8a>
     b6c:	2e 81       	ldd	r18, Y+6	; 0x06
     b6e:	3f 81       	ldd	r19, Y+7	; 0x07
     b70:	23 30       	cpi	r18, 0x03	; 3
     b72:	31 05       	cpc	r19, r1
     b74:	34 f4       	brge	.+12     	; 0xb82 <SET_Direction+0x4c>
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	9f 81       	ldd	r25, Y+7	; 0x07
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	91 05       	cpc	r25, r1
     b7e:	61 f0       	breq	.+24     	; 0xb98 <SET_Direction+0x62>
     b80:	d3 c0       	rjmp	.+422    	; 0xd28 <SET_Direction+0x1f2>
     b82:	2e 81       	ldd	r18, Y+6	; 0x06
     b84:	3f 81       	ldd	r19, Y+7	; 0x07
     b86:	23 30       	cpi	r18, 0x03	; 3
     b88:	31 05       	cpc	r19, r1
     b8a:	71 f1       	breq	.+92     	; 0xbe8 <SET_Direction+0xb2>
     b8c:	8e 81       	ldd	r24, Y+6	; 0x06
     b8e:	9f 81       	ldd	r25, Y+7	; 0x07
     b90:	84 30       	cpi	r24, 0x04	; 4
     b92:	91 05       	cpc	r25, r1
     b94:	e9 f1       	breq	.+122    	; 0xc10 <SET_Direction+0xda>
     b96:	c8 c0       	rjmp	.+400    	; 0xd28 <SET_Direction+0x1f2>
		{
		case PORTA:
			SET_BIT(DDRA_REG, Copy_PIN);
     b98:	aa e3       	ldi	r26, 0x3A	; 58
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	ea e3       	ldi	r30, 0x3A	; 58
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	48 2f       	mov	r20, r24
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	02 2e       	mov	r0, r18
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <SET_Direction+0x80>
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	0a 94       	dec	r0
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <SET_Direction+0x7c>
     bba:	84 2b       	or	r24, r20
     bbc:	8c 93       	st	X, r24
     bbe:	b4 c0       	rjmp	.+360    	; 0xd28 <SET_Direction+0x1f2>
			break;
		case PORTB:
			SET_BIT(DDRB_REG, Copy_PIN);
     bc0:	a7 e3       	ldi	r26, 0x37	; 55
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e7 e3       	ldi	r30, 0x37	; 55
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	48 2f       	mov	r20, r24
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	02 2e       	mov	r0, r18
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <SET_Direction+0xa8>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <SET_Direction+0xa4>
     be2:	84 2b       	or	r24, r20
     be4:	8c 93       	st	X, r24
     be6:	a0 c0       	rjmp	.+320    	; 0xd28 <SET_Direction+0x1f2>
			break;
		case PORTC:
			SET_BIT(DDRC_REG, Copy_PIN);
     be8:	a4 e3       	ldi	r26, 0x34	; 52
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e4 e3       	ldi	r30, 0x34	; 52
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	48 2f       	mov	r20, r24
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	02 2e       	mov	r0, r18
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <SET_Direction+0xd0>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	0a 94       	dec	r0
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <SET_Direction+0xcc>
     c0a:	84 2b       	or	r24, r20
     c0c:	8c 93       	st	X, r24
     c0e:	8c c0       	rjmp	.+280    	; 0xd28 <SET_Direction+0x1f2>
			break;
		case PORTD:
			SET_BIT(DDRD_REG, Copy_PIN);
     c10:	a1 e3       	ldi	r26, 0x31	; 49
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e1 e3       	ldi	r30, 0x31	; 49
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	48 2f       	mov	r20, r24
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	02 2e       	mov	r0, r18
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <SET_Direction+0xf8>
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	0a 94       	dec	r0
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <SET_Direction+0xf4>
     c32:	84 2b       	or	r24, r20
     c34:	8c 93       	st	X, r24
     c36:	78 c0       	rjmp	.+240    	; 0xd28 <SET_Direction+0x1f2>
			break;
		}
	}
	else if(Direction == INPUT)
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	88 23       	and	r24, r24
     c3c:	09 f0       	breq	.+2      	; 0xc40 <SET_Direction+0x10a>
     c3e:	74 c0       	rjmp	.+232    	; 0xd28 <SET_Direction+0x1f2>
	{
		switch(Copy_PORT)
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	3d 83       	std	Y+5, r19	; 0x05
     c48:	2c 83       	std	Y+4, r18	; 0x04
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	9d 81       	ldd	r25, Y+5	; 0x05
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	91 05       	cpc	r25, r1
     c52:	61 f1       	breq	.+88     	; 0xcac <SET_Direction+0x176>
     c54:	2c 81       	ldd	r18, Y+4	; 0x04
     c56:	3d 81       	ldd	r19, Y+5	; 0x05
     c58:	23 30       	cpi	r18, 0x03	; 3
     c5a:	31 05       	cpc	r19, r1
     c5c:	34 f4       	brge	.+12     	; 0xc6a <SET_Direction+0x134>
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	9d 81       	ldd	r25, Y+5	; 0x05
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	91 05       	cpc	r25, r1
     c66:	69 f0       	breq	.+26     	; 0xc82 <SET_Direction+0x14c>
     c68:	5f c0       	rjmp	.+190    	; 0xd28 <SET_Direction+0x1f2>
     c6a:	2c 81       	ldd	r18, Y+4	; 0x04
     c6c:	3d 81       	ldd	r19, Y+5	; 0x05
     c6e:	23 30       	cpi	r18, 0x03	; 3
     c70:	31 05       	cpc	r19, r1
     c72:	89 f1       	breq	.+98     	; 0xcd6 <SET_Direction+0x1a0>
     c74:	8c 81       	ldd	r24, Y+4	; 0x04
     c76:	9d 81       	ldd	r25, Y+5	; 0x05
     c78:	84 30       	cpi	r24, 0x04	; 4
     c7a:	91 05       	cpc	r25, r1
     c7c:	09 f4       	brne	.+2      	; 0xc80 <SET_Direction+0x14a>
     c7e:	40 c0       	rjmp	.+128    	; 0xd00 <SET_Direction+0x1ca>
     c80:	53 c0       	rjmp	.+166    	; 0xd28 <SET_Direction+0x1f2>
		{
		case PORTA:
			CLR_BIT(DDRA_REG, Copy_PIN);
     c82:	aa e3       	ldi	r26, 0x3A	; 58
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	ea e3       	ldi	r30, 0x3A	; 58
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	48 2f       	mov	r20, r24
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	02 2e       	mov	r0, r18
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <SET_Direction+0x16a>
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	0a 94       	dec	r0
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <SET_Direction+0x166>
     ca4:	80 95       	com	r24
     ca6:	84 23       	and	r24, r20
     ca8:	8c 93       	st	X, r24
     caa:	3e c0       	rjmp	.+124    	; 0xd28 <SET_Direction+0x1f2>
			break;
		case PORTB:
			CLR_BIT(DDRB_REG, Copy_PIN);
     cac:	a7 e3       	ldi	r26, 0x37	; 55
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e7 e3       	ldi	r30, 0x37	; 55
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <SET_Direction+0x194>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <SET_Direction+0x190>
     cce:	80 95       	com	r24
     cd0:	84 23       	and	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	29 c0       	rjmp	.+82     	; 0xd28 <SET_Direction+0x1f2>
			break;
		case PORTC:
			CLR_BIT(DDRC_REG, Copy_PIN);
     cd6:	a4 e3       	ldi	r26, 0x34	; 52
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e4 e3       	ldi	r30, 0x34	; 52
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <SET_Direction+0x1be>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <SET_Direction+0x1ba>
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8c 93       	st	X, r24
     cfe:	14 c0       	rjmp	.+40     	; 0xd28 <SET_Direction+0x1f2>
			break;
		case PORTD:
			CLR_BIT(DDRD_REG, Copy_PIN);
     d00:	a1 e3       	ldi	r26, 0x31	; 49
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e1 e3       	ldi	r30, 0x31	; 49
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <SET_Direction+0x1e8>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <SET_Direction+0x1e4>
     d22:	80 95       	com	r24
     d24:	84 23       	and	r24, r20
     d26:	8c 93       	st	X, r24
			break;
		}
	}
}
     d28:	27 96       	adiw	r28, 0x07	; 7
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <SET_State>:

void SET_State(u8 Copy_PORT, u8 Copy_PIN, u8 State)//set a specific output pin as high or low
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	27 97       	sbiw	r28, 0x07	; 7
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	6a 83       	std	Y+2, r22	; 0x02
     d52:	4b 83       	std	Y+3, r20	; 0x03
	if(State == HIGH)
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	09 f0       	breq	.+2      	; 0xd5c <SET_State+0x22>
     d5a:	70 c0       	rjmp	.+224    	; 0xe3c <SET_State+0x102>
	{
		switch(Copy_PORT)
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	3f 83       	std	Y+7, r19	; 0x07
     d64:	2e 83       	std	Y+6, r18	; 0x06
     d66:	8e 81       	ldd	r24, Y+6	; 0x06
     d68:	9f 81       	ldd	r25, Y+7	; 0x07
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	91 05       	cpc	r25, r1
     d6e:	51 f1       	breq	.+84     	; 0xdc4 <SET_State+0x8a>
     d70:	2e 81       	ldd	r18, Y+6	; 0x06
     d72:	3f 81       	ldd	r19, Y+7	; 0x07
     d74:	23 30       	cpi	r18, 0x03	; 3
     d76:	31 05       	cpc	r19, r1
     d78:	34 f4       	brge	.+12     	; 0xd86 <SET_State+0x4c>
     d7a:	8e 81       	ldd	r24, Y+6	; 0x06
     d7c:	9f 81       	ldd	r25, Y+7	; 0x07
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	91 05       	cpc	r25, r1
     d82:	61 f0       	breq	.+24     	; 0xd9c <SET_State+0x62>
     d84:	d3 c0       	rjmp	.+422    	; 0xf2c <SET_State+0x1f2>
     d86:	2e 81       	ldd	r18, Y+6	; 0x06
     d88:	3f 81       	ldd	r19, Y+7	; 0x07
     d8a:	23 30       	cpi	r18, 0x03	; 3
     d8c:	31 05       	cpc	r19, r1
     d8e:	71 f1       	breq	.+92     	; 0xdec <SET_State+0xb2>
     d90:	8e 81       	ldd	r24, Y+6	; 0x06
     d92:	9f 81       	ldd	r25, Y+7	; 0x07
     d94:	84 30       	cpi	r24, 0x04	; 4
     d96:	91 05       	cpc	r25, r1
     d98:	e9 f1       	breq	.+122    	; 0xe14 <SET_State+0xda>
     d9a:	c8 c0       	rjmp	.+400    	; 0xf2c <SET_State+0x1f2>
		{
		case PORTA:
			SET_BIT(PORTA_REG, Copy_PIN);
     d9c:	ab e3       	ldi	r26, 0x3B	; 59
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	eb e3       	ldi	r30, 0x3B	; 59
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <SET_State+0x80>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <SET_State+0x7c>
     dbe:	84 2b       	or	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	b4 c0       	rjmp	.+360    	; 0xf2c <SET_State+0x1f2>
			break;
		case PORTB:
			SET_BIT(PORTB_REG, Copy_PIN);
     dc4:	a8 e3       	ldi	r26, 0x38	; 56
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e8 e3       	ldi	r30, 0x38	; 56
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 2e       	mov	r0, r18
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <SET_State+0xa8>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	0a 94       	dec	r0
     de4:	e2 f7       	brpl	.-8      	; 0xdde <SET_State+0xa4>
     de6:	84 2b       	or	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	a0 c0       	rjmp	.+320    	; 0xf2c <SET_State+0x1f2>
			break;
		case PORTC:
			SET_BIT(PORTC_REG, Copy_PIN);
     dec:	a5 e3       	ldi	r26, 0x35	; 53
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e5 e3       	ldi	r30, 0x35	; 53
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <SET_State+0xd0>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <SET_State+0xcc>
     e0e:	84 2b       	or	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	8c c0       	rjmp	.+280    	; 0xf2c <SET_State+0x1f2>
			break;
		case PORTD:
			SET_BIT(PORTD_REG, Copy_PIN);
     e14:	a2 e3       	ldi	r26, 0x32	; 50
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e2 e3       	ldi	r30, 0x32	; 50
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <SET_State+0xf8>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <SET_State+0xf4>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	78 c0       	rjmp	.+240    	; 0xf2c <SET_State+0x1f2>
			break;
		}
	}
	else if(State == LOW)
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	88 23       	and	r24, r24
     e40:	09 f0       	breq	.+2      	; 0xe44 <SET_State+0x10a>
     e42:	74 c0       	rjmp	.+232    	; 0xf2c <SET_State+0x1f2>
	{
		switch(Copy_PORT)
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	3d 83       	std	Y+5, r19	; 0x05
     e4c:	2c 83       	std	Y+4, r18	; 0x04
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	9d 81       	ldd	r25, Y+5	; 0x05
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	91 05       	cpc	r25, r1
     e56:	61 f1       	breq	.+88     	; 0xeb0 <SET_State+0x176>
     e58:	2c 81       	ldd	r18, Y+4	; 0x04
     e5a:	3d 81       	ldd	r19, Y+5	; 0x05
     e5c:	23 30       	cpi	r18, 0x03	; 3
     e5e:	31 05       	cpc	r19, r1
     e60:	34 f4       	brge	.+12     	; 0xe6e <SET_State+0x134>
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	9d 81       	ldd	r25, Y+5	; 0x05
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	91 05       	cpc	r25, r1
     e6a:	69 f0       	breq	.+26     	; 0xe86 <SET_State+0x14c>
     e6c:	5f c0       	rjmp	.+190    	; 0xf2c <SET_State+0x1f2>
     e6e:	2c 81       	ldd	r18, Y+4	; 0x04
     e70:	3d 81       	ldd	r19, Y+5	; 0x05
     e72:	23 30       	cpi	r18, 0x03	; 3
     e74:	31 05       	cpc	r19, r1
     e76:	89 f1       	breq	.+98     	; 0xeda <SET_State+0x1a0>
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	9d 81       	ldd	r25, Y+5	; 0x05
     e7c:	84 30       	cpi	r24, 0x04	; 4
     e7e:	91 05       	cpc	r25, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <SET_State+0x14a>
     e82:	40 c0       	rjmp	.+128    	; 0xf04 <SET_State+0x1ca>
     e84:	53 c0       	rjmp	.+166    	; 0xf2c <SET_State+0x1f2>
		{
		case PORTA:
			CLR_BIT(PORTA_REG, Copy_PIN);
     e86:	ab e3       	ldi	r26, 0x3B	; 59
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	eb e3       	ldi	r30, 0x3B	; 59
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <SET_State+0x16a>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <SET_State+0x166>
     ea8:	80 95       	com	r24
     eaa:	84 23       	and	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	3e c0       	rjmp	.+124    	; 0xf2c <SET_State+0x1f2>
			break;
		case PORTB:
			CLR_BIT(PORTB_REG, Copy_PIN);
     eb0:	a8 e3       	ldi	r26, 0x38	; 56
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e8 e3       	ldi	r30, 0x38	; 56
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <SET_State+0x194>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <SET_State+0x190>
     ed2:	80 95       	com	r24
     ed4:	84 23       	and	r24, r20
     ed6:	8c 93       	st	X, r24
     ed8:	29 c0       	rjmp	.+82     	; 0xf2c <SET_State+0x1f2>
			break;
		case PORTC:
			CLR_BIT(PORTC_REG, Copy_PIN);
     eda:	a5 e3       	ldi	r26, 0x35	; 53
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e5 e3       	ldi	r30, 0x35	; 53
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <SET_State+0x1be>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <SET_State+0x1ba>
     efc:	80 95       	com	r24
     efe:	84 23       	and	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	14 c0       	rjmp	.+40     	; 0xf2c <SET_State+0x1f2>
			break;
		case PORTD:
			CLR_BIT(PORTD_REG, Copy_PIN);
     f04:	a2 e3       	ldi	r26, 0x32	; 50
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e2 e3       	ldi	r30, 0x32	; 50
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <SET_State+0x1e8>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <SET_State+0x1e4>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
			break;
		}
	}
}
     f2c:	27 96       	adiw	r28, 0x07	; 7
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <GET_State>:

u8 GET_State(u8 Copy_PORT, u8 Copy_PIN)//read data from input pin
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	00 d0       	rcall	.+0      	; 0xf44 <GET_State+0x6>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <GET_State+0x8>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <GET_State+0xa>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PORT)
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3d 83       	std	Y+5, r19	; 0x05
     f58:	2c 83       	std	Y+4, r18	; 0x04
     f5a:	4c 81       	ldd	r20, Y+4	; 0x04
     f5c:	5d 81       	ldd	r21, Y+5	; 0x05
     f5e:	42 30       	cpi	r20, 0x02	; 2
     f60:	51 05       	cpc	r21, r1
     f62:	49 f1       	breq	.+82     	; 0xfb6 <GET_State+0x78>
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	91 05       	cpc	r25, r1
     f6c:	34 f4       	brge	.+12     	; 0xf7a <GET_State+0x3c>
     f6e:	2c 81       	ldd	r18, Y+4	; 0x04
     f70:	3d 81       	ldd	r19, Y+5	; 0x05
     f72:	21 30       	cpi	r18, 0x01	; 1
     f74:	31 05       	cpc	r19, r1
     f76:	61 f0       	breq	.+24     	; 0xf90 <GET_State+0x52>
     f78:	57 c0       	rjmp	.+174    	; 0x1028 <GET_State+0xea>
     f7a:	4c 81       	ldd	r20, Y+4	; 0x04
     f7c:	5d 81       	ldd	r21, Y+5	; 0x05
     f7e:	43 30       	cpi	r20, 0x03	; 3
     f80:	51 05       	cpc	r21, r1
     f82:	61 f1       	breq	.+88     	; 0xfdc <GET_State+0x9e>
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	84 30       	cpi	r24, 0x04	; 4
     f8a:	91 05       	cpc	r25, r1
     f8c:	d1 f1       	breq	.+116    	; 0x1002 <GET_State+0xc4>
     f8e:	4c c0       	rjmp	.+152    	; 0x1028 <GET_State+0xea>
	{
	case PORTA:
		return GET_BIT(PINA_REG, Copy_PIN);
     f90:	e9 e3       	ldi	r30, 0x39	; 57
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a9 01       	movw	r20, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GET_State+0x6a>
     fa4:	55 95       	asr	r21
     fa6:	47 95       	ror	r20
     fa8:	8a 95       	dec	r24
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GET_State+0x66>
     fac:	ca 01       	movw	r24, r20
     fae:	58 2f       	mov	r21, r24
     fb0:	51 70       	andi	r21, 0x01	; 1
     fb2:	5b 83       	std	Y+3, r21	; 0x03
     fb4:	3a c0       	rjmp	.+116    	; 0x102a <GET_State+0xec>
		break;
	case PORTB:
		return GET_BIT(PINB_REG, Copy_PIN);
     fb6:	e6 e3       	ldi	r30, 0x36	; 54
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a9 01       	movw	r20, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GET_State+0x90>
     fca:	55 95       	asr	r21
     fcc:	47 95       	ror	r20
     fce:	8a 95       	dec	r24
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GET_State+0x8c>
     fd2:	ca 01       	movw	r24, r20
     fd4:	58 2f       	mov	r21, r24
     fd6:	51 70       	andi	r21, 0x01	; 1
     fd8:	5b 83       	std	Y+3, r21	; 0x03
     fda:	27 c0       	rjmp	.+78     	; 0x102a <GET_State+0xec>
		break;
	case PORTC:
		return GET_BIT(PINC_REG, Copy_PIN);
     fdc:	e3 e3       	ldi	r30, 0x33	; 51
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a9 01       	movw	r20, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <GET_State+0xb6>
     ff0:	55 95       	asr	r21
     ff2:	47 95       	ror	r20
     ff4:	8a 95       	dec	r24
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <GET_State+0xb2>
     ff8:	ca 01       	movw	r24, r20
     ffa:	58 2f       	mov	r21, r24
     ffc:	51 70       	andi	r21, 0x01	; 1
     ffe:	5b 83       	std	Y+3, r21	; 0x03
    1000:	14 c0       	rjmp	.+40     	; 0x102a <GET_State+0xec>
		break;
	case PORTD:
		return GET_BIT(PIND_REG, Copy_PIN);
    1002:	e0 e3       	ldi	r30, 0x30	; 48
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a9 01       	movw	r20, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <GET_State+0xdc>
    1016:	55 95       	asr	r21
    1018:	47 95       	ror	r20
    101a:	8a 95       	dec	r24
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <GET_State+0xd8>
    101e:	ca 01       	movw	r24, r20
    1020:	58 2f       	mov	r21, r24
    1022:	51 70       	andi	r21, 0x01	; 1
    1024:	5b 83       	std	Y+3, r21	; 0x03
    1026:	01 c0       	rjmp	.+2      	; 0x102a <GET_State+0xec>
    1028:	02 c0       	rjmp	.+4      	; 0x102e <GET_State+0xf0>
		break;
	}
}
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	8e 83       	std	Y+6, r24	; 0x06
    102e:	8e 81       	ldd	r24, Y+6	; 0x06
    1030:	26 96       	adiw	r28, 0x06	; 6
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <SET_Direction_4LSB>:

void SET_Direction_4LSB(u8 Copy_PORT, u8 Direction)//set 4 LSB as input or output
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	00 d0       	rcall	.+0      	; 0x1048 <SET_Direction_4LSB+0x6>
    1048:	00 d0       	rcall	.+0      	; 0x104a <SET_Direction_4LSB+0x8>
    104a:	00 d0       	rcall	.+0      	; 0x104c <SET_Direction_4LSB+0xa>
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction == OUTPUT)
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	09 f0       	breq	.+2      	; 0x105c <SET_Direction_4LSB+0x1a>
    105a:	3f c0       	rjmp	.+126    	; 0x10da <SET_Direction_4LSB+0x98>
	{
		switch(Copy_PORT)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3e 83       	std	Y+6, r19	; 0x06
    1064:	2d 83       	std	Y+5, r18	; 0x05
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	91 05       	cpc	r25, r1
    106e:	f1 f0       	breq	.+60     	; 0x10ac <SET_Direction_4LSB+0x6a>
    1070:	2d 81       	ldd	r18, Y+5	; 0x05
    1072:	3e 81       	ldd	r19, Y+6	; 0x06
    1074:	23 30       	cpi	r18, 0x03	; 3
    1076:	31 05       	cpc	r19, r1
    1078:	34 f4       	brge	.+12     	; 0x1086 <SET_Direction_4LSB+0x44>
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	91 05       	cpc	r25, r1
    1082:	61 f0       	breq	.+24     	; 0x109c <SET_Direction_4LSB+0x5a>
    1084:	2a c0       	rjmp	.+84     	; 0x10da <SET_Direction_4LSB+0x98>
    1086:	2d 81       	ldd	r18, Y+5	; 0x05
    1088:	3e 81       	ldd	r19, Y+6	; 0x06
    108a:	23 30       	cpi	r18, 0x03	; 3
    108c:	31 05       	cpc	r19, r1
    108e:	b1 f0       	breq	.+44     	; 0x10bc <SET_Direction_4LSB+0x7a>
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	84 30       	cpi	r24, 0x04	; 4
    1096:	91 05       	cpc	r25, r1
    1098:	c9 f0       	breq	.+50     	; 0x10cc <SET_Direction_4LSB+0x8a>
    109a:	1f c0       	rjmp	.+62     	; 0x10da <SET_Direction_4LSB+0x98>
		{
		case PORTA:
			DDRA_REG |= 0x0F;
    109c:	aa e3       	ldi	r26, 0x3A	; 58
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ea e3       	ldi	r30, 0x3A	; 58
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	8f 60       	ori	r24, 0x0F	; 15
    10a8:	8c 93       	st	X, r24
    10aa:	17 c0       	rjmp	.+46     	; 0x10da <SET_Direction_4LSB+0x98>
			break;
		case PORTB:
			DDRB_REG |= 0x0F;
    10ac:	a7 e3       	ldi	r26, 0x37	; 55
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e7 e3       	ldi	r30, 0x37	; 55
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8f 60       	ori	r24, 0x0F	; 15
    10b8:	8c 93       	st	X, r24
    10ba:	0f c0       	rjmp	.+30     	; 0x10da <SET_Direction_4LSB+0x98>
			break;
		case PORTC:
			DDRC_REG |= 0x0F;
    10bc:	a4 e3       	ldi	r26, 0x34	; 52
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e4 e3       	ldi	r30, 0x34	; 52
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8f 60       	ori	r24, 0x0F	; 15
    10c8:	8c 93       	st	X, r24
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <SET_Direction_4LSB+0x98>
			break;
		case PORTD:
			DDRD_REG |= 0x0F;
    10cc:	a1 e3       	ldi	r26, 0x31	; 49
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e1 e3       	ldi	r30, 0x31	; 49
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	8f 60       	ori	r24, 0x0F	; 15
    10d8:	8c 93       	st	X, r24
			break;
		}
	}
	if(Direction == INPUT)
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	88 23       	and	r24, r24
    10de:	09 f0       	breq	.+2      	; 0x10e2 <SET_Direction_4LSB+0xa0>
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <SET_Direction_4LSB+0x11e>
	{
		switch(Copy_PORT)
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	3c 83       	std	Y+4, r19	; 0x04
    10ea:	2b 83       	std	Y+3, r18	; 0x03
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	91 05       	cpc	r25, r1
    10f4:	f1 f0       	breq	.+60     	; 0x1132 <SET_Direction_4LSB+0xf0>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	23 30       	cpi	r18, 0x03	; 3
    10fc:	31 05       	cpc	r19, r1
    10fe:	34 f4       	brge	.+12     	; 0x110c <SET_Direction_4LSB+0xca>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	91 05       	cpc	r25, r1
    1108:	61 f0       	breq	.+24     	; 0x1122 <SET_Direction_4LSB+0xe0>
    110a:	2a c0       	rjmp	.+84     	; 0x1160 <SET_Direction_4LSB+0x11e>
    110c:	2b 81       	ldd	r18, Y+3	; 0x03
    110e:	3c 81       	ldd	r19, Y+4	; 0x04
    1110:	23 30       	cpi	r18, 0x03	; 3
    1112:	31 05       	cpc	r19, r1
    1114:	b1 f0       	breq	.+44     	; 0x1142 <SET_Direction_4LSB+0x100>
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	84 30       	cpi	r24, 0x04	; 4
    111c:	91 05       	cpc	r25, r1
    111e:	c9 f0       	breq	.+50     	; 0x1152 <SET_Direction_4LSB+0x110>
    1120:	1f c0       	rjmp	.+62     	; 0x1160 <SET_Direction_4LSB+0x11e>
		{
		case PORTA:
			DDRA_REG &= 0xF0;
    1122:	aa e3       	ldi	r26, 0x3A	; 58
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ea e3       	ldi	r30, 0x3A	; 58
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 7f       	andi	r24, 0xF0	; 240
    112e:	8c 93       	st	X, r24
    1130:	17 c0       	rjmp	.+46     	; 0x1160 <SET_Direction_4LSB+0x11e>
			break;
		case PORTB:
			DDRB_REG &= 0xF0;
    1132:	a7 e3       	ldi	r26, 0x37	; 55
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e7 e3       	ldi	r30, 0x37	; 55
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 7f       	andi	r24, 0xF0	; 240
    113e:	8c 93       	st	X, r24
    1140:	0f c0       	rjmp	.+30     	; 0x1160 <SET_Direction_4LSB+0x11e>
			break;
		case PORTC:
			DDRC_REG &= 0xF0;
    1142:	a4 e3       	ldi	r26, 0x34	; 52
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e4 e3       	ldi	r30, 0x34	; 52
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	80 7f       	andi	r24, 0xF0	; 240
    114e:	8c 93       	st	X, r24
    1150:	07 c0       	rjmp	.+14     	; 0x1160 <SET_Direction_4LSB+0x11e>
			break;
		case PORTD:
			DDRD_REG &= 0xF0;
    1152:	a1 e3       	ldi	r26, 0x31	; 49
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e1 e3       	ldi	r30, 0x31	; 49
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	80 7f       	andi	r24, 0xF0	; 240
    115e:	8c 93       	st	X, r24
			break;
		}
	}
}
    1160:	26 96       	adiw	r28, 0x06	; 6
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <SET_Direction_4MSB>:

void SET_Direction_4MSB(u8 Copy_PORT, u8 Direction)//set 4 MSB as input or output
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <SET_Direction_4MSB+0x6>
    1178:	00 d0       	rcall	.+0      	; 0x117a <SET_Direction_4MSB+0x8>
    117a:	00 d0       	rcall	.+0      	; 0x117c <SET_Direction_4MSB+0xa>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction == OUTPUT)
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	09 f0       	breq	.+2      	; 0x118c <SET_Direction_4MSB+0x1a>
    118a:	3f c0       	rjmp	.+126    	; 0x120a <SET_Direction_4MSB+0x98>
	{
		switch(Copy_PORT)
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3e 83       	std	Y+6, r19	; 0x06
    1194:	2d 83       	std	Y+5, r18	; 0x05
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	91 05       	cpc	r25, r1
    119e:	f1 f0       	breq	.+60     	; 0x11dc <SET_Direction_4MSB+0x6a>
    11a0:	2d 81       	ldd	r18, Y+5	; 0x05
    11a2:	3e 81       	ldd	r19, Y+6	; 0x06
    11a4:	23 30       	cpi	r18, 0x03	; 3
    11a6:	31 05       	cpc	r19, r1
    11a8:	34 f4       	brge	.+12     	; 0x11b6 <SET_Direction_4MSB+0x44>
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	61 f0       	breq	.+24     	; 0x11cc <SET_Direction_4MSB+0x5a>
    11b4:	2a c0       	rjmp	.+84     	; 0x120a <SET_Direction_4MSB+0x98>
    11b6:	2d 81       	ldd	r18, Y+5	; 0x05
    11b8:	3e 81       	ldd	r19, Y+6	; 0x06
    11ba:	23 30       	cpi	r18, 0x03	; 3
    11bc:	31 05       	cpc	r19, r1
    11be:	b1 f0       	breq	.+44     	; 0x11ec <SET_Direction_4MSB+0x7a>
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	84 30       	cpi	r24, 0x04	; 4
    11c6:	91 05       	cpc	r25, r1
    11c8:	c9 f0       	breq	.+50     	; 0x11fc <SET_Direction_4MSB+0x8a>
    11ca:	1f c0       	rjmp	.+62     	; 0x120a <SET_Direction_4MSB+0x98>
		{
		case PORTA:
			DDRA_REG |= 0xF0;
    11cc:	aa e3       	ldi	r26, 0x3A	; 58
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ea e3       	ldi	r30, 0x3A	; 58
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	80 6f       	ori	r24, 0xF0	; 240
    11d8:	8c 93       	st	X, r24
    11da:	17 c0       	rjmp	.+46     	; 0x120a <SET_Direction_4MSB+0x98>
			break;
		case PORTB:
			DDRB_REG |= 0xF0;
    11dc:	a7 e3       	ldi	r26, 0x37	; 55
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e7 e3       	ldi	r30, 0x37	; 55
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	80 6f       	ori	r24, 0xF0	; 240
    11e8:	8c 93       	st	X, r24
    11ea:	0f c0       	rjmp	.+30     	; 0x120a <SET_Direction_4MSB+0x98>
			break;
		case PORTC:
			DDRC_REG |= 0xF0;
    11ec:	a4 e3       	ldi	r26, 0x34	; 52
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e4 e3       	ldi	r30, 0x34	; 52
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 6f       	ori	r24, 0xF0	; 240
    11f8:	8c 93       	st	X, r24
    11fa:	07 c0       	rjmp	.+14     	; 0x120a <SET_Direction_4MSB+0x98>
			break;
		case PORTD:
			DDRD_REG |= 0xF0;
    11fc:	a1 e3       	ldi	r26, 0x31	; 49
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e1 e3       	ldi	r30, 0x31	; 49
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	80 6f       	ori	r24, 0xF0	; 240
    1208:	8c 93       	st	X, r24
			break;
		}
	}
	if(Direction == INPUT)
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	88 23       	and	r24, r24
    120e:	09 f0       	breq	.+2      	; 0x1212 <SET_Direction_4MSB+0xa0>
    1210:	3f c0       	rjmp	.+126    	; 0x1290 <SET_Direction_4MSB+0x11e>
	{
		switch(Copy_PORT)
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3c 83       	std	Y+4, r19	; 0x04
    121a:	2b 83       	std	Y+3, r18	; 0x03
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	91 05       	cpc	r25, r1
    1224:	f1 f0       	breq	.+60     	; 0x1262 <SET_Direction_4MSB+0xf0>
    1226:	2b 81       	ldd	r18, Y+3	; 0x03
    1228:	3c 81       	ldd	r19, Y+4	; 0x04
    122a:	23 30       	cpi	r18, 0x03	; 3
    122c:	31 05       	cpc	r19, r1
    122e:	34 f4       	brge	.+12     	; 0x123c <SET_Direction_4MSB+0xca>
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	91 05       	cpc	r25, r1
    1238:	61 f0       	breq	.+24     	; 0x1252 <SET_Direction_4MSB+0xe0>
    123a:	2a c0       	rjmp	.+84     	; 0x1290 <SET_Direction_4MSB+0x11e>
    123c:	2b 81       	ldd	r18, Y+3	; 0x03
    123e:	3c 81       	ldd	r19, Y+4	; 0x04
    1240:	23 30       	cpi	r18, 0x03	; 3
    1242:	31 05       	cpc	r19, r1
    1244:	b1 f0       	breq	.+44     	; 0x1272 <SET_Direction_4MSB+0x100>
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	84 30       	cpi	r24, 0x04	; 4
    124c:	91 05       	cpc	r25, r1
    124e:	c9 f0       	breq	.+50     	; 0x1282 <SET_Direction_4MSB+0x110>
    1250:	1f c0       	rjmp	.+62     	; 0x1290 <SET_Direction_4MSB+0x11e>
		{
		case PORTA:
			DDRA_REG &= 0x0F;
    1252:	aa e3       	ldi	r26, 0x3A	; 58
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ea e3       	ldi	r30, 0x3A	; 58
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8f 70       	andi	r24, 0x0F	; 15
    125e:	8c 93       	st	X, r24
    1260:	17 c0       	rjmp	.+46     	; 0x1290 <SET_Direction_4MSB+0x11e>
			break;
		case PORTB:
			DDRB_REG &= 0x0F;
    1262:	a7 e3       	ldi	r26, 0x37	; 55
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e7 e3       	ldi	r30, 0x37	; 55
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	8f 70       	andi	r24, 0x0F	; 15
    126e:	8c 93       	st	X, r24
    1270:	0f c0       	rjmp	.+30     	; 0x1290 <SET_Direction_4MSB+0x11e>
			break;
		case PORTC:
			DDRC_REG &= 0x0F;
    1272:	a4 e3       	ldi	r26, 0x34	; 52
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e4 e3       	ldi	r30, 0x34	; 52
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	8f 70       	andi	r24, 0x0F	; 15
    127e:	8c 93       	st	X, r24
    1280:	07 c0       	rjmp	.+14     	; 0x1290 <SET_Direction_4MSB+0x11e>
			break;
		case PORTD:
			DDRD_REG &= 0x0F;
    1282:	a1 e3       	ldi	r26, 0x31	; 49
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e1 e3       	ldi	r30, 0x31	; 49
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8f 70       	andi	r24, 0x0F	; 15
    128e:	8c 93       	st	X, r24
			break;
		}
	}
}
    1290:	26 96       	adiw	r28, 0x06	; 6
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <SET_State_4LSB>:

void SET_State_4LSB(u8 Copy_PORT, u8 State)//set 4LSB output pins as high or low
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <SET_State_4LSB+0x6>
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <SET_State_4LSB+0x8>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <SET_State_4LSB+0xa>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	6a 83       	std	Y+2, r22	; 0x02
	if(State == HIGH)
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	09 f0       	breq	.+2      	; 0x12bc <SET_State_4LSB+0x1a>
    12ba:	40 c0       	rjmp	.+128    	; 0x133c <SET_State_4LSB+0x9a>
	{
		switch(Copy_PORT)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3e 83       	std	Y+6, r19	; 0x06
    12c4:	2d 83       	std	Y+5, r18	; 0x05
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	82 30       	cpi	r24, 0x02	; 2
    12cc:	91 05       	cpc	r25, r1
    12ce:	f1 f0       	breq	.+60     	; 0x130c <SET_State_4LSB+0x6a>
    12d0:	2d 81       	ldd	r18, Y+5	; 0x05
    12d2:	3e 81       	ldd	r19, Y+6	; 0x06
    12d4:	23 30       	cpi	r18, 0x03	; 3
    12d6:	31 05       	cpc	r19, r1
    12d8:	34 f4       	brge	.+12     	; 0x12e6 <SET_State_4LSB+0x44>
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	91 05       	cpc	r25, r1
    12e2:	61 f0       	breq	.+24     	; 0x12fc <SET_State_4LSB+0x5a>
    12e4:	6e c0       	rjmp	.+220    	; 0x13c2 <SET_State_4LSB+0x120>
    12e6:	2d 81       	ldd	r18, Y+5	; 0x05
    12e8:	3e 81       	ldd	r19, Y+6	; 0x06
    12ea:	23 30       	cpi	r18, 0x03	; 3
    12ec:	31 05       	cpc	r19, r1
    12ee:	b1 f0       	breq	.+44     	; 0x131c <SET_State_4LSB+0x7a>
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	84 30       	cpi	r24, 0x04	; 4
    12f6:	91 05       	cpc	r25, r1
    12f8:	c9 f0       	breq	.+50     	; 0x132c <SET_State_4LSB+0x8a>
    12fa:	63 c0       	rjmp	.+198    	; 0x13c2 <SET_State_4LSB+0x120>
		{
		case PORTA:
			PORTA_REG |= 0x0F;
    12fc:	ab e3       	ldi	r26, 0x3B	; 59
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	eb e3       	ldi	r30, 0x3B	; 59
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8f 60       	ori	r24, 0x0F	; 15
    1308:	8c 93       	st	X, r24
    130a:	5b c0       	rjmp	.+182    	; 0x13c2 <SET_State_4LSB+0x120>
			break;
		case PORTB:
			PORTB_REG |= 0x0F;
    130c:	a8 e3       	ldi	r26, 0x38	; 56
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e8 e3       	ldi	r30, 0x38	; 56
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8f 60       	ori	r24, 0x0F	; 15
    1318:	8c 93       	st	X, r24
    131a:	53 c0       	rjmp	.+166    	; 0x13c2 <SET_State_4LSB+0x120>
			break;
		case PORTC:
			PORTC_REG |= 0x0F;
    131c:	a5 e3       	ldi	r26, 0x35	; 53
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e5 e3       	ldi	r30, 0x35	; 53
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8f 60       	ori	r24, 0x0F	; 15
    1328:	8c 93       	st	X, r24
    132a:	4b c0       	rjmp	.+150    	; 0x13c2 <SET_State_4LSB+0x120>
			break;
		case PORTD:
			PORTD_REG |= 0x0F;
    132c:	a2 e3       	ldi	r26, 0x32	; 50
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e2 e3       	ldi	r30, 0x32	; 50
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8f 60       	ori	r24, 0x0F	; 15
    1338:	8c 93       	st	X, r24
    133a:	43 c0       	rjmp	.+134    	; 0x13c2 <SET_State_4LSB+0x120>
			break;
		}
	}
	else if(State == LOW)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	88 23       	and	r24, r24
    1340:	09 f0       	breq	.+2      	; 0x1344 <SET_State_4LSB+0xa2>
    1342:	3f c0       	rjmp	.+126    	; 0x13c2 <SET_State_4LSB+0x120>
	{
		switch(Copy_PORT)
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	3c 83       	std	Y+4, r19	; 0x04
    134c:	2b 83       	std	Y+3, r18	; 0x03
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	82 30       	cpi	r24, 0x02	; 2
    1354:	91 05       	cpc	r25, r1
    1356:	f1 f0       	breq	.+60     	; 0x1394 <SET_State_4LSB+0xf2>
    1358:	2b 81       	ldd	r18, Y+3	; 0x03
    135a:	3c 81       	ldd	r19, Y+4	; 0x04
    135c:	23 30       	cpi	r18, 0x03	; 3
    135e:	31 05       	cpc	r19, r1
    1360:	34 f4       	brge	.+12     	; 0x136e <SET_State_4LSB+0xcc>
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	61 f0       	breq	.+24     	; 0x1384 <SET_State_4LSB+0xe2>
    136c:	2a c0       	rjmp	.+84     	; 0x13c2 <SET_State_4LSB+0x120>
    136e:	2b 81       	ldd	r18, Y+3	; 0x03
    1370:	3c 81       	ldd	r19, Y+4	; 0x04
    1372:	23 30       	cpi	r18, 0x03	; 3
    1374:	31 05       	cpc	r19, r1
    1376:	b1 f0       	breq	.+44     	; 0x13a4 <SET_State_4LSB+0x102>
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	84 30       	cpi	r24, 0x04	; 4
    137e:	91 05       	cpc	r25, r1
    1380:	c9 f0       	breq	.+50     	; 0x13b4 <SET_State_4LSB+0x112>
    1382:	1f c0       	rjmp	.+62     	; 0x13c2 <SET_State_4LSB+0x120>
		{
		case PORTA:
			PORTA_REG &= 0xF0;
    1384:	ab e3       	ldi	r26, 0x3B	; 59
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	eb e3       	ldi	r30, 0x3B	; 59
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	80 7f       	andi	r24, 0xF0	; 240
    1390:	8c 93       	st	X, r24
    1392:	17 c0       	rjmp	.+46     	; 0x13c2 <SET_State_4LSB+0x120>
			break;
		case PORTB:
			PORTB_REG &= 0xF0;
    1394:	a8 e3       	ldi	r26, 0x38	; 56
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e8 e3       	ldi	r30, 0x38	; 56
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	80 7f       	andi	r24, 0xF0	; 240
    13a0:	8c 93       	st	X, r24
    13a2:	0f c0       	rjmp	.+30     	; 0x13c2 <SET_State_4LSB+0x120>
			break;
		case PORTC:
			PORTC_REG &= 0xF0;
    13a4:	a5 e3       	ldi	r26, 0x35	; 53
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e5 e3       	ldi	r30, 0x35	; 53
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	80 7f       	andi	r24, 0xF0	; 240
    13b0:	8c 93       	st	X, r24
    13b2:	07 c0       	rjmp	.+14     	; 0x13c2 <SET_State_4LSB+0x120>
			break;
		case PORTD:
			PORTD_REG &= 0xF0;
    13b4:	a2 e3       	ldi	r26, 0x32	; 50
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e2 e3       	ldi	r30, 0x32	; 50
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	80 7f       	andi	r24, 0xF0	; 240
    13c0:	8c 93       	st	X, r24
			break;
		}
	}
}
    13c2:	26 96       	adiw	r28, 0x06	; 6
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <SET_State_4MSB>:

void SET_State_4MSB(u8 Copy_PORT, u8 State)//set 4MSB output pins as high or low
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <SET_State_4MSB+0x6>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <SET_State_4MSB+0x8>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <SET_State_4MSB+0xa>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	6a 83       	std	Y+2, r22	; 0x02
	if(State == HIGH)
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	09 f0       	breq	.+2      	; 0x13ee <SET_State_4MSB+0x1a>
    13ec:	40 c0       	rjmp	.+128    	; 0x146e <SET_State_4MSB+0x9a>
	{
		switch(Copy_PORT)
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3e 83       	std	Y+6, r19	; 0x06
    13f6:	2d 83       	std	Y+5, r18	; 0x05
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	82 30       	cpi	r24, 0x02	; 2
    13fe:	91 05       	cpc	r25, r1
    1400:	f1 f0       	breq	.+60     	; 0x143e <SET_State_4MSB+0x6a>
    1402:	2d 81       	ldd	r18, Y+5	; 0x05
    1404:	3e 81       	ldd	r19, Y+6	; 0x06
    1406:	23 30       	cpi	r18, 0x03	; 3
    1408:	31 05       	cpc	r19, r1
    140a:	34 f4       	brge	.+12     	; 0x1418 <SET_State_4MSB+0x44>
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	91 05       	cpc	r25, r1
    1414:	61 f0       	breq	.+24     	; 0x142e <SET_State_4MSB+0x5a>
    1416:	6e c0       	rjmp	.+220    	; 0x14f4 <SET_State_4MSB+0x120>
    1418:	2d 81       	ldd	r18, Y+5	; 0x05
    141a:	3e 81       	ldd	r19, Y+6	; 0x06
    141c:	23 30       	cpi	r18, 0x03	; 3
    141e:	31 05       	cpc	r19, r1
    1420:	b1 f0       	breq	.+44     	; 0x144e <SET_State_4MSB+0x7a>
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	9e 81       	ldd	r25, Y+6	; 0x06
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	91 05       	cpc	r25, r1
    142a:	c9 f0       	breq	.+50     	; 0x145e <SET_State_4MSB+0x8a>
    142c:	63 c0       	rjmp	.+198    	; 0x14f4 <SET_State_4MSB+0x120>
		{
		case PORTA:
			PORTA_REG |= 0xF0;
    142e:	ab e3       	ldi	r26, 0x3B	; 59
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	eb e3       	ldi	r30, 0x3B	; 59
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	80 6f       	ori	r24, 0xF0	; 240
    143a:	8c 93       	st	X, r24
    143c:	5b c0       	rjmp	.+182    	; 0x14f4 <SET_State_4MSB+0x120>
			break;
		case PORTB:
			PORTB_REG |= 0xF0;
    143e:	a8 e3       	ldi	r26, 0x38	; 56
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e8 e3       	ldi	r30, 0x38	; 56
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	80 6f       	ori	r24, 0xF0	; 240
    144a:	8c 93       	st	X, r24
    144c:	53 c0       	rjmp	.+166    	; 0x14f4 <SET_State_4MSB+0x120>
			break;
		case PORTC:
			PORTC_REG |= 0xF0;
    144e:	a5 e3       	ldi	r26, 0x35	; 53
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e5 e3       	ldi	r30, 0x35	; 53
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	80 6f       	ori	r24, 0xF0	; 240
    145a:	8c 93       	st	X, r24
    145c:	4b c0       	rjmp	.+150    	; 0x14f4 <SET_State_4MSB+0x120>
			break;
		case PORTD:
			PORTD_REG |= 0xF0;
    145e:	a2 e3       	ldi	r26, 0x32	; 50
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e2 e3       	ldi	r30, 0x32	; 50
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	80 6f       	ori	r24, 0xF0	; 240
    146a:	8c 93       	st	X, r24
    146c:	43 c0       	rjmp	.+134    	; 0x14f4 <SET_State_4MSB+0x120>
			break;
		}
	}
	else if(State == LOW)
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	88 23       	and	r24, r24
    1472:	09 f0       	breq	.+2      	; 0x1476 <SET_State_4MSB+0xa2>
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <SET_State_4MSB+0x120>
	{
		switch(Copy_PORT)
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3c 83       	std	Y+4, r19	; 0x04
    147e:	2b 83       	std	Y+3, r18	; 0x03
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	82 30       	cpi	r24, 0x02	; 2
    1486:	91 05       	cpc	r25, r1
    1488:	f1 f0       	breq	.+60     	; 0x14c6 <SET_State_4MSB+0xf2>
    148a:	2b 81       	ldd	r18, Y+3	; 0x03
    148c:	3c 81       	ldd	r19, Y+4	; 0x04
    148e:	23 30       	cpi	r18, 0x03	; 3
    1490:	31 05       	cpc	r19, r1
    1492:	34 f4       	brge	.+12     	; 0x14a0 <SET_State_4MSB+0xcc>
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	91 05       	cpc	r25, r1
    149c:	61 f0       	breq	.+24     	; 0x14b6 <SET_State_4MSB+0xe2>
    149e:	2a c0       	rjmp	.+84     	; 0x14f4 <SET_State_4MSB+0x120>
    14a0:	2b 81       	ldd	r18, Y+3	; 0x03
    14a2:	3c 81       	ldd	r19, Y+4	; 0x04
    14a4:	23 30       	cpi	r18, 0x03	; 3
    14a6:	31 05       	cpc	r19, r1
    14a8:	b1 f0       	breq	.+44     	; 0x14d6 <SET_State_4MSB+0x102>
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	91 05       	cpc	r25, r1
    14b2:	c9 f0       	breq	.+50     	; 0x14e6 <SET_State_4MSB+0x112>
    14b4:	1f c0       	rjmp	.+62     	; 0x14f4 <SET_State_4MSB+0x120>
		{
		case PORTA:
			PORTA_REG &= 0x0F;
    14b6:	ab e3       	ldi	r26, 0x3B	; 59
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	eb e3       	ldi	r30, 0x3B	; 59
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	8f 70       	andi	r24, 0x0F	; 15
    14c2:	8c 93       	st	X, r24
    14c4:	17 c0       	rjmp	.+46     	; 0x14f4 <SET_State_4MSB+0x120>
			break;
		case PORTB:
			PORTB_REG &= 0x0F;
    14c6:	a8 e3       	ldi	r26, 0x38	; 56
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e8 e3       	ldi	r30, 0x38	; 56
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 70       	andi	r24, 0x0F	; 15
    14d2:	8c 93       	st	X, r24
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <SET_State_4MSB+0x120>
			break;
		case PORTC:
			PORTC_REG &= 0x0F;
    14d6:	a5 e3       	ldi	r26, 0x35	; 53
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e5 e3       	ldi	r30, 0x35	; 53
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8f 70       	andi	r24, 0x0F	; 15
    14e2:	8c 93       	st	X, r24
    14e4:	07 c0       	rjmp	.+14     	; 0x14f4 <SET_State_4MSB+0x120>
			break;
		case PORTD:
			PORTD_REG &= 0x0F;
    14e6:	a2 e3       	ldi	r26, 0x32	; 50
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e2 e3       	ldi	r30, 0x32	; 50
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8f 70       	andi	r24, 0x0F	; 15
    14f2:	8c 93       	st	X, r24
			break;
		}
	}
}
    14f4:	26 96       	adiw	r28, 0x06	; 6
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <SET_State_ALL>:

void SET_State_ALL(u8 Copy_PORT, u8 State)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	28 97       	sbiw	r28, 0x08	; 8
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PORT)
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	38 87       	std	Y+8, r19	; 0x08
    1526:	2f 83       	std	Y+7, r18	; 0x07
    1528:	8f 81       	ldd	r24, Y+7	; 0x07
    152a:	98 85       	ldd	r25, Y+8	; 0x08
    152c:	82 30       	cpi	r24, 0x02	; 2
    152e:	91 05       	cpc	r25, r1
    1530:	29 f1       	breq	.+74     	; 0x157c <SET_State_ALL+0x76>
    1532:	2f 81       	ldd	r18, Y+7	; 0x07
    1534:	38 85       	ldd	r19, Y+8	; 0x08
    1536:	23 30       	cpi	r18, 0x03	; 3
    1538:	31 05       	cpc	r19, r1
    153a:	34 f4       	brge	.+12     	; 0x1548 <SET_State_ALL+0x42>
    153c:	8f 81       	ldd	r24, Y+7	; 0x07
    153e:	98 85       	ldd	r25, Y+8	; 0x08
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	91 05       	cpc	r25, r1
    1544:	61 f0       	breq	.+24     	; 0x155e <SET_State_ALL+0x58>
    1546:	46 c0       	rjmp	.+140    	; 0x15d4 <SET_State_ALL+0xce>
    1548:	2f 81       	ldd	r18, Y+7	; 0x07
    154a:	38 85       	ldd	r19, Y+8	; 0x08
    154c:	23 30       	cpi	r18, 0x03	; 3
    154e:	31 05       	cpc	r19, r1
    1550:	21 f1       	breq	.+72     	; 0x159a <SET_State_ALL+0x94>
    1552:	8f 81       	ldd	r24, Y+7	; 0x07
    1554:	98 85       	ldd	r25, Y+8	; 0x08
    1556:	84 30       	cpi	r24, 0x04	; 4
    1558:	91 05       	cpc	r25, r1
    155a:	71 f1       	breq	.+92     	; 0x15b8 <SET_State_ALL+0xb2>
    155c:	3b c0       	rjmp	.+118    	; 0x15d4 <SET_State_ALL+0xce>
	{
	case PORTA:
		PORTA_REG &= 0;
    155e:	eb e3       	ldi	r30, 0x3B	; 59
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	90 81       	ld	r25, Z
    1564:	eb e3       	ldi	r30, 0x3B	; 59
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	10 82       	st	Z, r1
		PORTA_REG |= State;
    156a:	ab e3       	ldi	r26, 0x3B	; 59
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	eb e3       	ldi	r30, 0x3B	; 59
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	90 81       	ld	r25, Z
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	89 2b       	or	r24, r25
    1578:	8c 93       	st	X, r24
    157a:	2c c0       	rjmp	.+88     	; 0x15d4 <SET_State_ALL+0xce>
		break;
	case PORTB:
		PORTB_REG &= 0;
    157c:	e8 e3       	ldi	r30, 0x38	; 56
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	20 81       	ld	r18, Z
    1582:	e8 e3       	ldi	r30, 0x38	; 56
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	10 82       	st	Z, r1
		PORTB_REG |= State;
    1588:	a8 e3       	ldi	r26, 0x38	; 56
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e8 e3       	ldi	r30, 0x38	; 56
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	90 81       	ld	r25, Z
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	89 2b       	or	r24, r25
    1596:	8c 93       	st	X, r24
    1598:	1d c0       	rjmp	.+58     	; 0x15d4 <SET_State_ALL+0xce>
		break;
	case PORTC:
		PORTC_REG &= 0;
    159a:	e5 e3       	ldi	r30, 0x35	; 53
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	30 81       	ld	r19, Z
    15a0:	e5 e3       	ldi	r30, 0x35	; 53
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	10 82       	st	Z, r1
		PORTC_REG |= State;
    15a6:	a5 e3       	ldi	r26, 0x35	; 53
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e5 e3       	ldi	r30, 0x35	; 53
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	90 81       	ld	r25, Z
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	89 2b       	or	r24, r25
    15b4:	8c 93       	st	X, r24
    15b6:	0e c0       	rjmp	.+28     	; 0x15d4 <SET_State_ALL+0xce>
		break;
	case PORTD:
		PORTD_REG &= 0;
    15b8:	e2 e3       	ldi	r30, 0x32	; 50
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	e2 e3       	ldi	r30, 0x32	; 50
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	10 82       	st	Z, r1
		PORTD_REG |= State;
    15c4:	a2 e3       	ldi	r26, 0x32	; 50
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e2 e3       	ldi	r30, 0x32	; 50
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	90 81       	ld	r25, Z
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	89 2b       	or	r24, r25
    15d2:	8c 93       	st	X, r24
		break;
	}
}
    15d4:	28 96       	adiw	r28, 0x08	; 8
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <SET_Direction_ALL>:

void SET_Direction_ALL(u8 Copy_PORT, u8 Direction)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <SET_Direction_ALL+0x6>
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <SET_Direction_ALL+0x8>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <SET_Direction_ALL+0xa>
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction == OUTPUT)
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	99 f5       	brne	.+102    	; 0x1664 <SET_Direction_ALL+0x7e>
	{
		switch(Copy_PORT)
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3e 83       	std	Y+6, r19	; 0x06
    1606:	2d 83       	std	Y+5, r18	; 0x05
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	91 05       	cpc	r25, r1
    1610:	d9 f0       	breq	.+54     	; 0x1648 <SET_Direction_ALL+0x62>
    1612:	2d 81       	ldd	r18, Y+5	; 0x05
    1614:	3e 81       	ldd	r19, Y+6	; 0x06
    1616:	23 30       	cpi	r18, 0x03	; 3
    1618:	31 05       	cpc	r19, r1
    161a:	34 f4       	brge	.+12     	; 0x1628 <SET_Direction_ALL+0x42>
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	91 05       	cpc	r25, r1
    1624:	61 f0       	breq	.+24     	; 0x163e <SET_Direction_ALL+0x58>
    1626:	1e c0       	rjmp	.+60     	; 0x1664 <SET_Direction_ALL+0x7e>
    1628:	2d 81       	ldd	r18, Y+5	; 0x05
    162a:	3e 81       	ldd	r19, Y+6	; 0x06
    162c:	23 30       	cpi	r18, 0x03	; 3
    162e:	31 05       	cpc	r19, r1
    1630:	81 f0       	breq	.+32     	; 0x1652 <SET_Direction_ALL+0x6c>
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	84 30       	cpi	r24, 0x04	; 4
    1638:	91 05       	cpc	r25, r1
    163a:	81 f0       	breq	.+32     	; 0x165c <SET_Direction_ALL+0x76>
    163c:	13 c0       	rjmp	.+38     	; 0x1664 <SET_Direction_ALL+0x7e>
		{
		case PORTA:
			DDRA_REG = 0xFF;
    163e:	ea e3       	ldi	r30, 0x3A	; 58
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	80 83       	st	Z, r24
    1646:	0e c0       	rjmp	.+28     	; 0x1664 <SET_Direction_ALL+0x7e>
			break;
		case PORTB:
			DDRB_REG = 0xFF;
    1648:	e7 e3       	ldi	r30, 0x37	; 55
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	80 83       	st	Z, r24
    1650:	09 c0       	rjmp	.+18     	; 0x1664 <SET_Direction_ALL+0x7e>
			break;
		case PORTC:
			DDRC_REG = 0xFF;
    1652:	e4 e3       	ldi	r30, 0x34	; 52
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	80 83       	st	Z, r24
    165a:	04 c0       	rjmp	.+8      	; 0x1664 <SET_Direction_ALL+0x7e>
			break;
		case PORTD:
			DDRD_REG = 0xFF;
    165c:	e1 e3       	ldi	r30, 0x31	; 49
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	80 83       	st	Z, r24
			break;
		}
	}
	if(Direction == INPUT)
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	88 23       	and	r24, r24
    1668:	79 f5       	brne	.+94     	; 0x16c8 <SET_Direction_ALL+0xe2>
	{
		switch(Copy_PORT)
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	3c 83       	std	Y+4, r19	; 0x04
    1672:	2b 83       	std	Y+3, r18	; 0x03
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	82 30       	cpi	r24, 0x02	; 2
    167a:	91 05       	cpc	r25, r1
    167c:	d1 f0       	breq	.+52     	; 0x16b2 <SET_Direction_ALL+0xcc>
    167e:	2b 81       	ldd	r18, Y+3	; 0x03
    1680:	3c 81       	ldd	r19, Y+4	; 0x04
    1682:	23 30       	cpi	r18, 0x03	; 3
    1684:	31 05       	cpc	r19, r1
    1686:	34 f4       	brge	.+12     	; 0x1694 <SET_Direction_ALL+0xae>
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	91 05       	cpc	r25, r1
    1690:	61 f0       	breq	.+24     	; 0x16aa <SET_Direction_ALL+0xc4>
    1692:	1a c0       	rjmp	.+52     	; 0x16c8 <SET_Direction_ALL+0xe2>
    1694:	2b 81       	ldd	r18, Y+3	; 0x03
    1696:	3c 81       	ldd	r19, Y+4	; 0x04
    1698:	23 30       	cpi	r18, 0x03	; 3
    169a:	31 05       	cpc	r19, r1
    169c:	71 f0       	breq	.+28     	; 0x16ba <SET_Direction_ALL+0xd4>
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	84 30       	cpi	r24, 0x04	; 4
    16a4:	91 05       	cpc	r25, r1
    16a6:	69 f0       	breq	.+26     	; 0x16c2 <SET_Direction_ALL+0xdc>
    16a8:	0f c0       	rjmp	.+30     	; 0x16c8 <SET_Direction_ALL+0xe2>
		{
		case PORTA:
			DDRA_REG = 0x00;
    16aa:	ea e3       	ldi	r30, 0x3A	; 58
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	10 82       	st	Z, r1
    16b0:	0b c0       	rjmp	.+22     	; 0x16c8 <SET_Direction_ALL+0xe2>
			break;
		case PORTB:
			DDRB_REG = 0x00;
    16b2:	e7 e3       	ldi	r30, 0x37	; 55
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	10 82       	st	Z, r1
    16b8:	07 c0       	rjmp	.+14     	; 0x16c8 <SET_Direction_ALL+0xe2>
			break;
		case PORTC:
			DDRC_REG = 0x00;
    16ba:	e4 e3       	ldi	r30, 0x34	; 52
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	10 82       	st	Z, r1
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <SET_Direction_ALL+0xe2>
			break;
		case PORTD:
			DDRD_REG = 0x00;
    16c2:	e1 e3       	ldi	r30, 0x31	; 49
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	10 82       	st	Z, r1
			break;
		}
	}
}
    16c8:	26 96       	adiw	r28, 0x06	; 6
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <LCD_vInit>:
#include "LCD_Interface.h"
#define F_CPU 8000000UL
#include <util/delay.h>

void LCD_vInit(void)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	e8 97       	sbiw	r28, 0x38	; 56
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
	//Set data pins direction for MCU
	SET_Direction_ALL(LCD_DATA_PORT, OUTPUT);
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <SET_Direction_ALL>

	//set control pins direction for MCU
	SET_Direction(LCD_CTRL_PORT, PIN_RS, OUTPUT);
    16f6:	83 e0       	ldi	r24, 0x03	; 3
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <SET_Direction>
	SET_Direction(LCD_CTRL_PORT, PIN_RW, OUTPUT);
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	61 e0       	ldi	r22, 0x01	; 1
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	0e 94 9b 05 	call	0xb36	; 0xb36 <SET_Direction>
	SET_Direction(LCD_CTRL_PORT, PIN_EN, OUTPUT);
    170a:	83 e0       	ldi	r24, 0x03	; 3
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	0e 94 9b 05 	call	0xb36	; 0xb36 <SET_Direction>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a8 e4       	ldi	r26, 0x48	; 72
    171a:	b2 e4       	ldi	r27, 0x42	; 66
    171c:	8d ab       	std	Y+53, r24	; 0x35
    171e:	9e ab       	std	Y+54, r25	; 0x36
    1720:	af ab       	std	Y+55, r26	; 0x37
    1722:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1724:	6d a9       	ldd	r22, Y+53	; 0x35
    1726:	7e a9       	ldd	r23, Y+54	; 0x36
    1728:	8f a9       	ldd	r24, Y+55	; 0x37
    172a:	98 ad       	ldd	r25, Y+56	; 0x38
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4a ef       	ldi	r20, 0xFA	; 250
    1732:	54 e4       	ldi	r21, 0x44	; 68
    1734:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	89 ab       	std	Y+49, r24	; 0x31
    173e:	9a ab       	std	Y+50, r25	; 0x32
    1740:	ab ab       	std	Y+51, r26	; 0x33
    1742:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1744:	69 a9       	ldd	r22, Y+49	; 0x31
    1746:	7a a9       	ldd	r23, Y+50	; 0x32
    1748:	8b a9       	ldd	r24, Y+51	; 0x33
    174a:	9c a9       	ldd	r25, Y+52	; 0x34
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1758:	88 23       	and	r24, r24
    175a:	2c f4       	brge	.+10     	; 0x1766 <LCD_vInit+0x8c>
		__ticks = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	98 ab       	std	Y+48, r25	; 0x30
    1762:	8f a7       	std	Y+47, r24	; 0x2f
    1764:	3f c0       	rjmp	.+126    	; 0x17e4 <LCD_vInit+0x10a>
	else if (__tmp > 65535)
    1766:	69 a9       	ldd	r22, Y+49	; 0x31
    1768:	7a a9       	ldd	r23, Y+50	; 0x32
    176a:	8b a9       	ldd	r24, Y+51	; 0x33
    176c:	9c a9       	ldd	r25, Y+52	; 0x34
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	57 e4       	ldi	r21, 0x47	; 71
    1776:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    177a:	18 16       	cp	r1, r24
    177c:	4c f5       	brge	.+82     	; 0x17d0 <LCD_vInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	6d a9       	ldd	r22, Y+53	; 0x35
    1780:	7e a9       	ldd	r23, Y+54	; 0x36
    1782:	8f a9       	ldd	r24, Y+55	; 0x37
    1784:	98 ad       	ldd	r25, Y+56	; 0x38
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	98 ab       	std	Y+48, r25	; 0x30
    17a4:	8f a7       	std	Y+47, r24	; 0x2f
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <LCD_vInit+0xec>
    17a8:	88 ec       	ldi	r24, 0xC8	; 200
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9e a7       	std	Y+46, r25	; 0x2e
    17ae:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    17b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <LCD_vInit+0xda>
    17b8:	9e a7       	std	Y+46, r25	; 0x2e
    17ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17be:	98 a9       	ldd	r25, Y+48	; 0x30
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	98 ab       	std	Y+48, r25	; 0x30
    17c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	69 f7       	brne	.-38     	; 0x17a8 <LCD_vInit+0xce>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <LCD_vInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d0:	69 a9       	ldd	r22, Y+49	; 0x31
    17d2:	7a a9       	ldd	r23, Y+50	; 0x32
    17d4:	8b a9       	ldd	r24, Y+51	; 0x33
    17d6:	9c a9       	ldd	r25, Y+52	; 0x34
    17d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	98 ab       	std	Y+48, r25	; 0x30
    17e2:	8f a7       	std	Y+47, r24	; 0x2f
    17e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e6:	98 a9       	ldd	r25, Y+48	; 0x30
    17e8:	9c a7       	std	Y+44, r25	; 0x2c
    17ea:	8b a7       	std	Y+43, r24	; 0x2b
    17ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <LCD_vInit+0x116>
    17f4:	9c a7       	std	Y+44, r25	; 0x2c
    17f6:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(50);

	LCD_vSendCmd(TWO_LINE_LCD_Eight_BIT_MODE);
    17f8:	88 e3       	ldi	r24, 0x38	; 56
    17fa:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LCD_vSendCmd>
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	a8 e4       	ldi	r26, 0x48	; 72
    1804:	b2 e4       	ldi	r27, 0x42	; 66
    1806:	8f a3       	std	Y+39, r24	; 0x27
    1808:	98 a7       	std	Y+40, r25	; 0x28
    180a:	a9 a7       	std	Y+41, r26	; 0x29
    180c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180e:	6f a1       	ldd	r22, Y+39	; 0x27
    1810:	78 a5       	ldd	r23, Y+40	; 0x28
    1812:	89 a5       	ldd	r24, Y+41	; 0x29
    1814:	9a a5       	ldd	r25, Y+42	; 0x2a
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	4a ef       	ldi	r20, 0xFA	; 250
    181c:	54 e4       	ldi	r21, 0x44	; 68
    181e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	8b a3       	std	Y+35, r24	; 0x23
    1828:	9c a3       	std	Y+36, r25	; 0x24
    182a:	ad a3       	std	Y+37, r26	; 0x25
    182c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    182e:	6b a1       	ldd	r22, Y+35	; 0x23
    1830:	7c a1       	ldd	r23, Y+36	; 0x24
    1832:	8d a1       	ldd	r24, Y+37	; 0x25
    1834:	9e a1       	ldd	r25, Y+38	; 0x26
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e8       	ldi	r20, 0x80	; 128
    183c:	5f e3       	ldi	r21, 0x3F	; 63
    183e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1842:	88 23       	and	r24, r24
    1844:	2c f4       	brge	.+10     	; 0x1850 <LCD_vInit+0x176>
		__ticks = 1;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9a a3       	std	Y+34, r25	; 0x22
    184c:	89 a3       	std	Y+33, r24	; 0x21
    184e:	3f c0       	rjmp	.+126    	; 0x18ce <LCD_vInit+0x1f4>
	else if (__tmp > 65535)
    1850:	6b a1       	ldd	r22, Y+35	; 0x23
    1852:	7c a1       	ldd	r23, Y+36	; 0x24
    1854:	8d a1       	ldd	r24, Y+37	; 0x25
    1856:	9e a1       	ldd	r25, Y+38	; 0x26
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	3f ef       	ldi	r19, 0xFF	; 255
    185c:	4f e7       	ldi	r20, 0x7F	; 127
    185e:	57 e4       	ldi	r21, 0x47	; 71
    1860:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1864:	18 16       	cp	r1, r24
    1866:	4c f5       	brge	.+82     	; 0x18ba <LCD_vInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1868:	6f a1       	ldd	r22, Y+39	; 0x27
    186a:	78 a5       	ldd	r23, Y+40	; 0x28
    186c:	89 a5       	ldd	r24, Y+41	; 0x29
    186e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e2       	ldi	r20, 0x20	; 32
    1876:	51 e4       	ldi	r21, 0x41	; 65
    1878:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	9a a3       	std	Y+34, r25	; 0x22
    188e:	89 a3       	std	Y+33, r24	; 0x21
    1890:	0f c0       	rjmp	.+30     	; 0x18b0 <LCD_vInit+0x1d6>
    1892:	88 ec       	ldi	r24, 0xC8	; 200
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	98 a3       	std	Y+32, r25	; 0x20
    1898:	8f 8f       	std	Y+31, r24	; 0x1f
    189a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    189c:	98 a1       	ldd	r25, Y+32	; 0x20
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCD_vInit+0x1c4>
    18a2:	98 a3       	std	Y+32, r25	; 0x20
    18a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a6:	89 a1       	ldd	r24, Y+33	; 0x21
    18a8:	9a a1       	ldd	r25, Y+34	; 0x22
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	9a a3       	std	Y+34, r25	; 0x22
    18ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b0:	89 a1       	ldd	r24, Y+33	; 0x21
    18b2:	9a a1       	ldd	r25, Y+34	; 0x22
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	69 f7       	brne	.-38     	; 0x1892 <LCD_vInit+0x1b8>
    18b8:	14 c0       	rjmp	.+40     	; 0x18e2 <LCD_vInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ba:	6b a1       	ldd	r22, Y+35	; 0x23
    18bc:	7c a1       	ldd	r23, Y+36	; 0x24
    18be:	8d a1       	ldd	r24, Y+37	; 0x25
    18c0:	9e a1       	ldd	r25, Y+38	; 0x26
    18c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	9a a3       	std	Y+34, r25	; 0x22
    18cc:	89 a3       	std	Y+33, r24	; 0x21
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	9a a1       	ldd	r25, Y+34	; 0x22
    18d2:	9e 8f       	std	Y+30, r25	; 0x1e
    18d4:	8d 8f       	std	Y+29, r24	; 0x1d
    18d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <LCD_vInit+0x200>
    18de:	9e 8f       	std	Y+30, r25	; 0x1e
    18e0:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(50);

	LCD_vSendCmd(CURSOR_OFF);
    18e2:	8c e0       	ldi	r24, 0x0C	; 12
    18e4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LCD_vSendCmd>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a8 e4       	ldi	r26, 0x48	; 72
    18ee:	b2 e4       	ldi	r27, 0x42	; 66
    18f0:	89 8f       	std	Y+25, r24	; 0x19
    18f2:	9a 8f       	std	Y+26, r25	; 0x1a
    18f4:	ab 8f       	std	Y+27, r26	; 0x1b
    18f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	69 8d       	ldd	r22, Y+25	; 0x19
    18fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4a ef       	ldi	r20, 0xFA	; 250
    1906:	54 e4       	ldi	r21, 0x44	; 68
    1908:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8d 8b       	std	Y+21, r24	; 0x15
    1912:	9e 8b       	std	Y+22, r25	; 0x16
    1914:	af 8b       	std	Y+23, r26	; 0x17
    1916:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1918:	6d 89       	ldd	r22, Y+21	; 0x15
    191a:	7e 89       	ldd	r23, Y+22	; 0x16
    191c:	8f 89       	ldd	r24, Y+23	; 0x17
    191e:	98 8d       	ldd	r25, Y+24	; 0x18
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    192c:	88 23       	and	r24, r24
    192e:	2c f4       	brge	.+10     	; 0x193a <LCD_vInit+0x260>
		__ticks = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
    1938:	3f c0       	rjmp	.+126    	; 0x19b8 <LCD_vInit+0x2de>
	else if (__tmp > 65535)
    193a:	6d 89       	ldd	r22, Y+21	; 0x15
    193c:	7e 89       	ldd	r23, Y+22	; 0x16
    193e:	8f 89       	ldd	r24, Y+23	; 0x17
    1940:	98 8d       	ldd	r25, Y+24	; 0x18
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	3f ef       	ldi	r19, 0xFF	; 255
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	57 e4       	ldi	r21, 0x47	; 71
    194a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    194e:	18 16       	cp	r1, r24
    1950:	4c f5       	brge	.+82     	; 0x19a4 <LCD_vInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1952:	69 8d       	ldd	r22, Y+25	; 0x19
    1954:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1956:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1958:	9c 8d       	ldd	r25, Y+28	; 0x1c
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	9c 8b       	std	Y+20, r25	; 0x14
    1978:	8b 8b       	std	Y+19, r24	; 0x13
    197a:	0f c0       	rjmp	.+30     	; 0x199a <LCD_vInit+0x2c0>
    197c:	88 ec       	ldi	r24, 0xC8	; 200
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9a 8b       	std	Y+18, r25	; 0x12
    1982:	89 8b       	std	Y+17, r24	; 0x11
    1984:	89 89       	ldd	r24, Y+17	; 0x11
    1986:	9a 89       	ldd	r25, Y+18	; 0x12
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <LCD_vInit+0x2ae>
    198c:	9a 8b       	std	Y+18, r25	; 0x12
    198e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	8b 89       	ldd	r24, Y+19	; 0x13
    1992:	9c 89       	ldd	r25, Y+20	; 0x14
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	9c 8b       	std	Y+20, r25	; 0x14
    1998:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	8b 89       	ldd	r24, Y+19	; 0x13
    199c:	9c 89       	ldd	r25, Y+20	; 0x14
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	69 f7       	brne	.-38     	; 0x197c <LCD_vInit+0x2a2>
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <LCD_vInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a4:	6d 89       	ldd	r22, Y+21	; 0x15
    19a6:	7e 89       	ldd	r23, Y+22	; 0x16
    19a8:	8f 89       	ldd	r24, Y+23	; 0x17
    19aa:	98 8d       	ldd	r25, Y+24	; 0x18
    19ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9c 8b       	std	Y+20, r25	; 0x14
    19b6:	8b 8b       	std	Y+19, r24	; 0x13
    19b8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ba:	9c 89       	ldd	r25, Y+20	; 0x14
    19bc:	98 8b       	std	Y+16, r25	; 0x10
    19be:	8f 87       	std	Y+15, r24	; 0x0f
    19c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c2:	98 89       	ldd	r25, Y+16	; 0x10
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <LCD_vInit+0x2ea>
    19c8:	98 8b       	std	Y+16, r25	; 0x10
    19ca:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(50);

	LCD_vSendCmd(CLEAR_COMMAND);
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LCD_vSendCmd>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a8 e4       	ldi	r26, 0x48	; 72
    19d8:	b2 e4       	ldi	r27, 0x42	; 66
    19da:	8b 87       	std	Y+11, r24	; 0x0b
    19dc:	9c 87       	std	Y+12, r25	; 0x0c
    19de:	ad 87       	std	Y+13, r26	; 0x0d
    19e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a ef       	ldi	r20, 0xFA	; 250
    19f0:	54 e4       	ldi	r21, 0x44	; 68
    19f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	8f 83       	std	Y+7, r24	; 0x07
    19fc:	98 87       	std	Y+8, r25	; 0x08
    19fe:	a9 87       	std	Y+9, r26	; 0x09
    1a00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e8       	ldi	r20, 0x80	; 128
    1a10:	5f e3       	ldi	r21, 0x3F	; 63
    1a12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a16:	88 23       	and	r24, r24
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <LCD_vInit+0x34a>
		__ticks = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05
    1a22:	3f c0       	rjmp	.+126    	; 0x1aa2 <LCD_vInit+0x3c8>
	else if (__tmp > 65535)
    1a24:	6f 81       	ldd	r22, Y+7	; 0x07
    1a26:	78 85       	ldd	r23, Y+8	; 0x08
    1a28:	89 85       	ldd	r24, Y+9	; 0x09
    1a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	3f ef       	ldi	r19, 0xFF	; 255
    1a30:	4f e7       	ldi	r20, 0x7F	; 127
    1a32:	57 e4       	ldi	r21, 0x47	; 71
    1a34:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	4c f5       	brge	.+82     	; 0x1a8e <LCD_vInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	51 e4       	ldi	r21, 0x41	; 65
    1a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	0f c0       	rjmp	.+30     	; 0x1a84 <LCD_vInit+0x3aa>
    1a66:	88 ec       	ldi	r24, 0xC8	; 200
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9c 83       	std	Y+4, r25	; 0x04
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	9c 81       	ldd	r25, Y+4	; 0x04
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <LCD_vInit+0x398>
    1a76:	9c 83       	std	Y+4, r25	; 0x04
    1a78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	69 f7       	brne	.-38     	; 0x1a66 <LCD_vInit+0x38c>
    1a8c:	14 c0       	rjmp	.+40     	; 0x1ab6 <LCD_vInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a90:	78 85       	ldd	r23, Y+8	; 0x08
    1a92:	89 85       	ldd	r24, Y+9	; 0x09
    1a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_vInit+0x3d4>
    1ab2:	9a 83       	std	Y+2, r25	; 0x02
    1ab4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(50);


}
    1ab6:	e8 96       	adiw	r28, 0x38	; 56
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <LCD_vSendCmd>:

void LCD_vSendCmd(u8 Copy_u8Command)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	e9 97       	sbiw	r28, 0x39	; 57
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	89 af       	std	Y+57, r24	; 0x39
	SET_State(LCD_CTRL_PORT, PIN_RS, LOW);
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <SET_State>
	SET_State(LCD_CTRL_PORT, PIN_RW, LOW);
    1ae8:	83 e0       	ldi	r24, 0x03	; 3
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	0e 94 9d 06 	call	0xd3a	; 0xd3a <SET_State>
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	a8 e4       	ldi	r26, 0x48	; 72
    1af8:	b2 e4       	ldi	r27, 0x42	; 66
    1afa:	8d ab       	std	Y+53, r24	; 0x35
    1afc:	9e ab       	std	Y+54, r25	; 0x36
    1afe:	af ab       	std	Y+55, r26	; 0x37
    1b00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b02:	6d a9       	ldd	r22, Y+53	; 0x35
    1b04:	7e a9       	ldd	r23, Y+54	; 0x36
    1b06:	8f a9       	ldd	r24, Y+55	; 0x37
    1b08:	98 ad       	ldd	r25, Y+56	; 0x38
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	4a ef       	ldi	r20, 0xFA	; 250
    1b10:	54 e4       	ldi	r21, 0x44	; 68
    1b12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	89 ab       	std	Y+49, r24	; 0x31
    1b1c:	9a ab       	std	Y+50, r25	; 0x32
    1b1e:	ab ab       	std	Y+51, r26	; 0x33
    1b20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b22:	69 a9       	ldd	r22, Y+49	; 0x31
    1b24:	7a a9       	ldd	r23, Y+50	; 0x32
    1b26:	8b a9       	ldd	r24, Y+51	; 0x33
    1b28:	9c a9       	ldd	r25, Y+52	; 0x34
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e8       	ldi	r20, 0x80	; 128
    1b30:	5f e3       	ldi	r21, 0x3F	; 63
    1b32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b36:	88 23       	and	r24, r24
    1b38:	2c f4       	brge	.+10     	; 0x1b44 <LCD_vSendCmd+0x7c>
		__ticks = 1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	98 ab       	std	Y+48, r25	; 0x30
    1b40:	8f a7       	std	Y+47, r24	; 0x2f
    1b42:	3f c0       	rjmp	.+126    	; 0x1bc2 <LCD_vSendCmd+0xfa>
	else if (__tmp > 65535)
    1b44:	69 a9       	ldd	r22, Y+49	; 0x31
    1b46:	7a a9       	ldd	r23, Y+50	; 0x32
    1b48:	8b a9       	ldd	r24, Y+51	; 0x33
    1b4a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	3f ef       	ldi	r19, 0xFF	; 255
    1b50:	4f e7       	ldi	r20, 0x7F	; 127
    1b52:	57 e4       	ldi	r21, 0x47	; 71
    1b54:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b58:	18 16       	cp	r1, r24
    1b5a:	4c f5       	brge	.+82     	; 0x1bae <LCD_vSendCmd+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b60:	8f a9       	ldd	r24, Y+55	; 0x37
    1b62:	98 ad       	ldd	r25, Y+56	; 0x38
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e2       	ldi	r20, 0x20	; 32
    1b6a:	51 e4       	ldi	r21, 0x41	; 65
    1b6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	98 ab       	std	Y+48, r25	; 0x30
    1b82:	8f a7       	std	Y+47, r24	; 0x2f
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <LCD_vSendCmd+0xdc>
    1b86:	88 ec       	ldi	r24, 0xC8	; 200
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9e a7       	std	Y+46, r25	; 0x2e
    1b8c:	8d a7       	std	Y+45, r24	; 0x2d
    1b8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b90:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <LCD_vSendCmd+0xca>
    1b96:	9e a7       	std	Y+46, r25	; 0x2e
    1b98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	98 ab       	std	Y+48, r25	; 0x30
    1ba2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	69 f7       	brne	.-38     	; 0x1b86 <LCD_vSendCmd+0xbe>
    1bac:	14 c0       	rjmp	.+40     	; 0x1bd6 <LCD_vSendCmd+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bae:	69 a9       	ldd	r22, Y+49	; 0x31
    1bb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	98 ab       	std	Y+48, r25	; 0x30
    1bc0:	8f a7       	std	Y+47, r24	; 0x2f
    1bc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc4:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc6:	9c a7       	std	Y+44, r25	; 0x2c
    1bc8:	8b a7       	std	Y+43, r24	; 0x2b
    1bca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bcc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <LCD_vSendCmd+0x106>
    1bd2:	9c a7       	std	Y+44, r25	; 0x2c
    1bd4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	SET_State(LCD_CTRL_PORT, PIN_EN, HIGH);
    1bd6:	83 e0       	ldi	r24, 0x03	; 3
    1bd8:	62 e0       	ldi	r22, 0x02	; 2
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	0e 94 9d 06 	call	0xd3a	; 0xd3a <SET_State>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a8 e4       	ldi	r26, 0x48	; 72
    1be6:	b2 e4       	ldi	r27, 0x42	; 66
    1be8:	8f a3       	std	Y+39, r24	; 0x27
    1bea:	98 a7       	std	Y+40, r25	; 0x28
    1bec:	a9 a7       	std	Y+41, r26	; 0x29
    1bee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	6f a1       	ldd	r22, Y+39	; 0x27
    1bf2:	78 a5       	ldd	r23, Y+40	; 0x28
    1bf4:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a ef       	ldi	r20, 0xFA	; 250
    1bfe:	54 e4       	ldi	r21, 0x44	; 68
    1c00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	8b a3       	std	Y+35, r24	; 0x23
    1c0a:	9c a3       	std	Y+36, r25	; 0x24
    1c0c:	ad a3       	std	Y+37, r26	; 0x25
    1c0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c10:	6b a1       	ldd	r22, Y+35	; 0x23
    1c12:	7c a1       	ldd	r23, Y+36	; 0x24
    1c14:	8d a1       	ldd	r24, Y+37	; 0x25
    1c16:	9e a1       	ldd	r25, Y+38	; 0x26
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <LCD_vSendCmd+0x16a>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9a a3       	std	Y+34, r25	; 0x22
    1c2e:	89 a3       	std	Y+33, r24	; 0x21
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <LCD_vSendCmd+0x1e8>
	else if (__tmp > 65535)
    1c32:	6b a1       	ldd	r22, Y+35	; 0x23
    1c34:	7c a1       	ldd	r23, Y+36	; 0x24
    1c36:	8d a1       	ldd	r24, Y+37	; 0x25
    1c38:	9e a1       	ldd	r25, Y+38	; 0x26
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <LCD_vSendCmd+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9a a3       	std	Y+34, r25	; 0x22
    1c70:	89 a3       	std	Y+33, r24	; 0x21
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <LCD_vSendCmd+0x1ca>
    1c74:	88 ec       	ldi	r24, 0xC8	; 200
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	98 a3       	std	Y+32, r25	; 0x20
    1c7a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c7e:	98 a1       	ldd	r25, Y+32	; 0x20
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_vSendCmd+0x1b8>
    1c84:	98 a3       	std	Y+32, r25	; 0x20
    1c86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	9a a3       	std	Y+34, r25	; 0x22
    1c90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	89 a1       	ldd	r24, Y+33	; 0x21
    1c94:	9a a1       	ldd	r25, Y+34	; 0x22
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <LCD_vSendCmd+0x1ac>
    1c9a:	14 c0       	rjmp	.+40     	; 0x1cc4 <LCD_vSendCmd+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1ca0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	9a a3       	std	Y+34, r25	; 0x22
    1cae:	89 a3       	std	Y+33, r24	; 0x21
    1cb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb4:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb6:	8d 8f       	std	Y+29, r24	; 0x1d
    1cb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_vSendCmd+0x1f4>
    1cc0:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	SET_State_ALL(LCD_DATA_PORT, Copy_u8Command);
    1cc4:	84 e0       	ldi	r24, 0x04	; 4
    1cc6:	69 ad       	ldd	r22, Y+57	; 0x39
    1cc8:	0e 94 83 0a 	call	0x1506	; 0x1506 <SET_State_ALL>
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	a8 e4       	ldi	r26, 0x48	; 72
    1cd2:	b2 e4       	ldi	r27, 0x42	; 66
    1cd4:	89 8f       	std	Y+25, r24	; 0x19
    1cd6:	9a 8f       	std	Y+26, r25	; 0x1a
    1cd8:	ab 8f       	std	Y+27, r26	; 0x1b
    1cda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cdc:	69 8d       	ldd	r22, Y+25	; 0x19
    1cde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	4a ef       	ldi	r20, 0xFA	; 250
    1cea:	54 e4       	ldi	r21, 0x44	; 68
    1cec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	8d 8b       	std	Y+21, r24	; 0x15
    1cf6:	9e 8b       	std	Y+22, r25	; 0x16
    1cf8:	af 8b       	std	Y+23, r26	; 0x17
    1cfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1d00:	8f 89       	ldd	r24, Y+23	; 0x17
    1d02:	98 8d       	ldd	r25, Y+24	; 0x18
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e8       	ldi	r20, 0x80	; 128
    1d0a:	5f e3       	ldi	r21, 0x3F	; 63
    1d0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d10:	88 23       	and	r24, r24
    1d12:	2c f4       	brge	.+10     	; 0x1d1e <LCD_vSendCmd+0x256>
		__ticks = 1;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	9c 8b       	std	Y+20, r25	; 0x14
    1d1a:	8b 8b       	std	Y+19, r24	; 0x13
    1d1c:	3f c0       	rjmp	.+126    	; 0x1d9c <LCD_vSendCmd+0x2d4>
	else if (__tmp > 65535)
    1d1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d20:	7e 89       	ldd	r23, Y+22	; 0x16
    1d22:	8f 89       	ldd	r24, Y+23	; 0x17
    1d24:	98 8d       	ldd	r25, Y+24	; 0x18
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	3f ef       	ldi	r19, 0xFF	; 255
    1d2a:	4f e7       	ldi	r20, 0x7F	; 127
    1d2c:	57 e4       	ldi	r21, 0x47	; 71
    1d2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d32:	18 16       	cp	r1, r24
    1d34:	4c f5       	brge	.+82     	; 0x1d88 <LCD_vSendCmd+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d36:	69 8d       	ldd	r22, Y+25	; 0x19
    1d38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e2       	ldi	r20, 0x20	; 32
    1d44:	51 e4       	ldi	r21, 0x41	; 65
    1d46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	bc 01       	movw	r22, r24
    1d50:	cd 01       	movw	r24, r26
    1d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9c 8b       	std	Y+20, r25	; 0x14
    1d5c:	8b 8b       	std	Y+19, r24	; 0x13
    1d5e:	0f c0       	rjmp	.+30     	; 0x1d7e <LCD_vSendCmd+0x2b6>
    1d60:	88 ec       	ldi	r24, 0xC8	; 200
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	9a 8b       	std	Y+18, r25	; 0x12
    1d66:	89 8b       	std	Y+17, r24	; 0x11
    1d68:	89 89       	ldd	r24, Y+17	; 0x11
    1d6a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <LCD_vSendCmd+0x2a4>
    1d70:	9a 8b       	std	Y+18, r25	; 0x12
    1d72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d74:	8b 89       	ldd	r24, Y+19	; 0x13
    1d76:	9c 89       	ldd	r25, Y+20	; 0x14
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	9c 8b       	std	Y+20, r25	; 0x14
    1d7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d80:	9c 89       	ldd	r25, Y+20	; 0x14
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	69 f7       	brne	.-38     	; 0x1d60 <LCD_vSendCmd+0x298>
    1d86:	14 c0       	rjmp	.+40     	; 0x1db0 <LCD_vSendCmd+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d88:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	9c 8b       	std	Y+20, r25	; 0x14
    1d9a:	8b 8b       	std	Y+19, r24	; 0x13
    1d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1da0:	98 8b       	std	Y+16, r25	; 0x10
    1da2:	8f 87       	std	Y+15, r24	; 0x0f
    1da4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da6:	98 89       	ldd	r25, Y+16	; 0x10
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <LCD_vSendCmd+0x2e0>
    1dac:	98 8b       	std	Y+16, r25	; 0x10
    1dae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	SET_State(LCD_CTRL_PORT, PIN_EN, LOW);
    1db0:	83 e0       	ldi	r24, 0x03	; 3
    1db2:	62 e0       	ldi	r22, 0x02	; 2
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <SET_State>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a8 e4       	ldi	r26, 0x48	; 72
    1dc0:	b2 e4       	ldi	r27, 0x42	; 66
    1dc2:	8b 87       	std	Y+11, r24	; 0x0b
    1dc4:	9c 87       	std	Y+12, r25	; 0x0c
    1dc6:	ad 87       	std	Y+13, r26	; 0x0d
    1dc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4a ef       	ldi	r20, 0xFA	; 250
    1dd8:	54 e4       	ldi	r21, 0x44	; 68
    1dda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	8f 83       	std	Y+7, r24	; 0x07
    1de4:	98 87       	std	Y+8, r25	; 0x08
    1de6:	a9 87       	std	Y+9, r26	; 0x09
    1de8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <LCD_vSendCmd+0x344>
		__ticks = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
    1e0a:	3f c0       	rjmp	.+126    	; 0x1e8a <LCD_vSendCmd+0x3c2>
	else if (__tmp > 65535)
    1e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0e:	78 85       	ldd	r23, Y+8	; 0x08
    1e10:	89 85       	ldd	r24, Y+9	; 0x09
    1e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	3f ef       	ldi	r19, 0xFF	; 255
    1e18:	4f e7       	ldi	r20, 0x7F	; 127
    1e1a:	57 e4       	ldi	r21, 0x47	; 71
    1e1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e20:	18 16       	cp	r1, r24
    1e22:	4c f5       	brge	.+82     	; 0x1e76 <LCD_vSendCmd+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e2       	ldi	r20, 0x20	; 32
    1e32:	51 e4       	ldi	r21, 0x41	; 65
    1e34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	0f c0       	rjmp	.+30     	; 0x1e6c <LCD_vSendCmd+0x3a4>
    1e4e:	88 ec       	ldi	r24, 0xC8	; 200
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	8b 83       	std	Y+3, r24	; 0x03
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_vSendCmd+0x392>
    1e5e:	9c 83       	std	Y+4, r25	; 0x04
    1e60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	9e 83       	std	Y+6, r25	; 0x06
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	69 f7       	brne	.-38     	; 0x1e4e <LCD_vSendCmd+0x386>
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <LCD_vSendCmd+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	6f 81       	ldd	r22, Y+7	; 0x07
    1e78:	78 85       	ldd	r23, Y+8	; 0x08
    1e7a:	89 85       	ldd	r24, Y+9	; 0x09
    1e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	9a 81       	ldd	r25, Y+2	; 0x02
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_vSendCmd+0x3ce>
    1e9a:	9a 83       	std	Y+2, r25	; 0x02
    1e9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    1e9e:	e9 96       	adiw	r28, 0x39	; 57
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <LCD_vDisplayChar>:

void LCD_vDisplayChar(u8 Copy_u8Character)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	e9 97       	sbiw	r28, 0x39	; 57
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	89 af       	std	Y+57, r24	; 0x39
	SET_State(LCD_CTRL_PORT, PIN_RS, HIGH);
    1ec6:	83 e0       	ldi	r24, 0x03	; 3
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 9d 06 	call	0xd3a	; 0xd3a <SET_State>
	SET_State(LCD_CTRL_PORT, PIN_RW, LOW);
    1ed0:	83 e0       	ldi	r24, 0x03	; 3
    1ed2:	61 e0       	ldi	r22, 0x01	; 1
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <SET_State>
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a8 e4       	ldi	r26, 0x48	; 72
    1ee0:	b2 e4       	ldi	r27, 0x42	; 66
    1ee2:	8d ab       	std	Y+53, r24	; 0x35
    1ee4:	9e ab       	std	Y+54, r25	; 0x36
    1ee6:	af ab       	std	Y+55, r26	; 0x37
    1ee8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eea:	6d a9       	ldd	r22, Y+53	; 0x35
    1eec:	7e a9       	ldd	r23, Y+54	; 0x36
    1eee:	8f a9       	ldd	r24, Y+55	; 0x37
    1ef0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	4a ef       	ldi	r20, 0xFA	; 250
    1ef8:	54 e4       	ldi	r21, 0x44	; 68
    1efa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	89 ab       	std	Y+49, r24	; 0x31
    1f04:	9a ab       	std	Y+50, r25	; 0x32
    1f06:	ab ab       	std	Y+51, r26	; 0x33
    1f08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f10:	9c a9       	ldd	r25, Y+52	; 0x34
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e8       	ldi	r20, 0x80	; 128
    1f18:	5f e3       	ldi	r21, 0x3F	; 63
    1f1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f1e:	88 23       	and	r24, r24
    1f20:	2c f4       	brge	.+10     	; 0x1f2c <LCD_vDisplayChar+0x7c>
		__ticks = 1;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	98 ab       	std	Y+48, r25	; 0x30
    1f28:	8f a7       	std	Y+47, r24	; 0x2f
    1f2a:	3f c0       	rjmp	.+126    	; 0x1faa <LCD_vDisplayChar+0xfa>
	else if (__tmp > 65535)
    1f2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f30:	8b a9       	ldd	r24, Y+51	; 0x33
    1f32:	9c a9       	ldd	r25, Y+52	; 0x34
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	3f ef       	ldi	r19, 0xFF	; 255
    1f38:	4f e7       	ldi	r20, 0x7F	; 127
    1f3a:	57 e4       	ldi	r21, 0x47	; 71
    1f3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f40:	18 16       	cp	r1, r24
    1f42:	4c f5       	brge	.+82     	; 0x1f96 <LCD_vDisplayChar+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f44:	6d a9       	ldd	r22, Y+53	; 0x35
    1f46:	7e a9       	ldd	r23, Y+54	; 0x36
    1f48:	8f a9       	ldd	r24, Y+55	; 0x37
    1f4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e2       	ldi	r20, 0x20	; 32
    1f52:	51 e4       	ldi	r21, 0x41	; 65
    1f54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	98 ab       	std	Y+48, r25	; 0x30
    1f6a:	8f a7       	std	Y+47, r24	; 0x2f
    1f6c:	0f c0       	rjmp	.+30     	; 0x1f8c <LCD_vDisplayChar+0xdc>
    1f6e:	88 ec       	ldi	r24, 0xC8	; 200
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9e a7       	std	Y+46, r25	; 0x2e
    1f74:	8d a7       	std	Y+45, r24	; 0x2d
    1f76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <LCD_vDisplayChar+0xca>
    1f7e:	9e a7       	std	Y+46, r25	; 0x2e
    1f80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f84:	98 a9       	ldd	r25, Y+48	; 0x30
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	98 ab       	std	Y+48, r25	; 0x30
    1f8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	69 f7       	brne	.-38     	; 0x1f6e <LCD_vDisplayChar+0xbe>
    1f94:	14 c0       	rjmp	.+40     	; 0x1fbe <LCD_vDisplayChar+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f96:	69 a9       	ldd	r22, Y+49	; 0x31
    1f98:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	98 ab       	std	Y+48, r25	; 0x30
    1fa8:	8f a7       	std	Y+47, r24	; 0x2f
    1faa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fac:	98 a9       	ldd	r25, Y+48	; 0x30
    1fae:	9c a7       	std	Y+44, r25	; 0x2c
    1fb0:	8b a7       	std	Y+43, r24	; 0x2b
    1fb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <LCD_vDisplayChar+0x106>
    1fba:	9c a7       	std	Y+44, r25	; 0x2c
    1fbc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	SET_State(LCD_CTRL_PORT, PIN_EN, HIGH);
    1fbe:	83 e0       	ldi	r24, 0x03	; 3
    1fc0:	62 e0       	ldi	r22, 0x02	; 2
    1fc2:	41 e0       	ldi	r20, 0x01	; 1
    1fc4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <SET_State>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	a8 e4       	ldi	r26, 0x48	; 72
    1fce:	b2 e4       	ldi	r27, 0x42	; 66
    1fd0:	8f a3       	std	Y+39, r24	; 0x27
    1fd2:	98 a7       	std	Y+40, r25	; 0x28
    1fd4:	a9 a7       	std	Y+41, r26	; 0x29
    1fd6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd8:	6f a1       	ldd	r22, Y+39	; 0x27
    1fda:	78 a5       	ldd	r23, Y+40	; 0x28
    1fdc:	89 a5       	ldd	r24, Y+41	; 0x29
    1fde:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4a ef       	ldi	r20, 0xFA	; 250
    1fe6:	54 e4       	ldi	r21, 0x44	; 68
    1fe8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	8b a3       	std	Y+35, r24	; 0x23
    1ff2:	9c a3       	std	Y+36, r25	; 0x24
    1ff4:	ad a3       	std	Y+37, r26	; 0x25
    1ff6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ff8:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffa:	7c a1       	ldd	r23, Y+36	; 0x24
    1ffc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ffe:	9e a1       	ldd	r25, Y+38	; 0x26
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	2c f4       	brge	.+10     	; 0x201a <LCD_vDisplayChar+0x16a>
		__ticks = 1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9a a3       	std	Y+34, r25	; 0x22
    2016:	89 a3       	std	Y+33, r24	; 0x21
    2018:	3f c0       	rjmp	.+126    	; 0x2098 <LCD_vDisplayChar+0x1e8>
	else if (__tmp > 65535)
    201a:	6b a1       	ldd	r22, Y+35	; 0x23
    201c:	7c a1       	ldd	r23, Y+36	; 0x24
    201e:	8d a1       	ldd	r24, Y+37	; 0x25
    2020:	9e a1       	ldd	r25, Y+38	; 0x26
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	3f ef       	ldi	r19, 0xFF	; 255
    2026:	4f e7       	ldi	r20, 0x7F	; 127
    2028:	57 e4       	ldi	r21, 0x47	; 71
    202a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    202e:	18 16       	cp	r1, r24
    2030:	4c f5       	brge	.+82     	; 0x2084 <LCD_vDisplayChar+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2032:	6f a1       	ldd	r22, Y+39	; 0x27
    2034:	78 a5       	ldd	r23, Y+40	; 0x28
    2036:	89 a5       	ldd	r24, Y+41	; 0x29
    2038:	9a a5       	ldd	r25, Y+42	; 0x2a
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e2       	ldi	r20, 0x20	; 32
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	9a a3       	std	Y+34, r25	; 0x22
    2058:	89 a3       	std	Y+33, r24	; 0x21
    205a:	0f c0       	rjmp	.+30     	; 0x207a <LCD_vDisplayChar+0x1ca>
    205c:	88 ec       	ldi	r24, 0xC8	; 200
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	98 a3       	std	Y+32, r25	; 0x20
    2062:	8f 8f       	std	Y+31, r24	; 0x1f
    2064:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2066:	98 a1       	ldd	r25, Y+32	; 0x20
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <LCD_vDisplayChar+0x1b8>
    206c:	98 a3       	std	Y+32, r25	; 0x20
    206e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2070:	89 a1       	ldd	r24, Y+33	; 0x21
    2072:	9a a1       	ldd	r25, Y+34	; 0x22
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	9a a3       	std	Y+34, r25	; 0x22
    2078:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207a:	89 a1       	ldd	r24, Y+33	; 0x21
    207c:	9a a1       	ldd	r25, Y+34	; 0x22
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	69 f7       	brne	.-38     	; 0x205c <LCD_vDisplayChar+0x1ac>
    2082:	14 c0       	rjmp	.+40     	; 0x20ac <LCD_vDisplayChar+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2084:	6b a1       	ldd	r22, Y+35	; 0x23
    2086:	7c a1       	ldd	r23, Y+36	; 0x24
    2088:	8d a1       	ldd	r24, Y+37	; 0x25
    208a:	9e a1       	ldd	r25, Y+38	; 0x26
    208c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9a a3       	std	Y+34, r25	; 0x22
    2096:	89 a3       	std	Y+33, r24	; 0x21
    2098:	89 a1       	ldd	r24, Y+33	; 0x21
    209a:	9a a1       	ldd	r25, Y+34	; 0x22
    209c:	9e 8f       	std	Y+30, r25	; 0x1e
    209e:	8d 8f       	std	Y+29, r24	; 0x1d
    20a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <LCD_vDisplayChar+0x1f4>
    20a8:	9e 8f       	std	Y+30, r25	; 0x1e
    20aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	SET_State_ALL(LCD_DATA_PORT, Copy_u8Character);
    20ac:	84 e0       	ldi	r24, 0x04	; 4
    20ae:	69 ad       	ldd	r22, Y+57	; 0x39
    20b0:	0e 94 83 0a 	call	0x1506	; 0x1506 <SET_State_ALL>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	a8 e4       	ldi	r26, 0x48	; 72
    20ba:	b2 e4       	ldi	r27, 0x42	; 66
    20bc:	89 8f       	std	Y+25, r24	; 0x19
    20be:	9a 8f       	std	Y+26, r25	; 0x1a
    20c0:	ab 8f       	std	Y+27, r26	; 0x1b
    20c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c4:	69 8d       	ldd	r22, Y+25	; 0x19
    20c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4a ef       	ldi	r20, 0xFA	; 250
    20d2:	54 e4       	ldi	r21, 0x44	; 68
    20d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8d 8b       	std	Y+21, r24	; 0x15
    20de:	9e 8b       	std	Y+22, r25	; 0x16
    20e0:	af 8b       	std	Y+23, r26	; 0x17
    20e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20e4:	6d 89       	ldd	r22, Y+21	; 0x15
    20e6:	7e 89       	ldd	r23, Y+22	; 0x16
    20e8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ea:	98 8d       	ldd	r25, Y+24	; 0x18
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e8       	ldi	r20, 0x80	; 128
    20f2:	5f e3       	ldi	r21, 0x3F	; 63
    20f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20f8:	88 23       	and	r24, r24
    20fa:	2c f4       	brge	.+10     	; 0x2106 <LCD_vDisplayChar+0x256>
		__ticks = 1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9c 8b       	std	Y+20, r25	; 0x14
    2102:	8b 8b       	std	Y+19, r24	; 0x13
    2104:	3f c0       	rjmp	.+126    	; 0x2184 <LCD_vDisplayChar+0x2d4>
	else if (__tmp > 65535)
    2106:	6d 89       	ldd	r22, Y+21	; 0x15
    2108:	7e 89       	ldd	r23, Y+22	; 0x16
    210a:	8f 89       	ldd	r24, Y+23	; 0x17
    210c:	98 8d       	ldd	r25, Y+24	; 0x18
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	3f ef       	ldi	r19, 0xFF	; 255
    2112:	4f e7       	ldi	r20, 0x7F	; 127
    2114:	57 e4       	ldi	r21, 0x47	; 71
    2116:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    211a:	18 16       	cp	r1, r24
    211c:	4c f5       	brge	.+82     	; 0x2170 <LCD_vDisplayChar+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211e:	69 8d       	ldd	r22, Y+25	; 0x19
    2120:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2122:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2124:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e2       	ldi	r20, 0x20	; 32
    212c:	51 e4       	ldi	r21, 0x41	; 65
    212e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	bc 01       	movw	r22, r24
    2138:	cd 01       	movw	r24, r26
    213a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9c 8b       	std	Y+20, r25	; 0x14
    2144:	8b 8b       	std	Y+19, r24	; 0x13
    2146:	0f c0       	rjmp	.+30     	; 0x2166 <LCD_vDisplayChar+0x2b6>
    2148:	88 ec       	ldi	r24, 0xC8	; 200
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	9a 8b       	std	Y+18, r25	; 0x12
    214e:	89 8b       	std	Y+17, r24	; 0x11
    2150:	89 89       	ldd	r24, Y+17	; 0x11
    2152:	9a 89       	ldd	r25, Y+18	; 0x12
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <LCD_vDisplayChar+0x2a4>
    2158:	9a 8b       	std	Y+18, r25	; 0x12
    215a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215c:	8b 89       	ldd	r24, Y+19	; 0x13
    215e:	9c 89       	ldd	r25, Y+20	; 0x14
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	9c 8b       	std	Y+20, r25	; 0x14
    2164:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	69 f7       	brne	.-38     	; 0x2148 <LCD_vDisplayChar+0x298>
    216e:	14 c0       	rjmp	.+40     	; 0x2198 <LCD_vDisplayChar+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2170:	6d 89       	ldd	r22, Y+21	; 0x15
    2172:	7e 89       	ldd	r23, Y+22	; 0x16
    2174:	8f 89       	ldd	r24, Y+23	; 0x17
    2176:	98 8d       	ldd	r25, Y+24	; 0x18
    2178:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9c 8b       	std	Y+20, r25	; 0x14
    2182:	8b 8b       	std	Y+19, r24	; 0x13
    2184:	8b 89       	ldd	r24, Y+19	; 0x13
    2186:	9c 89       	ldd	r25, Y+20	; 0x14
    2188:	98 8b       	std	Y+16, r25	; 0x10
    218a:	8f 87       	std	Y+15, r24	; 0x0f
    218c:	8f 85       	ldd	r24, Y+15	; 0x0f
    218e:	98 89       	ldd	r25, Y+16	; 0x10
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <LCD_vDisplayChar+0x2e0>
    2194:	98 8b       	std	Y+16, r25	; 0x10
    2196:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	SET_State(LCD_CTRL_PORT, PIN_EN, LOW);
    2198:	83 e0       	ldi	r24, 0x03	; 3
    219a:	62 e0       	ldi	r22, 0x02	; 2
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <SET_State>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a8 e4       	ldi	r26, 0x48	; 72
    21a8:	b2 e4       	ldi	r27, 0x42	; 66
    21aa:	8b 87       	std	Y+11, r24	; 0x0b
    21ac:	9c 87       	std	Y+12, r25	; 0x0c
    21ae:	ad 87       	std	Y+13, r26	; 0x0d
    21b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	54 e4       	ldi	r21, 0x44	; 68
    21c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	8f 83       	std	Y+7, r24	; 0x07
    21cc:	98 87       	std	Y+8, r25	; 0x08
    21ce:	a9 87       	std	Y+9, r26	; 0x09
    21d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d2:	6f 81       	ldd	r22, Y+7	; 0x07
    21d4:	78 85       	ldd	r23, Y+8	; 0x08
    21d6:	89 85       	ldd	r24, Y+9	; 0x09
    21d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <LCD_vDisplayChar+0x344>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <LCD_vDisplayChar+0x3c2>
	else if (__tmp > 65535)
    21f4:	6f 81       	ldd	r22, Y+7	; 0x07
    21f6:	78 85       	ldd	r23, Y+8	; 0x08
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <LCD_vDisplayChar+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	6b 85       	ldd	r22, Y+11	; 0x0b
    220e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2210:	8d 85       	ldd	r24, Y+13	; 0x0d
    2212:	9e 85       	ldd	r25, Y+14	; 0x0e
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9e 83       	std	Y+6, r25	; 0x06
    2232:	8d 83       	std	Y+5, r24	; 0x05
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <LCD_vDisplayChar+0x3a4>
    2236:	88 ec       	ldi	r24, 0xC8	; 200
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9c 83       	std	Y+4, r25	; 0x04
    223c:	8b 83       	std	Y+3, r24	; 0x03
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCD_vDisplayChar+0x392>
    2246:	9c 83       	std	Y+4, r25	; 0x04
    2248:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <LCD_vDisplayChar+0x386>
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <LCD_vDisplayChar+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	6f 81       	ldd	r22, Y+7	; 0x07
    2260:	78 85       	ldd	r23, Y+8	; 0x08
    2262:	89 85       	ldd	r24, Y+9	; 0x09
    2264:	9a 85       	ldd	r25, Y+10	; 0x0a
    2266:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	8d 81       	ldd	r24, Y+5	; 0x05
    2274:	9e 81       	ldd	r25, Y+6	; 0x06
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_vDisplayChar+0x3ce>
    2282:	9a 83       	std	Y+2, r25	; 0x02
    2284:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    2286:	e9 96       	adiw	r28, 0x39	; 57
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <main>:


#include "../HAL/LCD/LCD_Interface.h"

void main(void)
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
	LCD_vInit();
    22a0:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_vInit>
	LCD_vDisplayChar('O');
    22a4:	8f e4       	ldi	r24, 0x4F	; 79
    22a6:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_vDisplayChar>
	LCD_vDisplayChar('M');
    22aa:	8d e4       	ldi	r24, 0x4D	; 77
    22ac:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_vDisplayChar>
	LCD_vDisplayChar('A');
    22b0:	81 e4       	ldi	r24, 0x41	; 65
    22b2:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_vDisplayChar>
	LCD_vDisplayChar('R');
    22b6:	82 e5       	ldi	r24, 0x52	; 82
    22b8:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_vDisplayChar>
    22bc:	ff cf       	rjmp	.-2      	; 0x22bc <main+0x24>

000022be <__prologue_saves__>:
    22be:	2f 92       	push	r2
    22c0:	3f 92       	push	r3
    22c2:	4f 92       	push	r4
    22c4:	5f 92       	push	r5
    22c6:	6f 92       	push	r6
    22c8:	7f 92       	push	r7
    22ca:	8f 92       	push	r8
    22cc:	9f 92       	push	r9
    22ce:	af 92       	push	r10
    22d0:	bf 92       	push	r11
    22d2:	cf 92       	push	r12
    22d4:	df 92       	push	r13
    22d6:	ef 92       	push	r14
    22d8:	ff 92       	push	r15
    22da:	0f 93       	push	r16
    22dc:	1f 93       	push	r17
    22de:	cf 93       	push	r28
    22e0:	df 93       	push	r29
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	ca 1b       	sub	r28, r26
    22e8:	db 0b       	sbc	r29, r27
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	09 94       	ijmp

000022f6 <__epilogue_restores__>:
    22f6:	2a 88       	ldd	r2, Y+18	; 0x12
    22f8:	39 88       	ldd	r3, Y+17	; 0x11
    22fa:	48 88       	ldd	r4, Y+16	; 0x10
    22fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    22fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2300:	7d 84       	ldd	r7, Y+13	; 0x0d
    2302:	8c 84       	ldd	r8, Y+12	; 0x0c
    2304:	9b 84       	ldd	r9, Y+11	; 0x0b
    2306:	aa 84       	ldd	r10, Y+10	; 0x0a
    2308:	b9 84       	ldd	r11, Y+9	; 0x09
    230a:	c8 84       	ldd	r12, Y+8	; 0x08
    230c:	df 80       	ldd	r13, Y+7	; 0x07
    230e:	ee 80       	ldd	r14, Y+6	; 0x06
    2310:	fd 80       	ldd	r15, Y+5	; 0x05
    2312:	0c 81       	ldd	r16, Y+4	; 0x04
    2314:	1b 81       	ldd	r17, Y+3	; 0x03
    2316:	aa 81       	ldd	r26, Y+2	; 0x02
    2318:	b9 81       	ldd	r27, Y+1	; 0x01
    231a:	ce 0f       	add	r28, r30
    231c:	d1 1d       	adc	r29, r1
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	ed 01       	movw	r28, r26
    232a:	08 95       	ret

0000232c <_exit>:
    232c:	f8 94       	cli

0000232e <__stop_program>:
    232e:	ff cf       	rjmp	.-2      	; 0x232e <__stop_program>
