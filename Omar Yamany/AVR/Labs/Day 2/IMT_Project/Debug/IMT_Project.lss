
IMT_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a4a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000007bc  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000400  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 1e 05 	call	0xa3c	; 0xa3c <main>
  64:	0c 94 23 05 	jmp	0xa46	; 0xa46 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SET_Direction>:
 */

#include "DIO_Private.h"

void SET_Direction(u8 Copy_PORT, u8 Copy_PIN, u8 Direction)//set a specific pin as input or output
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	27 97       	sbiw	r28, 0x07	; 7
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	6a 83       	std	Y+2, r22	; 0x02
  84:	4b 83       	std	Y+3, r20	; 0x03
	if(Direction == OUTPUT)
  86:	8b 81       	ldd	r24, Y+3	; 0x03
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	09 f0       	breq	.+2      	; 0x8e <SET_Direction+0x22>
  8c:	70 c0       	rjmp	.+224    	; 0x16e <SET_Direction+0x102>
	{
		switch(Copy_PORT)
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	28 2f       	mov	r18, r24
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	3f 83       	std	Y+7, r19	; 0x07
  96:	2e 83       	std	Y+6, r18	; 0x06
  98:	8e 81       	ldd	r24, Y+6	; 0x06
  9a:	9f 81       	ldd	r25, Y+7	; 0x07
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	91 05       	cpc	r25, r1
  a0:	51 f1       	breq	.+84     	; 0xf6 <SET_Direction+0x8a>
  a2:	2e 81       	ldd	r18, Y+6	; 0x06
  a4:	3f 81       	ldd	r19, Y+7	; 0x07
  a6:	23 30       	cpi	r18, 0x03	; 3
  a8:	31 05       	cpc	r19, r1
  aa:	34 f4       	brge	.+12     	; 0xb8 <SET_Direction+0x4c>
  ac:	8e 81       	ldd	r24, Y+6	; 0x06
  ae:	9f 81       	ldd	r25, Y+7	; 0x07
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	91 05       	cpc	r25, r1
  b4:	61 f0       	breq	.+24     	; 0xce <SET_Direction+0x62>
  b6:	d3 c0       	rjmp	.+422    	; 0x25e <SET_Direction+0x1f2>
  b8:	2e 81       	ldd	r18, Y+6	; 0x06
  ba:	3f 81       	ldd	r19, Y+7	; 0x07
  bc:	23 30       	cpi	r18, 0x03	; 3
  be:	31 05       	cpc	r19, r1
  c0:	71 f1       	breq	.+92     	; 0x11e <SET_Direction+0xb2>
  c2:	8e 81       	ldd	r24, Y+6	; 0x06
  c4:	9f 81       	ldd	r25, Y+7	; 0x07
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	91 05       	cpc	r25, r1
  ca:	e9 f1       	breq	.+122    	; 0x146 <SET_Direction+0xda>
  cc:	c8 c0       	rjmp	.+400    	; 0x25e <SET_Direction+0x1f2>
		{
		case PORTA:
			SET_BIT(DDRA_REG, Copy_PIN);
  ce:	aa e3       	ldi	r26, 0x3A	; 58
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	ea e3       	ldi	r30, 0x3A	; 58
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	48 2f       	mov	r20, r24
  da:	8a 81       	ldd	r24, Y+2	; 0x02
  dc:	28 2f       	mov	r18, r24
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 2e       	mov	r0, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <SET_Direction+0x80>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <SET_Direction+0x7c>
  f0:	84 2b       	or	r24, r20
  f2:	8c 93       	st	X, r24
  f4:	b4 c0       	rjmp	.+360    	; 0x25e <SET_Direction+0x1f2>
			break;
		case PORTB:
			SET_BIT(DDRB_REG, Copy_PIN);
  f6:	a7 e3       	ldi	r26, 0x37	; 55
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e7 e3       	ldi	r30, 0x37	; 55
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	48 2f       	mov	r20, r24
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	28 2f       	mov	r18, r24
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 2e       	mov	r0, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <SET_Direction+0xa8>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <SET_Direction+0xa4>
 118:	84 2b       	or	r24, r20
 11a:	8c 93       	st	X, r24
 11c:	a0 c0       	rjmp	.+320    	; 0x25e <SET_Direction+0x1f2>
			break;
		case PORTC:
			SET_BIT(DDRC_REG, Copy_PIN);
 11e:	a4 e3       	ldi	r26, 0x34	; 52
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e4 e3       	ldi	r30, 0x34	; 52
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	48 2f       	mov	r20, r24
 12a:	8a 81       	ldd	r24, Y+2	; 0x02
 12c:	28 2f       	mov	r18, r24
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 2e       	mov	r0, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <SET_Direction+0xd0>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <SET_Direction+0xcc>
 140:	84 2b       	or	r24, r20
 142:	8c 93       	st	X, r24
 144:	8c c0       	rjmp	.+280    	; 0x25e <SET_Direction+0x1f2>
			break;
		case PORTD:
			SET_BIT(DDRD_REG, Copy_PIN);
 146:	a1 e3       	ldi	r26, 0x31	; 49
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	e1 e3       	ldi	r30, 0x31	; 49
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	48 2f       	mov	r20, r24
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	28 2f       	mov	r18, r24
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 2e       	mov	r0, r18
 15e:	02 c0       	rjmp	.+4      	; 0x164 <SET_Direction+0xf8>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	0a 94       	dec	r0
 166:	e2 f7       	brpl	.-8      	; 0x160 <SET_Direction+0xf4>
 168:	84 2b       	or	r24, r20
 16a:	8c 93       	st	X, r24
 16c:	78 c0       	rjmp	.+240    	; 0x25e <SET_Direction+0x1f2>
			break;
		}
	}
	else if(Direction == INPUT)
 16e:	8b 81       	ldd	r24, Y+3	; 0x03
 170:	88 23       	and	r24, r24
 172:	09 f0       	breq	.+2      	; 0x176 <SET_Direction+0x10a>
 174:	74 c0       	rjmp	.+232    	; 0x25e <SET_Direction+0x1f2>
	{
		switch(Copy_PORT)
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	3d 83       	std	Y+5, r19	; 0x05
 17e:	2c 83       	std	Y+4, r18	; 0x04
 180:	8c 81       	ldd	r24, Y+4	; 0x04
 182:	9d 81       	ldd	r25, Y+5	; 0x05
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	91 05       	cpc	r25, r1
 188:	61 f1       	breq	.+88     	; 0x1e2 <SET_Direction+0x176>
 18a:	2c 81       	ldd	r18, Y+4	; 0x04
 18c:	3d 81       	ldd	r19, Y+5	; 0x05
 18e:	23 30       	cpi	r18, 0x03	; 3
 190:	31 05       	cpc	r19, r1
 192:	34 f4       	brge	.+12     	; 0x1a0 <SET_Direction+0x134>
 194:	8c 81       	ldd	r24, Y+4	; 0x04
 196:	9d 81       	ldd	r25, Y+5	; 0x05
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	91 05       	cpc	r25, r1
 19c:	69 f0       	breq	.+26     	; 0x1b8 <SET_Direction+0x14c>
 19e:	5f c0       	rjmp	.+190    	; 0x25e <SET_Direction+0x1f2>
 1a0:	2c 81       	ldd	r18, Y+4	; 0x04
 1a2:	3d 81       	ldd	r19, Y+5	; 0x05
 1a4:	23 30       	cpi	r18, 0x03	; 3
 1a6:	31 05       	cpc	r19, r1
 1a8:	89 f1       	breq	.+98     	; 0x20c <SET_Direction+0x1a0>
 1aa:	8c 81       	ldd	r24, Y+4	; 0x04
 1ac:	9d 81       	ldd	r25, Y+5	; 0x05
 1ae:	84 30       	cpi	r24, 0x04	; 4
 1b0:	91 05       	cpc	r25, r1
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <SET_Direction+0x14a>
 1b4:	40 c0       	rjmp	.+128    	; 0x236 <SET_Direction+0x1ca>
 1b6:	53 c0       	rjmp	.+166    	; 0x25e <SET_Direction+0x1f2>
		{
		case PORTA:
			CLR_BIT(DDRA_REG, Copy_PIN);
 1b8:	aa e3       	ldi	r26, 0x3A	; 58
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	ea e3       	ldi	r30, 0x3A	; 58
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	48 2f       	mov	r20, r24
 1c4:	8a 81       	ldd	r24, Y+2	; 0x02
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 2e       	mov	r0, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <SET_Direction+0x16a>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <SET_Direction+0x166>
 1da:	80 95       	com	r24
 1dc:	84 23       	and	r24, r20
 1de:	8c 93       	st	X, r24
 1e0:	3e c0       	rjmp	.+124    	; 0x25e <SET_Direction+0x1f2>
			break;
		case PORTB:
			CLR_BIT(DDRB_REG, Copy_PIN);
 1e2:	a7 e3       	ldi	r26, 0x37	; 55
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e7 e3       	ldi	r30, 0x37	; 55
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	48 2f       	mov	r20, r24
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 2e       	mov	r0, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <SET_Direction+0x194>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <SET_Direction+0x190>
 204:	80 95       	com	r24
 206:	84 23       	and	r24, r20
 208:	8c 93       	st	X, r24
 20a:	29 c0       	rjmp	.+82     	; 0x25e <SET_Direction+0x1f2>
			break;
		case PORTC:
			CLR_BIT(DDRC_REG, Copy_PIN);
 20c:	a4 e3       	ldi	r26, 0x34	; 52
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	e4 e3       	ldi	r30, 0x34	; 52
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	48 2f       	mov	r20, r24
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 2e       	mov	r0, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <SET_Direction+0x1be>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <SET_Direction+0x1ba>
 22e:	80 95       	com	r24
 230:	84 23       	and	r24, r20
 232:	8c 93       	st	X, r24
 234:	14 c0       	rjmp	.+40     	; 0x25e <SET_Direction+0x1f2>
			break;
		case PORTD:
			CLR_BIT(DDRD_REG, Copy_PIN);
 236:	a1 e3       	ldi	r26, 0x31	; 49
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e1 e3       	ldi	r30, 0x31	; 49
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	48 2f       	mov	r20, r24
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	28 2f       	mov	r18, r24
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 2e       	mov	r0, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <SET_Direction+0x1e8>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <SET_Direction+0x1e4>
 258:	80 95       	com	r24
 25a:	84 23       	and	r24, r20
 25c:	8c 93       	st	X, r24
			break;
		}
	}
}
 25e:	27 96       	adiw	r28, 0x07	; 7
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	08 95       	ret

00000270 <SET_State>:

void SET_State(u8 Copy_PORT, u8 Copy_PIN, u8 State)//set a specific output pin as high or low
{
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	27 97       	sbiw	r28, 0x07	; 7
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	6a 83       	std	Y+2, r22	; 0x02
 288:	4b 83       	std	Y+3, r20	; 0x03
	if(State == HIGH)
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	09 f0       	breq	.+2      	; 0x292 <SET_State+0x22>
 290:	70 c0       	rjmp	.+224    	; 0x372 <SET_State+0x102>
	{
		switch(Copy_PORT)
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	3f 83       	std	Y+7, r19	; 0x07
 29a:	2e 83       	std	Y+6, r18	; 0x06
 29c:	8e 81       	ldd	r24, Y+6	; 0x06
 29e:	9f 81       	ldd	r25, Y+7	; 0x07
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	91 05       	cpc	r25, r1
 2a4:	51 f1       	breq	.+84     	; 0x2fa <SET_State+0x8a>
 2a6:	2e 81       	ldd	r18, Y+6	; 0x06
 2a8:	3f 81       	ldd	r19, Y+7	; 0x07
 2aa:	23 30       	cpi	r18, 0x03	; 3
 2ac:	31 05       	cpc	r19, r1
 2ae:	34 f4       	brge	.+12     	; 0x2bc <SET_State+0x4c>
 2b0:	8e 81       	ldd	r24, Y+6	; 0x06
 2b2:	9f 81       	ldd	r25, Y+7	; 0x07
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	91 05       	cpc	r25, r1
 2b8:	61 f0       	breq	.+24     	; 0x2d2 <SET_State+0x62>
 2ba:	d3 c0       	rjmp	.+422    	; 0x462 <SET_State+0x1f2>
 2bc:	2e 81       	ldd	r18, Y+6	; 0x06
 2be:	3f 81       	ldd	r19, Y+7	; 0x07
 2c0:	23 30       	cpi	r18, 0x03	; 3
 2c2:	31 05       	cpc	r19, r1
 2c4:	71 f1       	breq	.+92     	; 0x322 <SET_State+0xb2>
 2c6:	8e 81       	ldd	r24, Y+6	; 0x06
 2c8:	9f 81       	ldd	r25, Y+7	; 0x07
 2ca:	84 30       	cpi	r24, 0x04	; 4
 2cc:	91 05       	cpc	r25, r1
 2ce:	e9 f1       	breq	.+122    	; 0x34a <SET_State+0xda>
 2d0:	c8 c0       	rjmp	.+400    	; 0x462 <SET_State+0x1f2>
		{
		case PORTA:
			SET_BIT(PORTA_REG, Copy_PIN);
 2d2:	ab e3       	ldi	r26, 0x3B	; 59
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	eb e3       	ldi	r30, 0x3B	; 59
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	48 2f       	mov	r20, r24
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 2e       	mov	r0, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <SET_State+0x80>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <SET_State+0x7c>
 2f4:	84 2b       	or	r24, r20
 2f6:	8c 93       	st	X, r24
 2f8:	b4 c0       	rjmp	.+360    	; 0x462 <SET_State+0x1f2>
			break;
		case PORTB:
			SET_BIT(PORTB_REG, Copy_PIN);
 2fa:	a8 e3       	ldi	r26, 0x38	; 56
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	e8 e3       	ldi	r30, 0x38	; 56
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	48 2f       	mov	r20, r24
 306:	8a 81       	ldd	r24, Y+2	; 0x02
 308:	28 2f       	mov	r18, r24
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 2e       	mov	r0, r18
 312:	02 c0       	rjmp	.+4      	; 0x318 <SET_State+0xa8>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	0a 94       	dec	r0
 31a:	e2 f7       	brpl	.-8      	; 0x314 <SET_State+0xa4>
 31c:	84 2b       	or	r24, r20
 31e:	8c 93       	st	X, r24
 320:	a0 c0       	rjmp	.+320    	; 0x462 <SET_State+0x1f2>
			break;
		case PORTC:
			SET_BIT(PORTC_REG, Copy_PIN);
 322:	a5 e3       	ldi	r26, 0x35	; 53
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	e5 e3       	ldi	r30, 0x35	; 53
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	48 2f       	mov	r20, r24
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 2e       	mov	r0, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <SET_State+0xd0>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <SET_State+0xcc>
 344:	84 2b       	or	r24, r20
 346:	8c 93       	st	X, r24
 348:	8c c0       	rjmp	.+280    	; 0x462 <SET_State+0x1f2>
			break;
		case PORTD:
			SET_BIT(PORTD_REG, Copy_PIN);
 34a:	a2 e3       	ldi	r26, 0x32	; 50
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	e2 e3       	ldi	r30, 0x32	; 50
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	48 2f       	mov	r20, r24
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	28 2f       	mov	r18, r24
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 2e       	mov	r0, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <SET_State+0xf8>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <SET_State+0xf4>
 36c:	84 2b       	or	r24, r20
 36e:	8c 93       	st	X, r24
 370:	78 c0       	rjmp	.+240    	; 0x462 <SET_State+0x1f2>
			break;
		}
	}
	else if(State == LOW)
 372:	8b 81       	ldd	r24, Y+3	; 0x03
 374:	88 23       	and	r24, r24
 376:	09 f0       	breq	.+2      	; 0x37a <SET_State+0x10a>
 378:	74 c0       	rjmp	.+232    	; 0x462 <SET_State+0x1f2>
	{
		switch(Copy_PORT)
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	28 2f       	mov	r18, r24
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	3d 83       	std	Y+5, r19	; 0x05
 382:	2c 83       	std	Y+4, r18	; 0x04
 384:	8c 81       	ldd	r24, Y+4	; 0x04
 386:	9d 81       	ldd	r25, Y+5	; 0x05
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	91 05       	cpc	r25, r1
 38c:	61 f1       	breq	.+88     	; 0x3e6 <SET_State+0x176>
 38e:	2c 81       	ldd	r18, Y+4	; 0x04
 390:	3d 81       	ldd	r19, Y+5	; 0x05
 392:	23 30       	cpi	r18, 0x03	; 3
 394:	31 05       	cpc	r19, r1
 396:	34 f4       	brge	.+12     	; 0x3a4 <SET_State+0x134>
 398:	8c 81       	ldd	r24, Y+4	; 0x04
 39a:	9d 81       	ldd	r25, Y+5	; 0x05
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	91 05       	cpc	r25, r1
 3a0:	69 f0       	breq	.+26     	; 0x3bc <SET_State+0x14c>
 3a2:	5f c0       	rjmp	.+190    	; 0x462 <SET_State+0x1f2>
 3a4:	2c 81       	ldd	r18, Y+4	; 0x04
 3a6:	3d 81       	ldd	r19, Y+5	; 0x05
 3a8:	23 30       	cpi	r18, 0x03	; 3
 3aa:	31 05       	cpc	r19, r1
 3ac:	89 f1       	breq	.+98     	; 0x410 <SET_State+0x1a0>
 3ae:	8c 81       	ldd	r24, Y+4	; 0x04
 3b0:	9d 81       	ldd	r25, Y+5	; 0x05
 3b2:	84 30       	cpi	r24, 0x04	; 4
 3b4:	91 05       	cpc	r25, r1
 3b6:	09 f4       	brne	.+2      	; 0x3ba <SET_State+0x14a>
 3b8:	40 c0       	rjmp	.+128    	; 0x43a <SET_State+0x1ca>
 3ba:	53 c0       	rjmp	.+166    	; 0x462 <SET_State+0x1f2>
		{
		case PORTA:
			CLR_BIT(PORTA_REG, Copy_PIN);
 3bc:	ab e3       	ldi	r26, 0x3B	; 59
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	eb e3       	ldi	r30, 0x3B	; 59
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	48 2f       	mov	r20, r24
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	28 2f       	mov	r18, r24
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 2e       	mov	r0, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <SET_State+0x16a>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <SET_State+0x166>
 3de:	80 95       	com	r24
 3e0:	84 23       	and	r24, r20
 3e2:	8c 93       	st	X, r24
 3e4:	3e c0       	rjmp	.+124    	; 0x462 <SET_State+0x1f2>
			break;
		case PORTB:
			CLR_BIT(PORTB_REG, Copy_PIN);
 3e6:	a8 e3       	ldi	r26, 0x38	; 56
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	e8 e3       	ldi	r30, 0x38	; 56
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	48 2f       	mov	r20, r24
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	28 2f       	mov	r18, r24
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 2e       	mov	r0, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <SET_State+0x194>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <SET_State+0x190>
 408:	80 95       	com	r24
 40a:	84 23       	and	r24, r20
 40c:	8c 93       	st	X, r24
 40e:	29 c0       	rjmp	.+82     	; 0x462 <SET_State+0x1f2>
			break;
		case PORTC:
			CLR_BIT(PORTC_REG, Copy_PIN);
 410:	a5 e3       	ldi	r26, 0x35	; 53
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	e5 e3       	ldi	r30, 0x35	; 53
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	48 2f       	mov	r20, r24
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	28 2f       	mov	r18, r24
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 2e       	mov	r0, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <SET_State+0x1be>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <SET_State+0x1ba>
 432:	80 95       	com	r24
 434:	84 23       	and	r24, r20
 436:	8c 93       	st	X, r24
 438:	14 c0       	rjmp	.+40     	; 0x462 <SET_State+0x1f2>
			break;
		case PORTD:
			CLR_BIT(PORTD_REG, Copy_PIN);
 43a:	a2 e3       	ldi	r26, 0x32	; 50
 43c:	b0 e0       	ldi	r27, 0x00	; 0
 43e:	e2 e3       	ldi	r30, 0x32	; 50
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	48 2f       	mov	r20, r24
 446:	8a 81       	ldd	r24, Y+2	; 0x02
 448:	28 2f       	mov	r18, r24
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 2e       	mov	r0, r18
 452:	02 c0       	rjmp	.+4      	; 0x458 <SET_State+0x1e8>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	0a 94       	dec	r0
 45a:	e2 f7       	brpl	.-8      	; 0x454 <SET_State+0x1e4>
 45c:	80 95       	com	r24
 45e:	84 23       	and	r24, r20
 460:	8c 93       	st	X, r24
			break;
		}
	}
}
 462:	27 96       	adiw	r28, 0x07	; 7
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	de bf       	out	0x3e, r29	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	cd bf       	out	0x3d, r28	; 61
 46e:	cf 91       	pop	r28
 470:	df 91       	pop	r29
 472:	08 95       	ret

00000474 <GET_State>:

u8 GET_State(u8 Copy_PORT, u8 Copy_PIN)//read data from input pin
{
 474:	df 93       	push	r29
 476:	cf 93       	push	r28
 478:	00 d0       	rcall	.+0      	; 0x47a <GET_State+0x6>
 47a:	00 d0       	rcall	.+0      	; 0x47c <GET_State+0x8>
 47c:	00 d0       	rcall	.+0      	; 0x47e <GET_State+0xa>
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	89 83       	std	Y+1, r24	; 0x01
 484:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PORT)
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	28 2f       	mov	r18, r24
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	3d 83       	std	Y+5, r19	; 0x05
 48e:	2c 83       	std	Y+4, r18	; 0x04
 490:	4c 81       	ldd	r20, Y+4	; 0x04
 492:	5d 81       	ldd	r21, Y+5	; 0x05
 494:	42 30       	cpi	r20, 0x02	; 2
 496:	51 05       	cpc	r21, r1
 498:	49 f1       	breq	.+82     	; 0x4ec <GET_State+0x78>
 49a:	8c 81       	ldd	r24, Y+4	; 0x04
 49c:	9d 81       	ldd	r25, Y+5	; 0x05
 49e:	83 30       	cpi	r24, 0x03	; 3
 4a0:	91 05       	cpc	r25, r1
 4a2:	34 f4       	brge	.+12     	; 0x4b0 <GET_State+0x3c>
 4a4:	2c 81       	ldd	r18, Y+4	; 0x04
 4a6:	3d 81       	ldd	r19, Y+5	; 0x05
 4a8:	21 30       	cpi	r18, 0x01	; 1
 4aa:	31 05       	cpc	r19, r1
 4ac:	61 f0       	breq	.+24     	; 0x4c6 <GET_State+0x52>
 4ae:	57 c0       	rjmp	.+174    	; 0x55e <GET_State+0xea>
 4b0:	4c 81       	ldd	r20, Y+4	; 0x04
 4b2:	5d 81       	ldd	r21, Y+5	; 0x05
 4b4:	43 30       	cpi	r20, 0x03	; 3
 4b6:	51 05       	cpc	r21, r1
 4b8:	61 f1       	breq	.+88     	; 0x512 <GET_State+0x9e>
 4ba:	8c 81       	ldd	r24, Y+4	; 0x04
 4bc:	9d 81       	ldd	r25, Y+5	; 0x05
 4be:	84 30       	cpi	r24, 0x04	; 4
 4c0:	91 05       	cpc	r25, r1
 4c2:	d1 f1       	breq	.+116    	; 0x538 <GET_State+0xc4>
 4c4:	4c c0       	rjmp	.+152    	; 0x55e <GET_State+0xea>
	{
	case PORTA:
		return GET_BIT(PINA_REG, Copy_PIN);
 4c6:	e9 e3       	ldi	r30, 0x39	; 57
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	88 2f       	mov	r24, r24
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	a9 01       	movw	r20, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <GET_State+0x6a>
 4da:	55 95       	asr	r21
 4dc:	47 95       	ror	r20
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <GET_State+0x66>
 4e2:	ca 01       	movw	r24, r20
 4e4:	58 2f       	mov	r21, r24
 4e6:	51 70       	andi	r21, 0x01	; 1
 4e8:	5b 83       	std	Y+3, r21	; 0x03
 4ea:	3a c0       	rjmp	.+116    	; 0x560 <GET_State+0xec>
		break;
	case PORTB:
		return GET_BIT(PINB_REG, Copy_PIN);
 4ec:	e6 e3       	ldi	r30, 0x36	; 54
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	28 2f       	mov	r18, r24
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	88 2f       	mov	r24, r24
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	a9 01       	movw	r20, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <GET_State+0x90>
 500:	55 95       	asr	r21
 502:	47 95       	ror	r20
 504:	8a 95       	dec	r24
 506:	e2 f7       	brpl	.-8      	; 0x500 <GET_State+0x8c>
 508:	ca 01       	movw	r24, r20
 50a:	58 2f       	mov	r21, r24
 50c:	51 70       	andi	r21, 0x01	; 1
 50e:	5b 83       	std	Y+3, r21	; 0x03
 510:	27 c0       	rjmp	.+78     	; 0x560 <GET_State+0xec>
		break;
	case PORTC:
		return GET_BIT(PINC_REG, Copy_PIN);
 512:	e3 e3       	ldi	r30, 0x33	; 51
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	8a 81       	ldd	r24, Y+2	; 0x02
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	a9 01       	movw	r20, r18
 524:	02 c0       	rjmp	.+4      	; 0x52a <GET_State+0xb6>
 526:	55 95       	asr	r21
 528:	47 95       	ror	r20
 52a:	8a 95       	dec	r24
 52c:	e2 f7       	brpl	.-8      	; 0x526 <GET_State+0xb2>
 52e:	ca 01       	movw	r24, r20
 530:	58 2f       	mov	r21, r24
 532:	51 70       	andi	r21, 0x01	; 1
 534:	5b 83       	std	Y+3, r21	; 0x03
 536:	14 c0       	rjmp	.+40     	; 0x560 <GET_State+0xec>
		break;
	case PORTD:
		return GET_BIT(PIND_REG, Copy_PIN);
 538:	e0 e3       	ldi	r30, 0x30	; 48
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	28 2f       	mov	r18, r24
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	88 2f       	mov	r24, r24
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	a9 01       	movw	r20, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <GET_State+0xdc>
 54c:	55 95       	asr	r21
 54e:	47 95       	ror	r20
 550:	8a 95       	dec	r24
 552:	e2 f7       	brpl	.-8      	; 0x54c <GET_State+0xd8>
 554:	ca 01       	movw	r24, r20
 556:	58 2f       	mov	r21, r24
 558:	51 70       	andi	r21, 0x01	; 1
 55a:	5b 83       	std	Y+3, r21	; 0x03
 55c:	01 c0       	rjmp	.+2      	; 0x560 <GET_State+0xec>
 55e:	02 c0       	rjmp	.+4      	; 0x564 <GET_State+0xf0>
		break;
	}
}
 560:	8b 81       	ldd	r24, Y+3	; 0x03
 562:	8e 83       	std	Y+6, r24	; 0x06
 564:	8e 81       	ldd	r24, Y+6	; 0x06
 566:	26 96       	adiw	r28, 0x06	; 6
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	f8 94       	cli
 56c:	de bf       	out	0x3e, r29	; 62
 56e:	0f be       	out	0x3f, r0	; 63
 570:	cd bf       	out	0x3d, r28	; 61
 572:	cf 91       	pop	r28
 574:	df 91       	pop	r29
 576:	08 95       	ret

00000578 <SET_Direction_4LSB>:

void SET_Direction_4LSB(u8 Copy_PORT, u8 Direction)//set 4 LSB as input or output
{
 578:	df 93       	push	r29
 57a:	cf 93       	push	r28
 57c:	00 d0       	rcall	.+0      	; 0x57e <SET_Direction_4LSB+0x6>
 57e:	00 d0       	rcall	.+0      	; 0x580 <SET_Direction_4LSB+0x8>
 580:	00 d0       	rcall	.+0      	; 0x582 <SET_Direction_4LSB+0xa>
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
 586:	89 83       	std	Y+1, r24	; 0x01
 588:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction == OUTPUT)
 58a:	8a 81       	ldd	r24, Y+2	; 0x02
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	09 f0       	breq	.+2      	; 0x592 <SET_Direction_4LSB+0x1a>
 590:	3f c0       	rjmp	.+126    	; 0x610 <SET_Direction_4LSB+0x98>
	{
		switch(Copy_PORT)
 592:	89 81       	ldd	r24, Y+1	; 0x01
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	3e 83       	std	Y+6, r19	; 0x06
 59a:	2d 83       	std	Y+5, r18	; 0x05
 59c:	8d 81       	ldd	r24, Y+5	; 0x05
 59e:	9e 81       	ldd	r25, Y+6	; 0x06
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	91 05       	cpc	r25, r1
 5a4:	f1 f0       	breq	.+60     	; 0x5e2 <SET_Direction_4LSB+0x6a>
 5a6:	2d 81       	ldd	r18, Y+5	; 0x05
 5a8:	3e 81       	ldd	r19, Y+6	; 0x06
 5aa:	23 30       	cpi	r18, 0x03	; 3
 5ac:	31 05       	cpc	r19, r1
 5ae:	34 f4       	brge	.+12     	; 0x5bc <SET_Direction_4LSB+0x44>
 5b0:	8d 81       	ldd	r24, Y+5	; 0x05
 5b2:	9e 81       	ldd	r25, Y+6	; 0x06
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	91 05       	cpc	r25, r1
 5b8:	61 f0       	breq	.+24     	; 0x5d2 <SET_Direction_4LSB+0x5a>
 5ba:	2a c0       	rjmp	.+84     	; 0x610 <SET_Direction_4LSB+0x98>
 5bc:	2d 81       	ldd	r18, Y+5	; 0x05
 5be:	3e 81       	ldd	r19, Y+6	; 0x06
 5c0:	23 30       	cpi	r18, 0x03	; 3
 5c2:	31 05       	cpc	r19, r1
 5c4:	b1 f0       	breq	.+44     	; 0x5f2 <SET_Direction_4LSB+0x7a>
 5c6:	8d 81       	ldd	r24, Y+5	; 0x05
 5c8:	9e 81       	ldd	r25, Y+6	; 0x06
 5ca:	84 30       	cpi	r24, 0x04	; 4
 5cc:	91 05       	cpc	r25, r1
 5ce:	c9 f0       	breq	.+50     	; 0x602 <SET_Direction_4LSB+0x8a>
 5d0:	1f c0       	rjmp	.+62     	; 0x610 <SET_Direction_4LSB+0x98>
		{
		case PORTA:
			DDRA_REG |= 0x0F;
 5d2:	aa e3       	ldi	r26, 0x3A	; 58
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	ea e3       	ldi	r30, 0x3A	; 58
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	8f 60       	ori	r24, 0x0F	; 15
 5de:	8c 93       	st	X, r24
 5e0:	17 c0       	rjmp	.+46     	; 0x610 <SET_Direction_4LSB+0x98>
			break;
		case PORTB:
			DDRB_REG |= 0x0F;
 5e2:	a7 e3       	ldi	r26, 0x37	; 55
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	e7 e3       	ldi	r30, 0x37	; 55
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	8f 60       	ori	r24, 0x0F	; 15
 5ee:	8c 93       	st	X, r24
 5f0:	0f c0       	rjmp	.+30     	; 0x610 <SET_Direction_4LSB+0x98>
			break;
		case PORTC:
			DDRC_REG |= 0x0F;
 5f2:	a4 e3       	ldi	r26, 0x34	; 52
 5f4:	b0 e0       	ldi	r27, 0x00	; 0
 5f6:	e4 e3       	ldi	r30, 0x34	; 52
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	8f 60       	ori	r24, 0x0F	; 15
 5fe:	8c 93       	st	X, r24
 600:	07 c0       	rjmp	.+14     	; 0x610 <SET_Direction_4LSB+0x98>
			break;
		case PORTD:
			DDRD_REG |= 0x0F;
 602:	a1 e3       	ldi	r26, 0x31	; 49
 604:	b0 e0       	ldi	r27, 0x00	; 0
 606:	e1 e3       	ldi	r30, 0x31	; 49
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	8f 60       	ori	r24, 0x0F	; 15
 60e:	8c 93       	st	X, r24
			break;
		}
	}
	if(Direction == INPUT)
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	88 23       	and	r24, r24
 614:	09 f0       	breq	.+2      	; 0x618 <SET_Direction_4LSB+0xa0>
 616:	3f c0       	rjmp	.+126    	; 0x696 <SET_Direction_4LSB+0x11e>
	{
		switch(Copy_PORT)
 618:	89 81       	ldd	r24, Y+1	; 0x01
 61a:	28 2f       	mov	r18, r24
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	3c 83       	std	Y+4, r19	; 0x04
 620:	2b 83       	std	Y+3, r18	; 0x03
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	9c 81       	ldd	r25, Y+4	; 0x04
 626:	82 30       	cpi	r24, 0x02	; 2
 628:	91 05       	cpc	r25, r1
 62a:	f1 f0       	breq	.+60     	; 0x668 <SET_Direction_4LSB+0xf0>
 62c:	2b 81       	ldd	r18, Y+3	; 0x03
 62e:	3c 81       	ldd	r19, Y+4	; 0x04
 630:	23 30       	cpi	r18, 0x03	; 3
 632:	31 05       	cpc	r19, r1
 634:	34 f4       	brge	.+12     	; 0x642 <SET_Direction_4LSB+0xca>
 636:	8b 81       	ldd	r24, Y+3	; 0x03
 638:	9c 81       	ldd	r25, Y+4	; 0x04
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	91 05       	cpc	r25, r1
 63e:	61 f0       	breq	.+24     	; 0x658 <SET_Direction_4LSB+0xe0>
 640:	2a c0       	rjmp	.+84     	; 0x696 <SET_Direction_4LSB+0x11e>
 642:	2b 81       	ldd	r18, Y+3	; 0x03
 644:	3c 81       	ldd	r19, Y+4	; 0x04
 646:	23 30       	cpi	r18, 0x03	; 3
 648:	31 05       	cpc	r19, r1
 64a:	b1 f0       	breq	.+44     	; 0x678 <SET_Direction_4LSB+0x100>
 64c:	8b 81       	ldd	r24, Y+3	; 0x03
 64e:	9c 81       	ldd	r25, Y+4	; 0x04
 650:	84 30       	cpi	r24, 0x04	; 4
 652:	91 05       	cpc	r25, r1
 654:	c9 f0       	breq	.+50     	; 0x688 <SET_Direction_4LSB+0x110>
 656:	1f c0       	rjmp	.+62     	; 0x696 <SET_Direction_4LSB+0x11e>
		{
		case PORTA:
			DDRA_REG &= 0xF0;
 658:	aa e3       	ldi	r26, 0x3A	; 58
 65a:	b0 e0       	ldi	r27, 0x00	; 0
 65c:	ea e3       	ldi	r30, 0x3A	; 58
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	80 7f       	andi	r24, 0xF0	; 240
 664:	8c 93       	st	X, r24
 666:	17 c0       	rjmp	.+46     	; 0x696 <SET_Direction_4LSB+0x11e>
			break;
		case PORTB:
			DDRB_REG &= 0xF0;
 668:	a7 e3       	ldi	r26, 0x37	; 55
 66a:	b0 e0       	ldi	r27, 0x00	; 0
 66c:	e7 e3       	ldi	r30, 0x37	; 55
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	80 7f       	andi	r24, 0xF0	; 240
 674:	8c 93       	st	X, r24
 676:	0f c0       	rjmp	.+30     	; 0x696 <SET_Direction_4LSB+0x11e>
			break;
		case PORTC:
			DDRC_REG &= 0xF0;
 678:	a4 e3       	ldi	r26, 0x34	; 52
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	e4 e3       	ldi	r30, 0x34	; 52
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	80 7f       	andi	r24, 0xF0	; 240
 684:	8c 93       	st	X, r24
 686:	07 c0       	rjmp	.+14     	; 0x696 <SET_Direction_4LSB+0x11e>
			break;
		case PORTD:
			DDRD_REG &= 0xF0;
 688:	a1 e3       	ldi	r26, 0x31	; 49
 68a:	b0 e0       	ldi	r27, 0x00	; 0
 68c:	e1 e3       	ldi	r30, 0x31	; 49
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	80 7f       	andi	r24, 0xF0	; 240
 694:	8c 93       	st	X, r24
			break;
		}
	}
}
 696:	26 96       	adiw	r28, 0x06	; 6
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	f8 94       	cli
 69c:	de bf       	out	0x3e, r29	; 62
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	cd bf       	out	0x3d, r28	; 61
 6a2:	cf 91       	pop	r28
 6a4:	df 91       	pop	r29
 6a6:	08 95       	ret

000006a8 <SET_Direction_4MSB>:

void SET_Direction_4MSB(u8 Copy_PORT, u8 Direction)//set 4 MSB as input or output
{
 6a8:	df 93       	push	r29
 6aa:	cf 93       	push	r28
 6ac:	00 d0       	rcall	.+0      	; 0x6ae <SET_Direction_4MSB+0x6>
 6ae:	00 d0       	rcall	.+0      	; 0x6b0 <SET_Direction_4MSB+0x8>
 6b0:	00 d0       	rcall	.+0      	; 0x6b2 <SET_Direction_4MSB+0xa>
 6b2:	cd b7       	in	r28, 0x3d	; 61
 6b4:	de b7       	in	r29, 0x3e	; 62
 6b6:	89 83       	std	Y+1, r24	; 0x01
 6b8:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction == OUTPUT)
 6ba:	8a 81       	ldd	r24, Y+2	; 0x02
 6bc:	81 30       	cpi	r24, 0x01	; 1
 6be:	09 f0       	breq	.+2      	; 0x6c2 <SET_Direction_4MSB+0x1a>
 6c0:	3f c0       	rjmp	.+126    	; 0x740 <SET_Direction_4MSB+0x98>
	{
		switch(Copy_PORT)
 6c2:	89 81       	ldd	r24, Y+1	; 0x01
 6c4:	28 2f       	mov	r18, r24
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	3e 83       	std	Y+6, r19	; 0x06
 6ca:	2d 83       	std	Y+5, r18	; 0x05
 6cc:	8d 81       	ldd	r24, Y+5	; 0x05
 6ce:	9e 81       	ldd	r25, Y+6	; 0x06
 6d0:	82 30       	cpi	r24, 0x02	; 2
 6d2:	91 05       	cpc	r25, r1
 6d4:	f1 f0       	breq	.+60     	; 0x712 <SET_Direction_4MSB+0x6a>
 6d6:	2d 81       	ldd	r18, Y+5	; 0x05
 6d8:	3e 81       	ldd	r19, Y+6	; 0x06
 6da:	23 30       	cpi	r18, 0x03	; 3
 6dc:	31 05       	cpc	r19, r1
 6de:	34 f4       	brge	.+12     	; 0x6ec <SET_Direction_4MSB+0x44>
 6e0:	8d 81       	ldd	r24, Y+5	; 0x05
 6e2:	9e 81       	ldd	r25, Y+6	; 0x06
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	91 05       	cpc	r25, r1
 6e8:	61 f0       	breq	.+24     	; 0x702 <SET_Direction_4MSB+0x5a>
 6ea:	2a c0       	rjmp	.+84     	; 0x740 <SET_Direction_4MSB+0x98>
 6ec:	2d 81       	ldd	r18, Y+5	; 0x05
 6ee:	3e 81       	ldd	r19, Y+6	; 0x06
 6f0:	23 30       	cpi	r18, 0x03	; 3
 6f2:	31 05       	cpc	r19, r1
 6f4:	b1 f0       	breq	.+44     	; 0x722 <SET_Direction_4MSB+0x7a>
 6f6:	8d 81       	ldd	r24, Y+5	; 0x05
 6f8:	9e 81       	ldd	r25, Y+6	; 0x06
 6fa:	84 30       	cpi	r24, 0x04	; 4
 6fc:	91 05       	cpc	r25, r1
 6fe:	c9 f0       	breq	.+50     	; 0x732 <SET_Direction_4MSB+0x8a>
 700:	1f c0       	rjmp	.+62     	; 0x740 <SET_Direction_4MSB+0x98>
		{
		case PORTA:
			DDRA_REG |= 0xF0;
 702:	aa e3       	ldi	r26, 0x3A	; 58
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	ea e3       	ldi	r30, 0x3A	; 58
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	80 6f       	ori	r24, 0xF0	; 240
 70e:	8c 93       	st	X, r24
 710:	17 c0       	rjmp	.+46     	; 0x740 <SET_Direction_4MSB+0x98>
			break;
		case PORTB:
			DDRB_REG |= 0xF0;
 712:	a7 e3       	ldi	r26, 0x37	; 55
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	e7 e3       	ldi	r30, 0x37	; 55
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	80 6f       	ori	r24, 0xF0	; 240
 71e:	8c 93       	st	X, r24
 720:	0f c0       	rjmp	.+30     	; 0x740 <SET_Direction_4MSB+0x98>
			break;
		case PORTC:
			DDRC_REG |= 0xF0;
 722:	a4 e3       	ldi	r26, 0x34	; 52
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	e4 e3       	ldi	r30, 0x34	; 52
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	80 6f       	ori	r24, 0xF0	; 240
 72e:	8c 93       	st	X, r24
 730:	07 c0       	rjmp	.+14     	; 0x740 <SET_Direction_4MSB+0x98>
			break;
		case PORTD:
			DDRD_REG |= 0xF0;
 732:	a1 e3       	ldi	r26, 0x31	; 49
 734:	b0 e0       	ldi	r27, 0x00	; 0
 736:	e1 e3       	ldi	r30, 0x31	; 49
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	80 6f       	ori	r24, 0xF0	; 240
 73e:	8c 93       	st	X, r24
			break;
		}
	}
	if(Direction == INPUT)
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	88 23       	and	r24, r24
 744:	09 f0       	breq	.+2      	; 0x748 <SET_Direction_4MSB+0xa0>
 746:	3f c0       	rjmp	.+126    	; 0x7c6 <SET_Direction_4MSB+0x11e>
	{
		switch(Copy_PORT)
 748:	89 81       	ldd	r24, Y+1	; 0x01
 74a:	28 2f       	mov	r18, r24
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	3c 83       	std	Y+4, r19	; 0x04
 750:	2b 83       	std	Y+3, r18	; 0x03
 752:	8b 81       	ldd	r24, Y+3	; 0x03
 754:	9c 81       	ldd	r25, Y+4	; 0x04
 756:	82 30       	cpi	r24, 0x02	; 2
 758:	91 05       	cpc	r25, r1
 75a:	f1 f0       	breq	.+60     	; 0x798 <SET_Direction_4MSB+0xf0>
 75c:	2b 81       	ldd	r18, Y+3	; 0x03
 75e:	3c 81       	ldd	r19, Y+4	; 0x04
 760:	23 30       	cpi	r18, 0x03	; 3
 762:	31 05       	cpc	r19, r1
 764:	34 f4       	brge	.+12     	; 0x772 <SET_Direction_4MSB+0xca>
 766:	8b 81       	ldd	r24, Y+3	; 0x03
 768:	9c 81       	ldd	r25, Y+4	; 0x04
 76a:	81 30       	cpi	r24, 0x01	; 1
 76c:	91 05       	cpc	r25, r1
 76e:	61 f0       	breq	.+24     	; 0x788 <SET_Direction_4MSB+0xe0>
 770:	2a c0       	rjmp	.+84     	; 0x7c6 <SET_Direction_4MSB+0x11e>
 772:	2b 81       	ldd	r18, Y+3	; 0x03
 774:	3c 81       	ldd	r19, Y+4	; 0x04
 776:	23 30       	cpi	r18, 0x03	; 3
 778:	31 05       	cpc	r19, r1
 77a:	b1 f0       	breq	.+44     	; 0x7a8 <SET_Direction_4MSB+0x100>
 77c:	8b 81       	ldd	r24, Y+3	; 0x03
 77e:	9c 81       	ldd	r25, Y+4	; 0x04
 780:	84 30       	cpi	r24, 0x04	; 4
 782:	91 05       	cpc	r25, r1
 784:	c9 f0       	breq	.+50     	; 0x7b8 <SET_Direction_4MSB+0x110>
 786:	1f c0       	rjmp	.+62     	; 0x7c6 <SET_Direction_4MSB+0x11e>
		{
		case PORTA:
			DDRA_REG &= 0x0F;
 788:	aa e3       	ldi	r26, 0x3A	; 58
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	ea e3       	ldi	r30, 0x3A	; 58
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	8f 70       	andi	r24, 0x0F	; 15
 794:	8c 93       	st	X, r24
 796:	17 c0       	rjmp	.+46     	; 0x7c6 <SET_Direction_4MSB+0x11e>
			break;
		case PORTB:
			DDRB_REG &= 0x0F;
 798:	a7 e3       	ldi	r26, 0x37	; 55
 79a:	b0 e0       	ldi	r27, 0x00	; 0
 79c:	e7 e3       	ldi	r30, 0x37	; 55
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
 7a2:	8f 70       	andi	r24, 0x0F	; 15
 7a4:	8c 93       	st	X, r24
 7a6:	0f c0       	rjmp	.+30     	; 0x7c6 <SET_Direction_4MSB+0x11e>
			break;
		case PORTC:
			DDRC_REG &= 0x0F;
 7a8:	a4 e3       	ldi	r26, 0x34	; 52
 7aa:	b0 e0       	ldi	r27, 0x00	; 0
 7ac:	e4 e3       	ldi	r30, 0x34	; 52
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	80 81       	ld	r24, Z
 7b2:	8f 70       	andi	r24, 0x0F	; 15
 7b4:	8c 93       	st	X, r24
 7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <SET_Direction_4MSB+0x11e>
			break;
		case PORTD:
			DDRD_REG &= 0x0F;
 7b8:	a1 e3       	ldi	r26, 0x31	; 49
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	e1 e3       	ldi	r30, 0x31	; 49
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	8f 70       	andi	r24, 0x0F	; 15
 7c4:	8c 93       	st	X, r24
			break;
		}
	}
}
 7c6:	26 96       	adiw	r28, 0x06	; 6
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	f8 94       	cli
 7cc:	de bf       	out	0x3e, r29	; 62
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	cd bf       	out	0x3d, r28	; 61
 7d2:	cf 91       	pop	r28
 7d4:	df 91       	pop	r29
 7d6:	08 95       	ret

000007d8 <SET_State_4LSB>:

void SET_State_4LSB(u8 Copy_PORT, u8 State)//set 4LSB output pins as high or low
{
 7d8:	df 93       	push	r29
 7da:	cf 93       	push	r28
 7dc:	00 d0       	rcall	.+0      	; 0x7de <SET_State_4LSB+0x6>
 7de:	00 d0       	rcall	.+0      	; 0x7e0 <SET_State_4LSB+0x8>
 7e0:	00 d0       	rcall	.+0      	; 0x7e2 <SET_State_4LSB+0xa>
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
 7e6:	89 83       	std	Y+1, r24	; 0x01
 7e8:	6a 83       	std	Y+2, r22	; 0x02
	if(State == HIGH)
 7ea:	8a 81       	ldd	r24, Y+2	; 0x02
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	09 f0       	breq	.+2      	; 0x7f2 <SET_State_4LSB+0x1a>
 7f0:	40 c0       	rjmp	.+128    	; 0x872 <__stack+0x13>
	{
		switch(Copy_PORT)
 7f2:	89 81       	ldd	r24, Y+1	; 0x01
 7f4:	28 2f       	mov	r18, r24
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	3e 83       	std	Y+6, r19	; 0x06
 7fa:	2d 83       	std	Y+5, r18	; 0x05
 7fc:	8d 81       	ldd	r24, Y+5	; 0x05
 7fe:	9e 81       	ldd	r25, Y+6	; 0x06
 800:	82 30       	cpi	r24, 0x02	; 2
 802:	91 05       	cpc	r25, r1
 804:	f1 f0       	breq	.+60     	; 0x842 <SET_State_4LSB+0x6a>
 806:	2d 81       	ldd	r18, Y+5	; 0x05
 808:	3e 81       	ldd	r19, Y+6	; 0x06
 80a:	23 30       	cpi	r18, 0x03	; 3
 80c:	31 05       	cpc	r19, r1
 80e:	34 f4       	brge	.+12     	; 0x81c <SET_State_4LSB+0x44>
 810:	8d 81       	ldd	r24, Y+5	; 0x05
 812:	9e 81       	ldd	r25, Y+6	; 0x06
 814:	81 30       	cpi	r24, 0x01	; 1
 816:	91 05       	cpc	r25, r1
 818:	61 f0       	breq	.+24     	; 0x832 <SET_State_4LSB+0x5a>
 81a:	6e c0       	rjmp	.+220    	; 0x8f8 <__stack+0x99>
 81c:	2d 81       	ldd	r18, Y+5	; 0x05
 81e:	3e 81       	ldd	r19, Y+6	; 0x06
 820:	23 30       	cpi	r18, 0x03	; 3
 822:	31 05       	cpc	r19, r1
 824:	b1 f0       	breq	.+44     	; 0x852 <SET_State_4LSB+0x7a>
 826:	8d 81       	ldd	r24, Y+5	; 0x05
 828:	9e 81       	ldd	r25, Y+6	; 0x06
 82a:	84 30       	cpi	r24, 0x04	; 4
 82c:	91 05       	cpc	r25, r1
 82e:	c9 f0       	breq	.+50     	; 0x862 <__stack+0x3>
 830:	63 c0       	rjmp	.+198    	; 0x8f8 <__stack+0x99>
		{
		case PORTA:
			PORTA_REG |= 0x0F;
 832:	ab e3       	ldi	r26, 0x3B	; 59
 834:	b0 e0       	ldi	r27, 0x00	; 0
 836:	eb e3       	ldi	r30, 0x3B	; 59
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	80 81       	ld	r24, Z
 83c:	8f 60       	ori	r24, 0x0F	; 15
 83e:	8c 93       	st	X, r24
 840:	5b c0       	rjmp	.+182    	; 0x8f8 <__stack+0x99>
			break;
		case PORTB:
			PORTB_REG |= 0x0F;
 842:	a8 e3       	ldi	r26, 0x38	; 56
 844:	b0 e0       	ldi	r27, 0x00	; 0
 846:	e8 e3       	ldi	r30, 0x38	; 56
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 81       	ld	r24, Z
 84c:	8f 60       	ori	r24, 0x0F	; 15
 84e:	8c 93       	st	X, r24
 850:	53 c0       	rjmp	.+166    	; 0x8f8 <__stack+0x99>
			break;
		case PORTC:
			PORTC_REG |= 0x0F;
 852:	a5 e3       	ldi	r26, 0x35	; 53
 854:	b0 e0       	ldi	r27, 0x00	; 0
 856:	e5 e3       	ldi	r30, 0x35	; 53
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	80 81       	ld	r24, Z
 85c:	8f 60       	ori	r24, 0x0F	; 15
 85e:	8c 93       	st	X, r24
 860:	4b c0       	rjmp	.+150    	; 0x8f8 <__stack+0x99>
			break;
		case PORTD:
			PORTD_REG |= 0x0F;
 862:	a2 e3       	ldi	r26, 0x32	; 50
 864:	b0 e0       	ldi	r27, 0x00	; 0
 866:	e2 e3       	ldi	r30, 0x32	; 50
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	80 81       	ld	r24, Z
 86c:	8f 60       	ori	r24, 0x0F	; 15
 86e:	8c 93       	st	X, r24
 870:	43 c0       	rjmp	.+134    	; 0x8f8 <__stack+0x99>
			break;
		}
	}
	else if(State == LOW)
 872:	8a 81       	ldd	r24, Y+2	; 0x02
 874:	88 23       	and	r24, r24
 876:	09 f0       	breq	.+2      	; 0x87a <__stack+0x1b>
 878:	3f c0       	rjmp	.+126    	; 0x8f8 <__stack+0x99>
	{
		switch(Copy_PORT)
 87a:	89 81       	ldd	r24, Y+1	; 0x01
 87c:	28 2f       	mov	r18, r24
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	3c 83       	std	Y+4, r19	; 0x04
 882:	2b 83       	std	Y+3, r18	; 0x03
 884:	8b 81       	ldd	r24, Y+3	; 0x03
 886:	9c 81       	ldd	r25, Y+4	; 0x04
 888:	82 30       	cpi	r24, 0x02	; 2
 88a:	91 05       	cpc	r25, r1
 88c:	f1 f0       	breq	.+60     	; 0x8ca <__stack+0x6b>
 88e:	2b 81       	ldd	r18, Y+3	; 0x03
 890:	3c 81       	ldd	r19, Y+4	; 0x04
 892:	23 30       	cpi	r18, 0x03	; 3
 894:	31 05       	cpc	r19, r1
 896:	34 f4       	brge	.+12     	; 0x8a4 <__stack+0x45>
 898:	8b 81       	ldd	r24, Y+3	; 0x03
 89a:	9c 81       	ldd	r25, Y+4	; 0x04
 89c:	81 30       	cpi	r24, 0x01	; 1
 89e:	91 05       	cpc	r25, r1
 8a0:	61 f0       	breq	.+24     	; 0x8ba <__stack+0x5b>
 8a2:	2a c0       	rjmp	.+84     	; 0x8f8 <__stack+0x99>
 8a4:	2b 81       	ldd	r18, Y+3	; 0x03
 8a6:	3c 81       	ldd	r19, Y+4	; 0x04
 8a8:	23 30       	cpi	r18, 0x03	; 3
 8aa:	31 05       	cpc	r19, r1
 8ac:	b1 f0       	breq	.+44     	; 0x8da <__stack+0x7b>
 8ae:	8b 81       	ldd	r24, Y+3	; 0x03
 8b0:	9c 81       	ldd	r25, Y+4	; 0x04
 8b2:	84 30       	cpi	r24, 0x04	; 4
 8b4:	91 05       	cpc	r25, r1
 8b6:	c9 f0       	breq	.+50     	; 0x8ea <__stack+0x8b>
 8b8:	1f c0       	rjmp	.+62     	; 0x8f8 <__stack+0x99>
		{
		case PORTA:
			PORTA_REG &= 0xF0;
 8ba:	ab e3       	ldi	r26, 0x3B	; 59
 8bc:	b0 e0       	ldi	r27, 0x00	; 0
 8be:	eb e3       	ldi	r30, 0x3B	; 59
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	80 81       	ld	r24, Z
 8c4:	80 7f       	andi	r24, 0xF0	; 240
 8c6:	8c 93       	st	X, r24
 8c8:	17 c0       	rjmp	.+46     	; 0x8f8 <__stack+0x99>
			break;
		case PORTB:
			PORTB_REG &= 0xF0;
 8ca:	a8 e3       	ldi	r26, 0x38	; 56
 8cc:	b0 e0       	ldi	r27, 0x00	; 0
 8ce:	e8 e3       	ldi	r30, 0x38	; 56
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
 8d4:	80 7f       	andi	r24, 0xF0	; 240
 8d6:	8c 93       	st	X, r24
 8d8:	0f c0       	rjmp	.+30     	; 0x8f8 <__stack+0x99>
			break;
		case PORTC:
			PORTC_REG &= 0xF0;
 8da:	a5 e3       	ldi	r26, 0x35	; 53
 8dc:	b0 e0       	ldi	r27, 0x00	; 0
 8de:	e5 e3       	ldi	r30, 0x35	; 53
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	80 7f       	andi	r24, 0xF0	; 240
 8e6:	8c 93       	st	X, r24
 8e8:	07 c0       	rjmp	.+14     	; 0x8f8 <__stack+0x99>
			break;
		case PORTD:
			PORTD_REG &= 0xF0;
 8ea:	a2 e3       	ldi	r26, 0x32	; 50
 8ec:	b0 e0       	ldi	r27, 0x00	; 0
 8ee:	e2 e3       	ldi	r30, 0x32	; 50
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 81       	ld	r24, Z
 8f4:	80 7f       	andi	r24, 0xF0	; 240
 8f6:	8c 93       	st	X, r24
			break;
		}
	}
}
 8f8:	26 96       	adiw	r28, 0x06	; 6
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	f8 94       	cli
 8fe:	de bf       	out	0x3e, r29	; 62
 900:	0f be       	out	0x3f, r0	; 63
 902:	cd bf       	out	0x3d, r28	; 61
 904:	cf 91       	pop	r28
 906:	df 91       	pop	r29
 908:	08 95       	ret

0000090a <SET_State_4MSB>:

void SET_State_4MSB(u8 Copy_PORT, u8 State)//set 4MSB output pins as high or low
{
 90a:	df 93       	push	r29
 90c:	cf 93       	push	r28
 90e:	00 d0       	rcall	.+0      	; 0x910 <SET_State_4MSB+0x6>
 910:	00 d0       	rcall	.+0      	; 0x912 <SET_State_4MSB+0x8>
 912:	00 d0       	rcall	.+0      	; 0x914 <SET_State_4MSB+0xa>
 914:	cd b7       	in	r28, 0x3d	; 61
 916:	de b7       	in	r29, 0x3e	; 62
 918:	89 83       	std	Y+1, r24	; 0x01
 91a:	6a 83       	std	Y+2, r22	; 0x02
	if(State == HIGH)
 91c:	8a 81       	ldd	r24, Y+2	; 0x02
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	09 f0       	breq	.+2      	; 0x924 <SET_State_4MSB+0x1a>
 922:	40 c0       	rjmp	.+128    	; 0x9a4 <SET_State_4MSB+0x9a>
	{
		switch(Copy_PORT)
 924:	89 81       	ldd	r24, Y+1	; 0x01
 926:	28 2f       	mov	r18, r24
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	3e 83       	std	Y+6, r19	; 0x06
 92c:	2d 83       	std	Y+5, r18	; 0x05
 92e:	8d 81       	ldd	r24, Y+5	; 0x05
 930:	9e 81       	ldd	r25, Y+6	; 0x06
 932:	82 30       	cpi	r24, 0x02	; 2
 934:	91 05       	cpc	r25, r1
 936:	f1 f0       	breq	.+60     	; 0x974 <SET_State_4MSB+0x6a>
 938:	2d 81       	ldd	r18, Y+5	; 0x05
 93a:	3e 81       	ldd	r19, Y+6	; 0x06
 93c:	23 30       	cpi	r18, 0x03	; 3
 93e:	31 05       	cpc	r19, r1
 940:	34 f4       	brge	.+12     	; 0x94e <SET_State_4MSB+0x44>
 942:	8d 81       	ldd	r24, Y+5	; 0x05
 944:	9e 81       	ldd	r25, Y+6	; 0x06
 946:	81 30       	cpi	r24, 0x01	; 1
 948:	91 05       	cpc	r25, r1
 94a:	61 f0       	breq	.+24     	; 0x964 <SET_State_4MSB+0x5a>
 94c:	6e c0       	rjmp	.+220    	; 0xa2a <SET_State_4MSB+0x120>
 94e:	2d 81       	ldd	r18, Y+5	; 0x05
 950:	3e 81       	ldd	r19, Y+6	; 0x06
 952:	23 30       	cpi	r18, 0x03	; 3
 954:	31 05       	cpc	r19, r1
 956:	b1 f0       	breq	.+44     	; 0x984 <SET_State_4MSB+0x7a>
 958:	8d 81       	ldd	r24, Y+5	; 0x05
 95a:	9e 81       	ldd	r25, Y+6	; 0x06
 95c:	84 30       	cpi	r24, 0x04	; 4
 95e:	91 05       	cpc	r25, r1
 960:	c9 f0       	breq	.+50     	; 0x994 <SET_State_4MSB+0x8a>
 962:	63 c0       	rjmp	.+198    	; 0xa2a <SET_State_4MSB+0x120>
		{
		case PORTA:
			PORTA_REG |= 0xF0;
 964:	ab e3       	ldi	r26, 0x3B	; 59
 966:	b0 e0       	ldi	r27, 0x00	; 0
 968:	eb e3       	ldi	r30, 0x3B	; 59
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	80 6f       	ori	r24, 0xF0	; 240
 970:	8c 93       	st	X, r24
 972:	5b c0       	rjmp	.+182    	; 0xa2a <SET_State_4MSB+0x120>
			break;
		case PORTB:
			PORTB_REG |= 0xF0;
 974:	a8 e3       	ldi	r26, 0x38	; 56
 976:	b0 e0       	ldi	r27, 0x00	; 0
 978:	e8 e3       	ldi	r30, 0x38	; 56
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	80 81       	ld	r24, Z
 97e:	80 6f       	ori	r24, 0xF0	; 240
 980:	8c 93       	st	X, r24
 982:	53 c0       	rjmp	.+166    	; 0xa2a <SET_State_4MSB+0x120>
			break;
		case PORTC:
			PORTC_REG |= 0xF0;
 984:	a5 e3       	ldi	r26, 0x35	; 53
 986:	b0 e0       	ldi	r27, 0x00	; 0
 988:	e5 e3       	ldi	r30, 0x35	; 53
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	80 81       	ld	r24, Z
 98e:	80 6f       	ori	r24, 0xF0	; 240
 990:	8c 93       	st	X, r24
 992:	4b c0       	rjmp	.+150    	; 0xa2a <SET_State_4MSB+0x120>
			break;
		case PORTD:
			PORTD_REG |= 0xF0;
 994:	a2 e3       	ldi	r26, 0x32	; 50
 996:	b0 e0       	ldi	r27, 0x00	; 0
 998:	e2 e3       	ldi	r30, 0x32	; 50
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	80 6f       	ori	r24, 0xF0	; 240
 9a0:	8c 93       	st	X, r24
 9a2:	43 c0       	rjmp	.+134    	; 0xa2a <SET_State_4MSB+0x120>
			break;
		}
	}
	else if(State == LOW)
 9a4:	8a 81       	ldd	r24, Y+2	; 0x02
 9a6:	88 23       	and	r24, r24
 9a8:	09 f0       	breq	.+2      	; 0x9ac <SET_State_4MSB+0xa2>
 9aa:	3f c0       	rjmp	.+126    	; 0xa2a <SET_State_4MSB+0x120>
	{
		switch(Copy_PORT)
 9ac:	89 81       	ldd	r24, Y+1	; 0x01
 9ae:	28 2f       	mov	r18, r24
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	3c 83       	std	Y+4, r19	; 0x04
 9b4:	2b 83       	std	Y+3, r18	; 0x03
 9b6:	8b 81       	ldd	r24, Y+3	; 0x03
 9b8:	9c 81       	ldd	r25, Y+4	; 0x04
 9ba:	82 30       	cpi	r24, 0x02	; 2
 9bc:	91 05       	cpc	r25, r1
 9be:	f1 f0       	breq	.+60     	; 0x9fc <SET_State_4MSB+0xf2>
 9c0:	2b 81       	ldd	r18, Y+3	; 0x03
 9c2:	3c 81       	ldd	r19, Y+4	; 0x04
 9c4:	23 30       	cpi	r18, 0x03	; 3
 9c6:	31 05       	cpc	r19, r1
 9c8:	34 f4       	brge	.+12     	; 0x9d6 <SET_State_4MSB+0xcc>
 9ca:	8b 81       	ldd	r24, Y+3	; 0x03
 9cc:	9c 81       	ldd	r25, Y+4	; 0x04
 9ce:	81 30       	cpi	r24, 0x01	; 1
 9d0:	91 05       	cpc	r25, r1
 9d2:	61 f0       	breq	.+24     	; 0x9ec <SET_State_4MSB+0xe2>
 9d4:	2a c0       	rjmp	.+84     	; 0xa2a <SET_State_4MSB+0x120>
 9d6:	2b 81       	ldd	r18, Y+3	; 0x03
 9d8:	3c 81       	ldd	r19, Y+4	; 0x04
 9da:	23 30       	cpi	r18, 0x03	; 3
 9dc:	31 05       	cpc	r19, r1
 9de:	b1 f0       	breq	.+44     	; 0xa0c <SET_State_4MSB+0x102>
 9e0:	8b 81       	ldd	r24, Y+3	; 0x03
 9e2:	9c 81       	ldd	r25, Y+4	; 0x04
 9e4:	84 30       	cpi	r24, 0x04	; 4
 9e6:	91 05       	cpc	r25, r1
 9e8:	c9 f0       	breq	.+50     	; 0xa1c <SET_State_4MSB+0x112>
 9ea:	1f c0       	rjmp	.+62     	; 0xa2a <SET_State_4MSB+0x120>
		{
		case PORTA:
			PORTA_REG &= 0x0F;
 9ec:	ab e3       	ldi	r26, 0x3B	; 59
 9ee:	b0 e0       	ldi	r27, 0x00	; 0
 9f0:	eb e3       	ldi	r30, 0x3B	; 59
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	80 81       	ld	r24, Z
 9f6:	8f 70       	andi	r24, 0x0F	; 15
 9f8:	8c 93       	st	X, r24
 9fa:	17 c0       	rjmp	.+46     	; 0xa2a <SET_State_4MSB+0x120>
			break;
		case PORTB:
			PORTB_REG &= 0x0F;
 9fc:	a8 e3       	ldi	r26, 0x38	; 56
 9fe:	b0 e0       	ldi	r27, 0x00	; 0
 a00:	e8 e3       	ldi	r30, 0x38	; 56
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	80 81       	ld	r24, Z
 a06:	8f 70       	andi	r24, 0x0F	; 15
 a08:	8c 93       	st	X, r24
 a0a:	0f c0       	rjmp	.+30     	; 0xa2a <SET_State_4MSB+0x120>
			break;
		case PORTC:
			PORTC_REG &= 0x0F;
 a0c:	a5 e3       	ldi	r26, 0x35	; 53
 a0e:	b0 e0       	ldi	r27, 0x00	; 0
 a10:	e5 e3       	ldi	r30, 0x35	; 53
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	80 81       	ld	r24, Z
 a16:	8f 70       	andi	r24, 0x0F	; 15
 a18:	8c 93       	st	X, r24
 a1a:	07 c0       	rjmp	.+14     	; 0xa2a <SET_State_4MSB+0x120>
			break;
		case PORTD:
			PORTD_REG &= 0x0F;
 a1c:	a2 e3       	ldi	r26, 0x32	; 50
 a1e:	b0 e0       	ldi	r27, 0x00	; 0
 a20:	e2 e3       	ldi	r30, 0x32	; 50
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 81       	ld	r24, Z
 a26:	8f 70       	andi	r24, 0x0F	; 15
 a28:	8c 93       	st	X, r24
			break;
		}
	}
}
 a2a:	26 96       	adiw	r28, 0x06	; 6
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	f8 94       	cli
 a30:	de bf       	out	0x3e, r29	; 62
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	cd bf       	out	0x3d, r28	; 61
 a36:	cf 91       	pop	r28
 a38:	df 91       	pop	r29
 a3a:	08 95       	ret

00000a3c <main>:
 *      Author: omarm
 */


void main(void)
{
 a3c:	df 93       	push	r29
 a3e:	cf 93       	push	r28
 a40:	cd b7       	in	r28, 0x3d	; 61
 a42:	de b7       	in	r29, 0x3e	; 62
 a44:	ff cf       	rjmp	.-2      	; 0xa44 <main+0x8>

00000a46 <_exit>:
 a46:	f8 94       	cli

00000a48 <__stop_program>:
 a48:	ff cf       	rjmp	.-2      	; 0xa48 <__stop_program>
