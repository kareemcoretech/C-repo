
AVR_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00004788  0000481c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800080  00800080  0000483c  2**0
                  ALLOC
  3 .stab         000040e0  00000000  00000000  0000483c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001750  00000000  00000000  0000891c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a31c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bf65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ce50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000dc00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000dd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dfed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e7bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <main>
      8a:	0c 94 c2 23 	jmp	0x4784	; 0x4784 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8b 23 	jmp	0x4716	; 0x4716 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a7 23 	jmp	0x474e	; 0x474e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 97 23 	jmp	0x472e	; 0x472e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 97 23 	jmp	0x472e	; 0x472e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8b 23 	jmp	0x4716	; 0x4716 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a7 23 	jmp	0x474e	; 0x474e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 97 23 	jmp	0x472e	; 0x472e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 97 23 	jmp	0x472e	; 0x472e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 97 23 	jmp	0x472e	; 0x472e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9b 23 	jmp	0x4736	; 0x4736 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b7 23 	jmp	0x476e	; 0x476e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_vEnableInterrupts>:
/*************************************************************************/

#include "GIE_interface.h"

// This function is responsible for enabling GIE for interrupts
void GIE_vEnableInterrupts(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, 7);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_vDisableInterrupts>:

// This function is responsible for disabling GIE for interrupts
void GIE_vDisableInterrupts(){
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, 7);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <EXTI_vInit>:
/*************************************************************************/

#include "EXTI_interface.h"

// This function shall be responsible for initializing external interrupts
void EXTI_vInit(void){
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
/********************* SELECTING ACTIVATION SENSOR FOR EXTI0 *********************/
#if EXTI_INTERRUPT == EXTI0_PIN
#if EXTI_ACTIVATION_SENSE == EXTI0_LOW_ACTIVATION
	MCUCR_REG &= EXTI0_RESET_ACTIVATION;
     b86:	a5 e5       	ldi	r26, 0x55	; 85
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e5 e5       	ldi	r30, 0x55	; 85
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8c 7f       	andi	r24, 0xFC	; 252
     b92:	8c 93       	st	X, r24
	MCUCR_REG |= EXTI0_LOW_ACTIVATION;
     b94:	a5 e5       	ldi	r26, 0x55	; 85
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e5 e5       	ldi	r30, 0x55	; 85
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8c 93       	st	X, r24
	SET_BIT(GICR_REG, EXTI0_PIN);
     ba0:	ab e5       	ldi	r26, 0x5B	; 91
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	eb e5       	ldi	r30, 0x5B	; 91
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	80 64       	ori	r24, 0x40	; 64
     bac:	8c 93       	st	X, r24
	MCUCSR_REG &= EXTI2_RESET_ACTIVATION;
#elif EXTI_ACTIVATION_SENSE == EXTI2_RISING_ACTIVATION
	MCUCSR_REG |= EXTI2_RISING_ACTIVATION;
#endif
#endif
}
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <EXTI_vDisableInterrupt>:

// This function shall be responsible for disabling external interrupts
void EXTI_vDisableInterrupt(void){
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62

}
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <EXTI_vEnablePin>:



// This function shall be responsible for enabling any interrupt pin with any activation sensing
void EXTI_vEnablePin(u8 Copy_u8PinName){
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <EXTI_vEnablePin+0x6>
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PinName)
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	28 2f       	mov	r18, r24
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	3b 83       	std	Y+3, r19	; 0x03
     bd8:	2a 83       	std	Y+2, r18	; 0x02
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	9b 81       	ldd	r25, Y+3	; 0x03
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	31 f0       	breq	.+12     	; 0xbee <EXTI_vEnablePin+0x2c>
     be2:	2a 81       	ldd	r18, Y+2	; 0x02
     be4:	3b 81       	ldd	r19, Y+3	; 0x03
     be6:	21 30       	cpi	r18, 0x01	; 1
     be8:	31 05       	cpc	r19, r1
     bea:	b9 f0       	breq	.+46     	; 0xc1a <EXTI_vEnablePin+0x58>
     bec:	2b c0       	rjmp	.+86     	; 0xc44 <EXTI_vEnablePin+0x82>
	{
	case INT0_PIN:
#if ActivationSense == LOW_ACTIVATION
		CLR_BIT(MCUCR_REG, 0); CLR_BIT(MCUCR_REG, 1); SET_BIT(GICR_REG, EXTI0_PIN);
     bee:	a5 e5       	ldi	r26, 0x55	; 85
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e5 e5       	ldi	r30, 0x55	; 85
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	8e 7f       	andi	r24, 0xFE	; 254
     bfa:	8c 93       	st	X, r24
     bfc:	a5 e5       	ldi	r26, 0x55	; 85
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e5 e5       	ldi	r30, 0x55	; 85
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	8d 7f       	andi	r24, 0xFD	; 253
     c08:	8c 93       	st	X, r24
     c0a:	ab e5       	ldi	r26, 0x5B	; 91
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	eb e5       	ldi	r30, 0x5B	; 91
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	80 64       	ori	r24, 0x40	; 64
     c16:	8c 93       	st	X, r24
     c18:	15 c0       	rjmp	.+42     	; 0xc44 <EXTI_vEnablePin+0x82>
#endif
		break;

	case INT1_PIN:
#if ActivationSense == LOW_ACTIVATION
		CLR_BIT(MCUCR_REG, 2); CLR_BIT(MCUCR_REG, 3); SET_BIT(GICR_REG, EXTI1_PIN);
     c1a:	a5 e5       	ldi	r26, 0x55	; 85
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e5 e5       	ldi	r30, 0x55	; 85
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8b 7f       	andi	r24, 0xFB	; 251
     c26:	8c 93       	st	X, r24
     c28:	a5 e5       	ldi	r26, 0x55	; 85
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e5 e5       	ldi	r30, 0x55	; 85
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	87 7f       	andi	r24, 0xF7	; 247
     c34:	8c 93       	st	X, r24
     c36:	ab e5       	ldi	r26, 0x5B	; 91
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	eb e5       	ldi	r30, 0x5B	; 91
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	80 68       	ori	r24, 0x80	; 128
     c42:	8c 93       	st	X, r24
#elif ActivationSense == RISING_ACTIVATION
		SET_BIT(MCUCSR_REG, 6); SET_BIT(GICR_REG,EXTI2_PIN);
#endif
		break;
	}
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <EXTI_vDisablePin>:

// This function shall be responsible for enabling any interrupt pin
void EXTI_vDisablePin(u8 Copy_u8PinName){
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	00 d0       	rcall	.+0      	; 0xc56 <EXTI_vDisablePin+0x6>
     c56:	0f 92       	push	r0
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PinName)
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	3b 83       	std	Y+3, r19	; 0x03
     c66:	2a 83       	std	Y+2, r18	; 0x02
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	9b 81       	ldd	r25, Y+3	; 0x03
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	91 05       	cpc	r25, r1
     c70:	89 f0       	breq	.+34     	; 0xc94 <EXTI_vDisablePin+0x44>
     c72:	2a 81       	ldd	r18, Y+2	; 0x02
     c74:	3b 81       	ldd	r19, Y+3	; 0x03
     c76:	22 30       	cpi	r18, 0x02	; 2
     c78:	31 05       	cpc	r19, r1
     c7a:	a1 f0       	breq	.+40     	; 0xca4 <EXTI_vDisablePin+0x54>
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	9b 81       	ldd	r25, Y+3	; 0x03
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	b9 f4       	brne	.+46     	; 0xcb2 <EXTI_vDisablePin+0x62>
	{
	case INT0_PIN: CLR_BIT(GICR_REG, EXTI0_PIN); break;
     c84:	ab e5       	ldi	r26, 0x5B	; 91
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	eb e5       	ldi	r30, 0x5B	; 91
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8f 7b       	andi	r24, 0xBF	; 191
     c90:	8c 93       	st	X, r24
     c92:	0f c0       	rjmp	.+30     	; 0xcb2 <EXTI_vDisablePin+0x62>
	case INT1_PIN: CLR_BIT(GICR_REG, EXTI1_PIN); break;
     c94:	ab e5       	ldi	r26, 0x5B	; 91
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	eb e5       	ldi	r30, 0x5B	; 91
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	8f 77       	andi	r24, 0x7F	; 127
     ca0:	8c 93       	st	X, r24
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <EXTI_vDisablePin+0x62>
	case INT2_PIN: CLR_BIT(GICR_REG, EXTI2_PIN); break;
     ca4:	ab e5       	ldi	r26, 0x5B	; 91
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	eb e5       	ldi	r30, 0x5B	; 91
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8f 7d       	andi	r24, 0xDF	; 223
     cb0:	8c 93       	st	X, r24
	}
}
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <DIO_vSetPinDir>:

#include "DIO_interface.h"


//sets data direction of 1 pin in a port
void DIO_vSetPinDir(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinDir){
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	27 97       	sbiw	r28, 0x07	; 7
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	6a 83       	std	Y+2, r22	; 0x02
     cd6:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir == OUTPUT)
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	09 f0       	breq	.+2      	; 0xce0 <DIO_vSetPinDir+0x22>
     cde:	6f c0       	rjmp	.+222    	; 0xdbe <DIO_vSetPinDir+0x100>
	{
		switch(Copy_u8PortName)
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	3f 83       	std	Y+7, r19	; 0x07
     ce8:	2e 83       	std	Y+6, r18	; 0x06
     cea:	8e 81       	ldd	r24, Y+6	; 0x06
     cec:	9f 81       	ldd	r25, Y+7	; 0x07
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	91 05       	cpc	r25, r1
     cf2:	49 f1       	breq	.+82     	; 0xd46 <DIO_vSetPinDir+0x88>
     cf4:	2e 81       	ldd	r18, Y+6	; 0x06
     cf6:	3f 81       	ldd	r19, Y+7	; 0x07
     cf8:	22 30       	cpi	r18, 0x02	; 2
     cfa:	31 05       	cpc	r19, r1
     cfc:	2c f4       	brge	.+10     	; 0xd08 <DIO_vSetPinDir+0x4a>
     cfe:	8e 81       	ldd	r24, Y+6	; 0x06
     d00:	9f 81       	ldd	r25, Y+7	; 0x07
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	61 f0       	breq	.+24     	; 0xd1e <DIO_vSetPinDir+0x60>
     d06:	d2 c0       	rjmp	.+420    	; 0xeac <DIO_vSetPinDir+0x1ee>
     d08:	2e 81       	ldd	r18, Y+6	; 0x06
     d0a:	3f 81       	ldd	r19, Y+7	; 0x07
     d0c:	22 30       	cpi	r18, 0x02	; 2
     d0e:	31 05       	cpc	r19, r1
     d10:	71 f1       	breq	.+92     	; 0xd6e <DIO_vSetPinDir+0xb0>
     d12:	8e 81       	ldd	r24, Y+6	; 0x06
     d14:	9f 81       	ldd	r25, Y+7	; 0x07
     d16:	83 30       	cpi	r24, 0x03	; 3
     d18:	91 05       	cpc	r25, r1
     d1a:	e9 f1       	breq	.+122    	; 0xd96 <DIO_vSetPinDir+0xd8>
     d1c:	c7 c0       	rjmp	.+398    	; 0xeac <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: SET_BIT(DDRA_REG, Copy_u8PinNum); break;
     d1e:	aa e3       	ldi	r26, 0x3A	; 58
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ea e3       	ldi	r30, 0x3A	; 58
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_vSetPinDir+0x7e>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_vSetPinDir+0x7a>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	b3 c0       	rjmp	.+358    	; 0xeac <DIO_vSetPinDir+0x1ee>
		case PORTB: SET_BIT(DDRB_REG, Copy_u8PinNum); break;
     d46:	a7 e3       	ldi	r26, 0x37	; 55
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e7 e3       	ldi	r30, 0x37	; 55
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	48 2f       	mov	r20, r24
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	02 2e       	mov	r0, r18
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <DIO_vSetPinDir+0xa6>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	0a 94       	dec	r0
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <DIO_vSetPinDir+0xa2>
     d68:	84 2b       	or	r24, r20
     d6a:	8c 93       	st	X, r24
     d6c:	9f c0       	rjmp	.+318    	; 0xeac <DIO_vSetPinDir+0x1ee>
		case PORTC: SET_BIT(DDRC_REG, Copy_u8PinNum); break;
     d6e:	a4 e3       	ldi	r26, 0x34	; 52
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e4 e3       	ldi	r30, 0x34	; 52
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_vSetPinDir+0xce>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_vSetPinDir+0xca>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	8b c0       	rjmp	.+278    	; 0xeac <DIO_vSetPinDir+0x1ee>
		case PORTD: SET_BIT(DDRD_REG, Copy_u8PinNum); break;
     d96:	a1 e3       	ldi	r26, 0x31	; 49
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e1 e3       	ldi	r30, 0x31	; 49
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_vSetPinDir+0xf6>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_vSetPinDir+0xf2>
     db8:	84 2b       	or	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	77 c0       	rjmp	.+238    	; 0xeac <DIO_vSetPinDir+0x1ee>
		}
	}
	else if(Copy_u8PinDir == INPUT)
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	88 23       	and	r24, r24
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <DIO_vSetPinDir+0x108>
     dc4:	73 c0       	rjmp	.+230    	; 0xeac <DIO_vSetPinDir+0x1ee>
	{
		switch(Copy_u8PortName)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3d 83       	std	Y+5, r19	; 0x05
     dce:	2c 83       	std	Y+4, r18	; 0x04
     dd0:	8c 81       	ldd	r24, Y+4	; 0x04
     dd2:	9d 81       	ldd	r25, Y+5	; 0x05
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	91 05       	cpc	r25, r1
     dd8:	59 f1       	breq	.+86     	; 0xe30 <DIO_vSetPinDir+0x172>
     dda:	2c 81       	ldd	r18, Y+4	; 0x04
     ddc:	3d 81       	ldd	r19, Y+5	; 0x05
     dde:	22 30       	cpi	r18, 0x02	; 2
     de0:	31 05       	cpc	r19, r1
     de2:	2c f4       	brge	.+10     	; 0xdee <DIO_vSetPinDir+0x130>
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	69 f0       	breq	.+26     	; 0xe06 <DIO_vSetPinDir+0x148>
     dec:	5f c0       	rjmp	.+190    	; 0xeac <DIO_vSetPinDir+0x1ee>
     dee:	2c 81       	ldd	r18, Y+4	; 0x04
     df0:	3d 81       	ldd	r19, Y+5	; 0x05
     df2:	22 30       	cpi	r18, 0x02	; 2
     df4:	31 05       	cpc	r19, r1
     df6:	89 f1       	breq	.+98     	; 0xe5a <DIO_vSetPinDir+0x19c>
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	9d 81       	ldd	r25, Y+5	; 0x05
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	91 05       	cpc	r25, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <DIO_vSetPinDir+0x146>
     e02:	40 c0       	rjmp	.+128    	; 0xe84 <DIO_vSetPinDir+0x1c6>
     e04:	53 c0       	rjmp	.+166    	; 0xeac <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: CLR_BIT(DDRA_REG, Copy_u8PinNum); break;
     e06:	aa e3       	ldi	r26, 0x3A	; 58
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ea e3       	ldi	r30, 0x3A	; 58
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_vSetPinDir+0x166>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_vSetPinDir+0x162>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	3e c0       	rjmp	.+124    	; 0xeac <DIO_vSetPinDir+0x1ee>
		case PORTB: CLR_BIT(DDRB_REG, Copy_u8PinNum); break;
     e30:	a7 e3       	ldi	r26, 0x37	; 55
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e7 e3       	ldi	r30, 0x37	; 55
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_vSetPinDir+0x190>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_vSetPinDir+0x18c>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	29 c0       	rjmp	.+82     	; 0xeac <DIO_vSetPinDir+0x1ee>
		case PORTC: CLR_BIT(DDRC_REG, Copy_u8PinNum); break;
     e5a:	a4 e3       	ldi	r26, 0x34	; 52
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e4 e3       	ldi	r30, 0x34	; 52
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_vSetPinDir+0x1ba>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <DIO_vSetPinDir+0x1b6>
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	14 c0       	rjmp	.+40     	; 0xeac <DIO_vSetPinDir+0x1ee>
		case PORTD: CLR_BIT(DDRD_REG, Copy_u8PinNum); break;
     e84:	a1 e3       	ldi	r26, 0x31	; 49
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e1 e3       	ldi	r30, 0x31	; 49
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_vSetPinDir+0x1e4>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <DIO_vSetPinDir+0x1e0>
     ea6:	80 95       	com	r24
     ea8:	84 23       	and	r24, r20
     eaa:	8c 93       	st	X, r24
		}
	}
}
     eac:	27 96       	adiw	r28, 0x07	; 7
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <DIO_vSetPinValue>:

//sets value of 1 pin in a port
void DIO_vSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinVal){
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	27 97       	sbiw	r28, 0x07	; 7
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	6a 83       	std	Y+2, r22	; 0x02
     ed6:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinVal == HIGH)
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	09 f0       	breq	.+2      	; 0xee0 <DIO_vSetPinValue+0x22>
     ede:	6f c0       	rjmp	.+222    	; 0xfbe <DIO_vSetPinValue+0x100>
	{
		switch(Copy_u8PortName)
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	3f 83       	std	Y+7, r19	; 0x07
     ee8:	2e 83       	std	Y+6, r18	; 0x06
     eea:	8e 81       	ldd	r24, Y+6	; 0x06
     eec:	9f 81       	ldd	r25, Y+7	; 0x07
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	91 05       	cpc	r25, r1
     ef2:	49 f1       	breq	.+82     	; 0xf46 <DIO_vSetPinValue+0x88>
     ef4:	2e 81       	ldd	r18, Y+6	; 0x06
     ef6:	3f 81       	ldd	r19, Y+7	; 0x07
     ef8:	22 30       	cpi	r18, 0x02	; 2
     efa:	31 05       	cpc	r19, r1
     efc:	2c f4       	brge	.+10     	; 0xf08 <DIO_vSetPinValue+0x4a>
     efe:	8e 81       	ldd	r24, Y+6	; 0x06
     f00:	9f 81       	ldd	r25, Y+7	; 0x07
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	61 f0       	breq	.+24     	; 0xf1e <DIO_vSetPinValue+0x60>
     f06:	d2 c0       	rjmp	.+420    	; 0x10ac <DIO_vSetPinValue+0x1ee>
     f08:	2e 81       	ldd	r18, Y+6	; 0x06
     f0a:	3f 81       	ldd	r19, Y+7	; 0x07
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	71 f1       	breq	.+92     	; 0xf6e <DIO_vSetPinValue+0xb0>
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	91 05       	cpc	r25, r1
     f1a:	e9 f1       	breq	.+122    	; 0xf96 <DIO_vSetPinValue+0xd8>
     f1c:	c7 c0       	rjmp	.+398    	; 0x10ac <DIO_vSetPinValue+0x1ee>
		{
		case PORTA: SET_BIT(PORTA_REG, Copy_u8PinNum); break;
     f1e:	ab e3       	ldi	r26, 0x3B	; 59
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	eb e3       	ldi	r30, 0x3B	; 59
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_vSetPinValue+0x7e>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_vSetPinValue+0x7a>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	b3 c0       	rjmp	.+358    	; 0x10ac <DIO_vSetPinValue+0x1ee>
		case PORTB: SET_BIT(PORTB_REG, Copy_u8PinNum); break;
     f46:	a8 e3       	ldi	r26, 0x38	; 56
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e8 e3       	ldi	r30, 0x38	; 56
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_vSetPinValue+0xa6>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_vSetPinValue+0xa2>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	9f c0       	rjmp	.+318    	; 0x10ac <DIO_vSetPinValue+0x1ee>
		case PORTC: SET_BIT(PORTC_REG, Copy_u8PinNum); break;
     f6e:	a5 e3       	ldi	r26, 0x35	; 53
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e5 e3       	ldi	r30, 0x35	; 53
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_vSetPinValue+0xce>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_vSetPinValue+0xca>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	8b c0       	rjmp	.+278    	; 0x10ac <DIO_vSetPinValue+0x1ee>
		case PORTD: SET_BIT(PORTD_REG, Copy_u8PinNum); break;
     f96:	a2 e3       	ldi	r26, 0x32	; 50
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e2 e3       	ldi	r30, 0x32	; 50
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_vSetPinValue+0xf6>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_vSetPinValue+0xf2>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	77 c0       	rjmp	.+238    	; 0x10ac <DIO_vSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinVal == LOW)
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	88 23       	and	r24, r24
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <DIO_vSetPinValue+0x108>
     fc4:	73 c0       	rjmp	.+230    	; 0x10ac <DIO_vSetPinValue+0x1ee>
	{
		switch(Copy_u8PortName)
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	3d 83       	std	Y+5, r19	; 0x05
     fce:	2c 83       	std	Y+4, r18	; 0x04
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	9d 81       	ldd	r25, Y+5	; 0x05
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	91 05       	cpc	r25, r1
     fd8:	59 f1       	breq	.+86     	; 0x1030 <DIO_vSetPinValue+0x172>
     fda:	2c 81       	ldd	r18, Y+4	; 0x04
     fdc:	3d 81       	ldd	r19, Y+5	; 0x05
     fde:	22 30       	cpi	r18, 0x02	; 2
     fe0:	31 05       	cpc	r19, r1
     fe2:	2c f4       	brge	.+10     	; 0xfee <DIO_vSetPinValue+0x130>
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	9d 81       	ldd	r25, Y+5	; 0x05
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	69 f0       	breq	.+26     	; 0x1006 <DIO_vSetPinValue+0x148>
     fec:	5f c0       	rjmp	.+190    	; 0x10ac <DIO_vSetPinValue+0x1ee>
     fee:	2c 81       	ldd	r18, Y+4	; 0x04
     ff0:	3d 81       	ldd	r19, Y+5	; 0x05
     ff2:	22 30       	cpi	r18, 0x02	; 2
     ff4:	31 05       	cpc	r19, r1
     ff6:	89 f1       	breq	.+98     	; 0x105a <DIO_vSetPinValue+0x19c>
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	83 30       	cpi	r24, 0x03	; 3
     ffe:	91 05       	cpc	r25, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <DIO_vSetPinValue+0x146>
    1002:	40 c0       	rjmp	.+128    	; 0x1084 <DIO_vSetPinValue+0x1c6>
    1004:	53 c0       	rjmp	.+166    	; 0x10ac <DIO_vSetPinValue+0x1ee>
		{
		case PORTA: CLR_BIT(PORTA_REG, Copy_u8PinNum); break;
    1006:	ab e3       	ldi	r26, 0x3B	; 59
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	eb e3       	ldi	r30, 0x3B	; 59
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_vSetPinValue+0x166>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_vSetPinValue+0x162>
    1028:	80 95       	com	r24
    102a:	84 23       	and	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	3e c0       	rjmp	.+124    	; 0x10ac <DIO_vSetPinValue+0x1ee>
		case PORTB: CLR_BIT(PORTB_REG, Copy_u8PinNum); break;
    1030:	a8 e3       	ldi	r26, 0x38	; 56
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e8 e3       	ldi	r30, 0x38	; 56
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_vSetPinValue+0x190>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_vSetPinValue+0x18c>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	29 c0       	rjmp	.+82     	; 0x10ac <DIO_vSetPinValue+0x1ee>
		case PORTC: CLR_BIT(PORTC_REG, Copy_u8PinNum); break;
    105a:	a5 e3       	ldi	r26, 0x35	; 53
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e5 e3       	ldi	r30, 0x35	; 53
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_vSetPinValue+0x1ba>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_vSetPinValue+0x1b6>
    107c:	80 95       	com	r24
    107e:	84 23       	and	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	14 c0       	rjmp	.+40     	; 0x10ac <DIO_vSetPinValue+0x1ee>
		case PORTD: CLR_BIT(PORTD_REG, Copy_u8PinNum); break;
    1084:	a2 e3       	ldi	r26, 0x32	; 50
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e2 e3       	ldi	r30, 0x32	; 50
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_vSetPinValue+0x1e4>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_vSetPinValue+0x1e0>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
		}
	}
}
    10ac:	27 96       	adiw	r28, 0x07	; 7
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <DIO_u8ReadPinValue>:

//reads value on 1 pin in a port
u8 DIO_u8ReadPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum){
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <DIO_u8ReadPinValue+0x6>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <DIO_u8ReadPinValue+0x8>
    10c6:	0f 92       	push	r0
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	8a 83       	std	Y+2, r24	; 0x02
    10ce:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReadValue = 0;
    10d0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	3d 83       	std	Y+5, r19	; 0x05
    10da:	2c 83       	std	Y+4, r18	; 0x04
    10dc:	4c 81       	ldd	r20, Y+4	; 0x04
    10de:	5d 81       	ldd	r21, Y+5	; 0x05
    10e0:	41 30       	cpi	r20, 0x01	; 1
    10e2:	51 05       	cpc	r21, r1
    10e4:	41 f1       	breq	.+80     	; 0x1136 <DIO_u8ReadPinValue+0x78>
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	91 05       	cpc	r25, r1
    10ee:	34 f4       	brge	.+12     	; 0x10fc <DIO_u8ReadPinValue+0x3e>
    10f0:	2c 81       	ldd	r18, Y+4	; 0x04
    10f2:	3d 81       	ldd	r19, Y+5	; 0x05
    10f4:	21 15       	cp	r18, r1
    10f6:	31 05       	cpc	r19, r1
    10f8:	61 f0       	breq	.+24     	; 0x1112 <DIO_u8ReadPinValue+0x54>
    10fa:	52 c0       	rjmp	.+164    	; 0x11a0 <DIO_u8ReadPinValue+0xe2>
    10fc:	4c 81       	ldd	r20, Y+4	; 0x04
    10fe:	5d 81       	ldd	r21, Y+5	; 0x05
    1100:	42 30       	cpi	r20, 0x02	; 2
    1102:	51 05       	cpc	r21, r1
    1104:	51 f1       	breq	.+84     	; 0x115a <DIO_u8ReadPinValue+0x9c>
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	83 30       	cpi	r24, 0x03	; 3
    110c:	91 05       	cpc	r25, r1
    110e:	b9 f1       	breq	.+110    	; 0x117e <DIO_u8ReadPinValue+0xc0>
    1110:	47 c0       	rjmp	.+142    	; 0x11a0 <DIO_u8ReadPinValue+0xe2>
	{
	case PORTA: Local_u8ReadValue = GET_BIT(PINA_REG, Copy_u8PinNum); break;
    1112:	e9 e3       	ldi	r30, 0x39	; 57
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a9 01       	movw	r20, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_u8ReadPinValue+0x6c>
    1126:	55 95       	asr	r21
    1128:	47 95       	ror	r20
    112a:	8a 95       	dec	r24
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_u8ReadPinValue+0x68>
    112e:	ca 01       	movw	r24, r20
    1130:	81 70       	andi	r24, 0x01	; 1
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	35 c0       	rjmp	.+106    	; 0x11a0 <DIO_u8ReadPinValue+0xe2>
	case PORTB: Local_u8ReadValue = GET_BIT(PINB_REG, Copy_u8PinNum); break;
    1136:	e6 e3       	ldi	r30, 0x36	; 54
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a9 01       	movw	r20, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_u8ReadPinValue+0x90>
    114a:	55 95       	asr	r21
    114c:	47 95       	ror	r20
    114e:	8a 95       	dec	r24
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_u8ReadPinValue+0x8c>
    1152:	ca 01       	movw	r24, r20
    1154:	81 70       	andi	r24, 0x01	; 1
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	23 c0       	rjmp	.+70     	; 0x11a0 <DIO_u8ReadPinValue+0xe2>
	case PORTC: Local_u8ReadValue = GET_BIT(PINC_REG, Copy_u8PinNum); break;
    115a:	e3 e3       	ldi	r30, 0x33	; 51
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	a9 01       	movw	r20, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_u8ReadPinValue+0xb4>
    116e:	55 95       	asr	r21
    1170:	47 95       	ror	r20
    1172:	8a 95       	dec	r24
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_u8ReadPinValue+0xb0>
    1176:	ca 01       	movw	r24, r20
    1178:	81 70       	andi	r24, 0x01	; 1
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	11 c0       	rjmp	.+34     	; 0x11a0 <DIO_u8ReadPinValue+0xe2>
	case PORTD: Local_u8ReadValue = GET_BIT(PIND_REG, Copy_u8PinNum); break;
    117e:	e0 e3       	ldi	r30, 0x30	; 48
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	a9 01       	movw	r20, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_u8ReadPinValue+0xd8>
    1192:	55 95       	asr	r21
    1194:	47 95       	ror	r20
    1196:	8a 95       	dec	r24
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_u8ReadPinValue+0xd4>
    119a:	ca 01       	movw	r24, r20
    119c:	81 70       	andi	r24, 0x01	; 1
    119e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ReadValue;
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <DIO_vSetGroupDir>:

//sets data direction of all 8 pins in a port
void DIO_vSetGroupDir(u8 Copy_u8PortName, u8 Copy_u8PortDir){
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <DIO_vSetGroupDir+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <DIO_vSetGroupDir+0x8>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <DIO_vSetGroupDir+0xa>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortDir == OUTPUT)
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	99 f5       	brne	.+102    	; 0x1230 <DIO_vSetGroupDir+0x7e>
	{
		switch(Copy_u8PortName)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3e 83       	std	Y+6, r19	; 0x06
    11d2:	2d 83       	std	Y+5, r18	; 0x05
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	91 05       	cpc	r25, r1
    11dc:	d1 f0       	breq	.+52     	; 0x1212 <DIO_vSetGroupDir+0x60>
    11de:	2d 81       	ldd	r18, Y+5	; 0x05
    11e0:	3e 81       	ldd	r19, Y+6	; 0x06
    11e2:	22 30       	cpi	r18, 0x02	; 2
    11e4:	31 05       	cpc	r19, r1
    11e6:	2c f4       	brge	.+10     	; 0x11f2 <DIO_vSetGroupDir+0x40>
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	61 f0       	breq	.+24     	; 0x1208 <DIO_vSetGroupDir+0x56>
    11f0:	50 c0       	rjmp	.+160    	; 0x1292 <DIO_vSetGroupDir+0xe0>
    11f2:	2d 81       	ldd	r18, Y+5	; 0x05
    11f4:	3e 81       	ldd	r19, Y+6	; 0x06
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	81 f0       	breq	.+32     	; 0x121c <DIO_vSetGroupDir+0x6a>
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	91 05       	cpc	r25, r1
    1204:	81 f0       	breq	.+32     	; 0x1226 <DIO_vSetGroupDir+0x74>
    1206:	45 c0       	rjmp	.+138    	; 0x1292 <DIO_vSetGroupDir+0xe0>
		{
		case PORTA: DDRA_REG = 0xFF; break;
    1208:	ea e3       	ldi	r30, 0x3A	; 58
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	80 83       	st	Z, r24
    1210:	40 c0       	rjmp	.+128    	; 0x1292 <DIO_vSetGroupDir+0xe0>
		case PORTB: DDRB_REG = 0xFF; break;
    1212:	e7 e3       	ldi	r30, 0x37	; 55
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	80 83       	st	Z, r24
    121a:	3b c0       	rjmp	.+118    	; 0x1292 <DIO_vSetGroupDir+0xe0>
		case PORTC: DDRC_REG = 0xFF; break;
    121c:	e4 e3       	ldi	r30, 0x34	; 52
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8f ef       	ldi	r24, 0xFF	; 255
    1222:	80 83       	st	Z, r24
    1224:	36 c0       	rjmp	.+108    	; 0x1292 <DIO_vSetGroupDir+0xe0>
		case PORTD: DDRD_REG = 0xFF; break;
    1226:	e1 e3       	ldi	r30, 0x31	; 49
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	80 83       	st	Z, r24
    122e:	31 c0       	rjmp	.+98     	; 0x1292 <DIO_vSetGroupDir+0xe0>
		}
	}
	else if(Copy_u8PortDir == INPUT)
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	88 23       	and	r24, r24
    1234:	71 f5       	brne	.+92     	; 0x1292 <DIO_vSetGroupDir+0xe0>
	{
		switch(Copy_u8PortName)
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	3c 83       	std	Y+4, r19	; 0x04
    123e:	2b 83       	std	Y+3, r18	; 0x03
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	91 05       	cpc	r25, r1
    1248:	c9 f0       	breq	.+50     	; 0x127c <DIO_vSetGroupDir+0xca>
    124a:	2b 81       	ldd	r18, Y+3	; 0x03
    124c:	3c 81       	ldd	r19, Y+4	; 0x04
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	2c f4       	brge	.+10     	; 0x125e <DIO_vSetGroupDir+0xac>
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	61 f0       	breq	.+24     	; 0x1274 <DIO_vSetGroupDir+0xc2>
    125c:	1a c0       	rjmp	.+52     	; 0x1292 <DIO_vSetGroupDir+0xe0>
    125e:	2b 81       	ldd	r18, Y+3	; 0x03
    1260:	3c 81       	ldd	r19, Y+4	; 0x04
    1262:	22 30       	cpi	r18, 0x02	; 2
    1264:	31 05       	cpc	r19, r1
    1266:	71 f0       	breq	.+28     	; 0x1284 <DIO_vSetGroupDir+0xd2>
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	83 30       	cpi	r24, 0x03	; 3
    126e:	91 05       	cpc	r25, r1
    1270:	69 f0       	breq	.+26     	; 0x128c <DIO_vSetGroupDir+0xda>
    1272:	0f c0       	rjmp	.+30     	; 0x1292 <DIO_vSetGroupDir+0xe0>
		{
		case PORTA: DDRA_REG = 0x00; break;
    1274:	ea e3       	ldi	r30, 0x3A	; 58
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	10 82       	st	Z, r1
    127a:	0b c0       	rjmp	.+22     	; 0x1292 <DIO_vSetGroupDir+0xe0>
		case PORTB: DDRB_REG = 0x00; break;
    127c:	e7 e3       	ldi	r30, 0x37	; 55
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	10 82       	st	Z, r1
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <DIO_vSetGroupDir+0xe0>
		case PORTC: DDRC_REG = 0x00; break;
    1284:	e4 e3       	ldi	r30, 0x34	; 52
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	10 82       	st	Z, r1
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <DIO_vSetGroupDir+0xe0>
		case PORTD: DDRD_REG = 0x00; break;
    128c:	e1 e3       	ldi	r30, 0x31	; 49
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	10 82       	st	Z, r1
		}
	}
}
    1292:	26 96       	adiw	r28, 0x06	; 6
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <DIO_vSetGroupValue>:

//sets value of all 8 pins in a port
void DIO_vSetGroupValue(u8 Copy_u8PortName, u8 Copy_u8PortValue){
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <DIO_vSetGroupValue+0x6>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <DIO_vSetGroupValue+0x8>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	3c 83       	std	Y+4, r19	; 0x04
    12bc:	2b 83       	std	Y+3, r18	; 0x03
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	91 05       	cpc	r25, r1
    12c6:	d1 f0       	breq	.+52     	; 0x12fc <DIO_vSetGroupValue+0x58>
    12c8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ca:	3c 81       	ldd	r19, Y+4	; 0x04
    12cc:	22 30       	cpi	r18, 0x02	; 2
    12ce:	31 05       	cpc	r19, r1
    12d0:	2c f4       	brge	.+10     	; 0x12dc <DIO_vSetGroupValue+0x38>
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <DIO_vSetGroupValue+0x4e>
    12da:	1e c0       	rjmp	.+60     	; 0x1318 <DIO_vSetGroupValue+0x74>
    12dc:	2b 81       	ldd	r18, Y+3	; 0x03
    12de:	3c 81       	ldd	r19, Y+4	; 0x04
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	81 f0       	breq	.+32     	; 0x1306 <DIO_vSetGroupValue+0x62>
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	83 30       	cpi	r24, 0x03	; 3
    12ec:	91 05       	cpc	r25, r1
    12ee:	81 f0       	breq	.+32     	; 0x1310 <DIO_vSetGroupValue+0x6c>
    12f0:	13 c0       	rjmp	.+38     	; 0x1318 <DIO_vSetGroupValue+0x74>
	{
	case PORTA: PORTA_REG = Copy_u8PortValue; break;
    12f2:	eb e3       	ldi	r30, 0x3B	; 59
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	80 83       	st	Z, r24
    12fa:	0e c0       	rjmp	.+28     	; 0x1318 <DIO_vSetGroupValue+0x74>
	case PORTB: PORTB_REG = Copy_u8PortValue; break;
    12fc:	e8 e3       	ldi	r30, 0x38	; 56
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	80 83       	st	Z, r24
    1304:	09 c0       	rjmp	.+18     	; 0x1318 <DIO_vSetGroupValue+0x74>
	case PORTC: PORTC_REG = Copy_u8PortValue; break;
    1306:	e5 e3       	ldi	r30, 0x35	; 53
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	80 83       	st	Z, r24
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <DIO_vSetGroupValue+0x74>
	case PORTD: PORTD_REG = Copy_u8PortValue; break;
    1310:	e2 e3       	ldi	r30, 0x32	; 50
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	80 83       	st	Z, r24
	}
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <DIO_u8ReadGroupValue>:

//reads value on all 8 pins of a port
u8 DIO_u8ReadGroupValue(u8 Copy_u8PortName){
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <DIO_u8ReadGroupValue+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <DIO_u8ReadGroupValue+0x8>
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReadValue = 0;
    1334:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3c 83       	std	Y+4, r19	; 0x04
    133e:	2b 83       	std	Y+3, r18	; 0x03
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	91 05       	cpc	r25, r1
    1348:	d1 f0       	breq	.+52     	; 0x137e <DIO_u8ReadGroupValue+0x58>
    134a:	2b 81       	ldd	r18, Y+3	; 0x03
    134c:	3c 81       	ldd	r19, Y+4	; 0x04
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	2c f4       	brge	.+10     	; 0x135e <DIO_u8ReadGroupValue+0x38>
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	61 f0       	breq	.+24     	; 0x1374 <DIO_u8ReadGroupValue+0x4e>
    135c:	1e c0       	rjmp	.+60     	; 0x139a <DIO_u8ReadGroupValue+0x74>
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	3c 81       	ldd	r19, Y+4	; 0x04
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	81 f0       	breq	.+32     	; 0x1388 <DIO_u8ReadGroupValue+0x62>
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	83 30       	cpi	r24, 0x03	; 3
    136e:	91 05       	cpc	r25, r1
    1370:	81 f0       	breq	.+32     	; 0x1392 <DIO_u8ReadGroupValue+0x6c>
    1372:	13 c0       	rjmp	.+38     	; 0x139a <DIO_u8ReadGroupValue+0x74>
	{
	case PORTA: Local_u8ReadValue = PINA_REG; break;
    1374:	e9 e3       	ldi	r30, 0x39	; 57
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	0e c0       	rjmp	.+28     	; 0x139a <DIO_u8ReadGroupValue+0x74>
	case PORTB: Local_u8ReadValue = PINB_REG; break;
    137e:	e6 e3       	ldi	r30, 0x36	; 54
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	09 c0       	rjmp	.+18     	; 0x139a <DIO_u8ReadGroupValue+0x74>
	case PORTC: Local_u8ReadValue = PINC_REG; break;
    1388:	e3 e3       	ldi	r30, 0x33	; 51
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	04 c0       	rjmp	.+8      	; 0x139a <DIO_u8ReadGroupValue+0x74>
	case PORTD: Local_u8ReadValue = PIND_REG; break;
    1392:	e0 e3       	ldi	r30, 0x30	; 48
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ReadValue;
    139a:	89 81       	ldd	r24, Y+1	; 0x01
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <DIO_vSet4LSBDir>:

//sets data direction of 4 LSB pins of a port
void DIO_vSet4LSBDir(u8 Copy_u8PortName, u8 Copy_u8PinDir){
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <DIO_vSet4LSBDir+0x6>
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <DIO_vSet4LSBDir+0x8>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <DIO_vSet4LSBDir+0xa>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinDir == OUTPUT)
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <DIO_vSet4LSBDir+0x1a>
    13c2:	3f c0       	rjmp	.+126    	; 0x1442 <DIO_vSet4LSBDir+0x98>
	{
		switch(Copy_u8PortName)
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3e 83       	std	Y+6, r19	; 0x06
    13cc:	2d 83       	std	Y+5, r18	; 0x05
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	91 05       	cpc	r25, r1
    13d6:	e9 f0       	breq	.+58     	; 0x1412 <DIO_vSet4LSBDir+0x68>
    13d8:	2d 81       	ldd	r18, Y+5	; 0x05
    13da:	3e 81       	ldd	r19, Y+6	; 0x06
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	2c f4       	brge	.+10     	; 0x13ec <DIO_vSet4LSBDir+0x42>
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	61 f0       	breq	.+24     	; 0x1402 <DIO_vSet4LSBDir+0x58>
    13ea:	6d c0       	rjmp	.+218    	; 0x14c6 <DIO_vSet4LSBDir+0x11c>
    13ec:	2d 81       	ldd	r18, Y+5	; 0x05
    13ee:	3e 81       	ldd	r19, Y+6	; 0x06
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	b1 f0       	breq	.+44     	; 0x1422 <DIO_vSet4LSBDir+0x78>
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	91 05       	cpc	r25, r1
    13fe:	c9 f0       	breq	.+50     	; 0x1432 <DIO_vSet4LSBDir+0x88>
    1400:	62 c0       	rjmp	.+196    	; 0x14c6 <DIO_vSet4LSBDir+0x11c>
		{
		case PORTA: DDRA_REG |= 0x0F; break;
    1402:	aa e3       	ldi	r26, 0x3A	; 58
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	ea e3       	ldi	r30, 0x3A	; 58
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8f 60       	ori	r24, 0x0F	; 15
    140e:	8c 93       	st	X, r24
    1410:	5a c0       	rjmp	.+180    	; 0x14c6 <DIO_vSet4LSBDir+0x11c>
		case PORTB: DDRB_REG |= 0x0F; break;
    1412:	a7 e3       	ldi	r26, 0x37	; 55
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e7 e3       	ldi	r30, 0x37	; 55
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8f 60       	ori	r24, 0x0F	; 15
    141e:	8c 93       	st	X, r24
    1420:	52 c0       	rjmp	.+164    	; 0x14c6 <DIO_vSet4LSBDir+0x11c>
		case PORTC: DDRC_REG |= 0x0F; break;
    1422:	a4 e3       	ldi	r26, 0x34	; 52
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e4 e3       	ldi	r30, 0x34	; 52
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	8f 60       	ori	r24, 0x0F	; 15
    142e:	8c 93       	st	X, r24
    1430:	4a c0       	rjmp	.+148    	; 0x14c6 <DIO_vSet4LSBDir+0x11c>
		case PORTD: DDRD_REG |= 0x0F; break;
    1432:	a1 e3       	ldi	r26, 0x31	; 49
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e1 e3       	ldi	r30, 0x31	; 49
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8f 60       	ori	r24, 0x0F	; 15
    143e:	8c 93       	st	X, r24
    1440:	42 c0       	rjmp	.+132    	; 0x14c6 <DIO_vSet4LSBDir+0x11c>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	88 23       	and	r24, r24
    1446:	09 f0       	breq	.+2      	; 0x144a <DIO_vSet4LSBDir+0xa0>
    1448:	3e c0       	rjmp	.+124    	; 0x14c6 <DIO_vSet4LSBDir+0x11c>
	{
		switch(Copy_u8PortName)
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	3c 83       	std	Y+4, r19	; 0x04
    1452:	2b 83       	std	Y+3, r18	; 0x03
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	91 05       	cpc	r25, r1
    145c:	e9 f0       	breq	.+58     	; 0x1498 <DIO_vSet4LSBDir+0xee>
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	3c 81       	ldd	r19, Y+4	; 0x04
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	31 05       	cpc	r19, r1
    1466:	2c f4       	brge	.+10     	; 0x1472 <DIO_vSet4LSBDir+0xc8>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	61 f0       	breq	.+24     	; 0x1488 <DIO_vSet4LSBDir+0xde>
    1470:	2a c0       	rjmp	.+84     	; 0x14c6 <DIO_vSet4LSBDir+0x11c>
    1472:	2b 81       	ldd	r18, Y+3	; 0x03
    1474:	3c 81       	ldd	r19, Y+4	; 0x04
    1476:	22 30       	cpi	r18, 0x02	; 2
    1478:	31 05       	cpc	r19, r1
    147a:	b1 f0       	breq	.+44     	; 0x14a8 <DIO_vSet4LSBDir+0xfe>
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	83 30       	cpi	r24, 0x03	; 3
    1482:	91 05       	cpc	r25, r1
    1484:	c9 f0       	breq	.+50     	; 0x14b8 <DIO_vSet4LSBDir+0x10e>
    1486:	1f c0       	rjmp	.+62     	; 0x14c6 <DIO_vSet4LSBDir+0x11c>
		{
		case PORTA: DDRA_REG &= 0xF0; break;
    1488:	aa e3       	ldi	r26, 0x3A	; 58
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	ea e3       	ldi	r30, 0x3A	; 58
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 7f       	andi	r24, 0xF0	; 240
    1494:	8c 93       	st	X, r24
    1496:	17 c0       	rjmp	.+46     	; 0x14c6 <DIO_vSet4LSBDir+0x11c>
		case PORTB: DDRB_REG &= 0xF0; break;
    1498:	a7 e3       	ldi	r26, 0x37	; 55
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e7 e3       	ldi	r30, 0x37	; 55
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	80 7f       	andi	r24, 0xF0	; 240
    14a4:	8c 93       	st	X, r24
    14a6:	0f c0       	rjmp	.+30     	; 0x14c6 <DIO_vSet4LSBDir+0x11c>
		case PORTC: DDRC_REG &= 0xF0; break;
    14a8:	a4 e3       	ldi	r26, 0x34	; 52
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e4 e3       	ldi	r30, 0x34	; 52
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	80 7f       	andi	r24, 0xF0	; 240
    14b4:	8c 93       	st	X, r24
    14b6:	07 c0       	rjmp	.+14     	; 0x14c6 <DIO_vSet4LSBDir+0x11c>
		case PORTD: DDRD_REG &= 0xF0; break;
    14b8:	a1 e3       	ldi	r26, 0x31	; 49
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e1 e3       	ldi	r30, 0x31	; 49
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	80 7f       	andi	r24, 0xF0	; 240
    14c4:	8c 93       	st	X, r24
		}
	}
}
    14c6:	26 96       	adiw	r28, 0x06	; 6
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <DIO_vSet4MSBDir>:

//sets data direction of 4 MSB pins of a port
void DIO_vSet4MSBDir(u8 Copy_u8PortName, u8 Copy_u8PinDir){
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <DIO_vSet4MSBDir+0x6>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <DIO_vSet4MSBDir+0x8>
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <DIO_vSet4MSBDir+0xa>
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinDir == OUTPUT)
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <DIO_vSet4MSBDir+0x1a>
    14f0:	3f c0       	rjmp	.+126    	; 0x1570 <DIO_vSet4MSBDir+0x98>
	{
		switch(Copy_u8PortName)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3e 83       	std	Y+6, r19	; 0x06
    14fa:	2d 83       	std	Y+5, r18	; 0x05
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	e9 f0       	breq	.+58     	; 0x1540 <DIO_vSet4MSBDir+0x68>
    1506:	2d 81       	ldd	r18, Y+5	; 0x05
    1508:	3e 81       	ldd	r19, Y+6	; 0x06
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <DIO_vSet4MSBDir+0x42>
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	61 f0       	breq	.+24     	; 0x1530 <DIO_vSet4MSBDir+0x58>
    1518:	6d c0       	rjmp	.+218    	; 0x15f4 <DIO_vSet4MSBDir+0x11c>
    151a:	2d 81       	ldd	r18, Y+5	; 0x05
    151c:	3e 81       	ldd	r19, Y+6	; 0x06
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	b1 f0       	breq	.+44     	; 0x1550 <DIO_vSet4MSBDir+0x78>
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	c9 f0       	breq	.+50     	; 0x1560 <DIO_vSet4MSBDir+0x88>
    152e:	62 c0       	rjmp	.+196    	; 0x15f4 <DIO_vSet4MSBDir+0x11c>
		{
		case PORTA: DDRA_REG |= 0xF0; break;
    1530:	aa e3       	ldi	r26, 0x3A	; 58
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ea e3       	ldi	r30, 0x3A	; 58
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	80 6f       	ori	r24, 0xF0	; 240
    153c:	8c 93       	st	X, r24
    153e:	5a c0       	rjmp	.+180    	; 0x15f4 <DIO_vSet4MSBDir+0x11c>
		case PORTB: DDRB_REG |= 0xF0; break;
    1540:	a7 e3       	ldi	r26, 0x37	; 55
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e7 e3       	ldi	r30, 0x37	; 55
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	80 6f       	ori	r24, 0xF0	; 240
    154c:	8c 93       	st	X, r24
    154e:	52 c0       	rjmp	.+164    	; 0x15f4 <DIO_vSet4MSBDir+0x11c>
		case PORTC: DDRC_REG |= 0xF0; break;
    1550:	a4 e3       	ldi	r26, 0x34	; 52
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e4 e3       	ldi	r30, 0x34	; 52
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	80 6f       	ori	r24, 0xF0	; 240
    155c:	8c 93       	st	X, r24
    155e:	4a c0       	rjmp	.+148    	; 0x15f4 <DIO_vSet4MSBDir+0x11c>
		case PORTD: DDRD_REG |= 0xF0; break;
    1560:	a1 e3       	ldi	r26, 0x31	; 49
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e1 e3       	ldi	r30, 0x31	; 49
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 6f       	ori	r24, 0xF0	; 240
    156c:	8c 93       	st	X, r24
    156e:	42 c0       	rjmp	.+132    	; 0x15f4 <DIO_vSet4MSBDir+0x11c>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	88 23       	and	r24, r24
    1574:	09 f0       	breq	.+2      	; 0x1578 <DIO_vSet4MSBDir+0xa0>
    1576:	3e c0       	rjmp	.+124    	; 0x15f4 <DIO_vSet4MSBDir+0x11c>
	{
		switch(Copy_u8PortName)
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	3c 83       	std	Y+4, r19	; 0x04
    1580:	2b 83       	std	Y+3, r18	; 0x03
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	91 05       	cpc	r25, r1
    158a:	e9 f0       	breq	.+58     	; 0x15c6 <DIO_vSet4MSBDir+0xee>
    158c:	2b 81       	ldd	r18, Y+3	; 0x03
    158e:	3c 81       	ldd	r19, Y+4	; 0x04
    1590:	22 30       	cpi	r18, 0x02	; 2
    1592:	31 05       	cpc	r19, r1
    1594:	2c f4       	brge	.+10     	; 0x15a0 <DIO_vSet4MSBDir+0xc8>
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	61 f0       	breq	.+24     	; 0x15b6 <DIO_vSet4MSBDir+0xde>
    159e:	2a c0       	rjmp	.+84     	; 0x15f4 <DIO_vSet4MSBDir+0x11c>
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	3c 81       	ldd	r19, Y+4	; 0x04
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	31 05       	cpc	r19, r1
    15a8:	b1 f0       	breq	.+44     	; 0x15d6 <DIO_vSet4MSBDir+0xfe>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	83 30       	cpi	r24, 0x03	; 3
    15b0:	91 05       	cpc	r25, r1
    15b2:	c9 f0       	breq	.+50     	; 0x15e6 <DIO_vSet4MSBDir+0x10e>
    15b4:	1f c0       	rjmp	.+62     	; 0x15f4 <DIO_vSet4MSBDir+0x11c>
		{
		case PORTA: DDRA_REG &= 0x0F; break;
    15b6:	aa e3       	ldi	r26, 0x3A	; 58
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	ea e3       	ldi	r30, 0x3A	; 58
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	8f 70       	andi	r24, 0x0F	; 15
    15c2:	8c 93       	st	X, r24
    15c4:	17 c0       	rjmp	.+46     	; 0x15f4 <DIO_vSet4MSBDir+0x11c>
		case PORTB: DDRB_REG &= 0x0F; break;
    15c6:	a7 e3       	ldi	r26, 0x37	; 55
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e7 e3       	ldi	r30, 0x37	; 55
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	8f 70       	andi	r24, 0x0F	; 15
    15d2:	8c 93       	st	X, r24
    15d4:	0f c0       	rjmp	.+30     	; 0x15f4 <DIO_vSet4MSBDir+0x11c>
		case PORTC: DDRC_REG &= 0x0F; break;
    15d6:	a4 e3       	ldi	r26, 0x34	; 52
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e4 e3       	ldi	r30, 0x34	; 52
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8f 70       	andi	r24, 0x0F	; 15
    15e2:	8c 93       	st	X, r24
    15e4:	07 c0       	rjmp	.+14     	; 0x15f4 <DIO_vSet4MSBDir+0x11c>
		case PORTD: DDRD_REG &= 0x0F; break;
    15e6:	a1 e3       	ldi	r26, 0x31	; 49
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e1 e3       	ldi	r30, 0x31	; 49
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	8f 70       	andi	r24, 0x0F	; 15
    15f2:	8c 93       	st	X, r24
		}
	}
}
    15f4:	26 96       	adiw	r28, 0x06	; 6
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <DIO_vSet4LSBValue>:

//sets value of 4LSB pins of a port
void DIO_vSet4LSBValue(u8 Copy_u8PortName, u8 Copy_u8PinVal){
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <DIO_vSet4LSBValue+0x6>
    160c:	00 d0       	rcall	.+0      	; 0x160e <DIO_vSet4LSBValue+0x8>
    160e:	00 d0       	rcall	.+0      	; 0x1610 <DIO_vSet4LSBValue+0xa>
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinVal == HIGH)
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	09 f0       	breq	.+2      	; 0x1620 <DIO_vSet4LSBValue+0x1a>
    161e:	3f c0       	rjmp	.+126    	; 0x169e <DIO_vSet4LSBValue+0x98>
	{
		switch(Copy_u8PortName)
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	3e 83       	std	Y+6, r19	; 0x06
    1628:	2d 83       	std	Y+5, r18	; 0x05
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	91 05       	cpc	r25, r1
    1632:	e9 f0       	breq	.+58     	; 0x166e <DIO_vSet4LSBValue+0x68>
    1634:	2d 81       	ldd	r18, Y+5	; 0x05
    1636:	3e 81       	ldd	r19, Y+6	; 0x06
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	2c f4       	brge	.+10     	; 0x1648 <DIO_vSet4LSBValue+0x42>
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	61 f0       	breq	.+24     	; 0x165e <DIO_vSet4LSBValue+0x58>
    1646:	6d c0       	rjmp	.+218    	; 0x1722 <DIO_vSet4LSBValue+0x11c>
    1648:	2d 81       	ldd	r18, Y+5	; 0x05
    164a:	3e 81       	ldd	r19, Y+6	; 0x06
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	b1 f0       	breq	.+44     	; 0x167e <DIO_vSet4LSBValue+0x78>
    1652:	8d 81       	ldd	r24, Y+5	; 0x05
    1654:	9e 81       	ldd	r25, Y+6	; 0x06
    1656:	83 30       	cpi	r24, 0x03	; 3
    1658:	91 05       	cpc	r25, r1
    165a:	c9 f0       	breq	.+50     	; 0x168e <DIO_vSet4LSBValue+0x88>
    165c:	62 c0       	rjmp	.+196    	; 0x1722 <DIO_vSet4LSBValue+0x11c>
		{
		case PORTA: PORTA_REG |= 0x0F; break;
    165e:	ab e3       	ldi	r26, 0x3B	; 59
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	eb e3       	ldi	r30, 0x3B	; 59
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8f 60       	ori	r24, 0x0F	; 15
    166a:	8c 93       	st	X, r24
    166c:	5a c0       	rjmp	.+180    	; 0x1722 <DIO_vSet4LSBValue+0x11c>
		case PORTB: PORTB_REG |= 0x0F; break;
    166e:	a8 e3       	ldi	r26, 0x38	; 56
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e8 e3       	ldi	r30, 0x38	; 56
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8f 60       	ori	r24, 0x0F	; 15
    167a:	8c 93       	st	X, r24
    167c:	52 c0       	rjmp	.+164    	; 0x1722 <DIO_vSet4LSBValue+0x11c>
		case PORTC: PORTC_REG |= 0x0F; break;
    167e:	a5 e3       	ldi	r26, 0x35	; 53
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e5 e3       	ldi	r30, 0x35	; 53
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8f 60       	ori	r24, 0x0F	; 15
    168a:	8c 93       	st	X, r24
    168c:	4a c0       	rjmp	.+148    	; 0x1722 <DIO_vSet4LSBValue+0x11c>
		case PORTD: PORTD_REG |= 0x0F; break;
    168e:	a2 e3       	ldi	r26, 0x32	; 50
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e2 e3       	ldi	r30, 0x32	; 50
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	8f 60       	ori	r24, 0x0F	; 15
    169a:	8c 93       	st	X, r24
    169c:	42 c0       	rjmp	.+132    	; 0x1722 <DIO_vSet4LSBValue+0x11c>
		}
	}
	else if(Copy_u8PinVal == LOW)
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	88 23       	and	r24, r24
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <DIO_vSet4LSBValue+0xa0>
    16a4:	3e c0       	rjmp	.+124    	; 0x1722 <DIO_vSet4LSBValue+0x11c>
	{
		switch(Copy_u8PortName)
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	3c 83       	std	Y+4, r19	; 0x04
    16ae:	2b 83       	std	Y+3, r18	; 0x03
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	91 05       	cpc	r25, r1
    16b8:	e9 f0       	breq	.+58     	; 0x16f4 <DIO_vSet4LSBValue+0xee>
    16ba:	2b 81       	ldd	r18, Y+3	; 0x03
    16bc:	3c 81       	ldd	r19, Y+4	; 0x04
    16be:	22 30       	cpi	r18, 0x02	; 2
    16c0:	31 05       	cpc	r19, r1
    16c2:	2c f4       	brge	.+10     	; 0x16ce <DIO_vSet4LSBValue+0xc8>
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	61 f0       	breq	.+24     	; 0x16e4 <DIO_vSet4LSBValue+0xde>
    16cc:	2a c0       	rjmp	.+84     	; 0x1722 <DIO_vSet4LSBValue+0x11c>
    16ce:	2b 81       	ldd	r18, Y+3	; 0x03
    16d0:	3c 81       	ldd	r19, Y+4	; 0x04
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	31 05       	cpc	r19, r1
    16d6:	b1 f0       	breq	.+44     	; 0x1704 <DIO_vSet4LSBValue+0xfe>
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	91 05       	cpc	r25, r1
    16e0:	c9 f0       	breq	.+50     	; 0x1714 <DIO_vSet4LSBValue+0x10e>
    16e2:	1f c0       	rjmp	.+62     	; 0x1722 <DIO_vSet4LSBValue+0x11c>
		{
		case PORTA: PORTA_REG &= 0xF0; break;
    16e4:	ab e3       	ldi	r26, 0x3B	; 59
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	eb e3       	ldi	r30, 0x3B	; 59
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	80 7f       	andi	r24, 0xF0	; 240
    16f0:	8c 93       	st	X, r24
    16f2:	17 c0       	rjmp	.+46     	; 0x1722 <DIO_vSet4LSBValue+0x11c>
		case PORTB: PORTB_REG &= 0xF0; break;
    16f4:	a8 e3       	ldi	r26, 0x38	; 56
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e8 e3       	ldi	r30, 0x38	; 56
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	80 7f       	andi	r24, 0xF0	; 240
    1700:	8c 93       	st	X, r24
    1702:	0f c0       	rjmp	.+30     	; 0x1722 <DIO_vSet4LSBValue+0x11c>
		case PORTC: PORTC_REG &= 0xF0; break;
    1704:	a5 e3       	ldi	r26, 0x35	; 53
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e5 e3       	ldi	r30, 0x35	; 53
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	80 7f       	andi	r24, 0xF0	; 240
    1710:	8c 93       	st	X, r24
    1712:	07 c0       	rjmp	.+14     	; 0x1722 <DIO_vSet4LSBValue+0x11c>
		case PORTD: PORTD_REG &= 0xF0; break;
    1714:	a2 e3       	ldi	r26, 0x32	; 50
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e2 e3       	ldi	r30, 0x32	; 50
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	80 7f       	andi	r24, 0xF0	; 240
    1720:	8c 93       	st	X, r24
		}
	}
}
    1722:	26 96       	adiw	r28, 0x06	; 6
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <DIO_vSet4MSBValue>:

//sets value of 4MSB pins of a port
void DIO_vSet4MSBValue(u8 Copy_u8PortName, u8 Copy_u8PinVal){
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	00 d0       	rcall	.+0      	; 0x173a <DIO_vSet4MSBValue+0x6>
    173a:	00 d0       	rcall	.+0      	; 0x173c <DIO_vSet4MSBValue+0x8>
    173c:	00 d0       	rcall	.+0      	; 0x173e <DIO_vSet4MSBValue+0xa>
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinVal == HIGH)
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	09 f0       	breq	.+2      	; 0x174e <DIO_vSet4MSBValue+0x1a>
    174c:	3f c0       	rjmp	.+126    	; 0x17cc <DIO_vSet4MSBValue+0x98>
	{
		switch(Copy_u8PortName)
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3e 83       	std	Y+6, r19	; 0x06
    1756:	2d 83       	std	Y+5, r18	; 0x05
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	91 05       	cpc	r25, r1
    1760:	e9 f0       	breq	.+58     	; 0x179c <DIO_vSet4MSBValue+0x68>
    1762:	2d 81       	ldd	r18, Y+5	; 0x05
    1764:	3e 81       	ldd	r19, Y+6	; 0x06
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	2c f4       	brge	.+10     	; 0x1776 <DIO_vSet4MSBValue+0x42>
    176c:	8d 81       	ldd	r24, Y+5	; 0x05
    176e:	9e 81       	ldd	r25, Y+6	; 0x06
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	61 f0       	breq	.+24     	; 0x178c <DIO_vSet4MSBValue+0x58>
    1774:	6d c0       	rjmp	.+218    	; 0x1850 <DIO_vSet4MSBValue+0x11c>
    1776:	2d 81       	ldd	r18, Y+5	; 0x05
    1778:	3e 81       	ldd	r19, Y+6	; 0x06
    177a:	22 30       	cpi	r18, 0x02	; 2
    177c:	31 05       	cpc	r19, r1
    177e:	b1 f0       	breq	.+44     	; 0x17ac <DIO_vSet4MSBValue+0x78>
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	91 05       	cpc	r25, r1
    1788:	c9 f0       	breq	.+50     	; 0x17bc <DIO_vSet4MSBValue+0x88>
    178a:	62 c0       	rjmp	.+196    	; 0x1850 <DIO_vSet4MSBValue+0x11c>
		{
		case PORTA: PORTA_REG |= 0xF0; break;
    178c:	ab e3       	ldi	r26, 0x3B	; 59
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	eb e3       	ldi	r30, 0x3B	; 59
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	80 6f       	ori	r24, 0xF0	; 240
    1798:	8c 93       	st	X, r24
    179a:	5a c0       	rjmp	.+180    	; 0x1850 <DIO_vSet4MSBValue+0x11c>
		case PORTB: PORTB_REG |= 0xF0; break;
    179c:	a8 e3       	ldi	r26, 0x38	; 56
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 6f       	ori	r24, 0xF0	; 240
    17a8:	8c 93       	st	X, r24
    17aa:	52 c0       	rjmp	.+164    	; 0x1850 <DIO_vSet4MSBValue+0x11c>
		case PORTC: PORTC_REG |= 0xF0; break;
    17ac:	a5 e3       	ldi	r26, 0x35	; 53
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e5 e3       	ldi	r30, 0x35	; 53
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	80 6f       	ori	r24, 0xF0	; 240
    17b8:	8c 93       	st	X, r24
    17ba:	4a c0       	rjmp	.+148    	; 0x1850 <DIO_vSet4MSBValue+0x11c>
		case PORTD: PORTD_REG |= 0xF0; break;
    17bc:	a2 e3       	ldi	r26, 0x32	; 50
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e2 e3       	ldi	r30, 0x32	; 50
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	80 6f       	ori	r24, 0xF0	; 240
    17c8:	8c 93       	st	X, r24
    17ca:	42 c0       	rjmp	.+132    	; 0x1850 <DIO_vSet4MSBValue+0x11c>
		}
	}
	else if(Copy_u8PinVal == LOW)
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	88 23       	and	r24, r24
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <DIO_vSet4MSBValue+0xa0>
    17d2:	3e c0       	rjmp	.+124    	; 0x1850 <DIO_vSet4MSBValue+0x11c>
	{
		switch(Copy_u8PortName)
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	3c 83       	std	Y+4, r19	; 0x04
    17dc:	2b 83       	std	Y+3, r18	; 0x03
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	91 05       	cpc	r25, r1
    17e6:	e9 f0       	breq	.+58     	; 0x1822 <DIO_vSet4MSBValue+0xee>
    17e8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ea:	3c 81       	ldd	r19, Y+4	; 0x04
    17ec:	22 30       	cpi	r18, 0x02	; 2
    17ee:	31 05       	cpc	r19, r1
    17f0:	2c f4       	brge	.+10     	; 0x17fc <DIO_vSet4MSBValue+0xc8>
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	61 f0       	breq	.+24     	; 0x1812 <DIO_vSet4MSBValue+0xde>
    17fa:	2a c0       	rjmp	.+84     	; 0x1850 <DIO_vSet4MSBValue+0x11c>
    17fc:	2b 81       	ldd	r18, Y+3	; 0x03
    17fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1800:	22 30       	cpi	r18, 0x02	; 2
    1802:	31 05       	cpc	r19, r1
    1804:	b1 f0       	breq	.+44     	; 0x1832 <DIO_vSet4MSBValue+0xfe>
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	83 30       	cpi	r24, 0x03	; 3
    180c:	91 05       	cpc	r25, r1
    180e:	c9 f0       	breq	.+50     	; 0x1842 <DIO_vSet4MSBValue+0x10e>
    1810:	1f c0       	rjmp	.+62     	; 0x1850 <DIO_vSet4MSBValue+0x11c>
		{
		case PORTA: PORTA_REG &= 0x0F; break;
    1812:	ab e3       	ldi	r26, 0x3B	; 59
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	eb e3       	ldi	r30, 0x3B	; 59
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	8f 70       	andi	r24, 0x0F	; 15
    181e:	8c 93       	st	X, r24
    1820:	17 c0       	rjmp	.+46     	; 0x1850 <DIO_vSet4MSBValue+0x11c>
		case PORTB: PORTB_REG &= 0x0F; break;
    1822:	a8 e3       	ldi	r26, 0x38	; 56
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e8 e3       	ldi	r30, 0x38	; 56
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8f 70       	andi	r24, 0x0F	; 15
    182e:	8c 93       	st	X, r24
    1830:	0f c0       	rjmp	.+30     	; 0x1850 <DIO_vSet4MSBValue+0x11c>
		case PORTC: PORTC_REG &= 0x0F; break;
    1832:	a5 e3       	ldi	r26, 0x35	; 53
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e3       	ldi	r30, 0x35	; 53
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8f 70       	andi	r24, 0x0F	; 15
    183e:	8c 93       	st	X, r24
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <DIO_vSet4MSBValue+0x11c>
		case PORTD: PORTD_REG &= 0x0F; break;
    1842:	a2 e3       	ldi	r26, 0x32	; 50
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e2 e3       	ldi	r30, 0x32	; 50
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	8f 70       	andi	r24, 0x0F	; 15
    184e:	8c 93       	st	X, r24
		}
	}
}
    1850:	26 96       	adiw	r28, 0x06	; 6
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <LCD_vInit>:
#include "LCD_interface.h"
#define F_CPU 8000000UL //CPU Frequency is 8MHZ
#include <util/delay.h>

//Function to initialize LCD
void LCD_vInit(void){
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	c6 54       	subi	r28, 0x46	; 70
    1870:	d0 40       	sbci	r29, 0x00	; 0
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetGroupDir(LCD_DATA_PORT, OUTPUT);
    187c:	83 e0       	ldi	r24, 0x03	; 3
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <DIO_vSetGroupDir>
	DIO_vSetPinDir(LCD_CTRL_PORT, RS_PIN, OUTPUT);
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_CTRL_PORT, RW_PIN, OUTPUT);
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_CTRL_PORT, EN_PIN, OUTPUT);
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	62 e0       	ldi	r22, 0x02	; 2
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_vSetPinDir>
    18a2:	fe 01       	movw	r30, r28
    18a4:	ed 5b       	subi	r30, 0xBD	; 189
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e2       	ldi	r26, 0x20	; 32
    18ae:	b1 e4       	ldi	r27, 0x41	; 65
    18b0:	80 83       	st	Z, r24
    18b2:	91 83       	std	Z+1, r25	; 0x01
    18b4:	a2 83       	std	Z+2, r26	; 0x02
    18b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b8:	8e 01       	movw	r16, r28
    18ba:	01 5c       	subi	r16, 0xC1	; 193
    18bc:	1f 4f       	sbci	r17, 0xFF	; 255
    18be:	fe 01       	movw	r30, r28
    18c0:	ed 5b       	subi	r30, 0xBD	; 189
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	4a ef       	ldi	r20, 0xFA	; 250
    18d2:	54 e4       	ldi	r21, 0x44	; 68
    18d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	f8 01       	movw	r30, r16
    18de:	80 83       	st	Z, r24
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	a2 83       	std	Z+2, r26	; 0x02
    18e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18e6:	fe 01       	movw	r30, r28
    18e8:	ff 96       	adiw	r30, 0x3f	; 63
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fe:	88 23       	and	r24, r24
    1900:	2c f4       	brge	.+10     	; 0x190c <LCD_vInit+0xaa>
		__ticks = 1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	9e af       	std	Y+62, r25	; 0x3e
    1908:	8d af       	std	Y+61, r24	; 0x3d
    190a:	46 c0       	rjmp	.+140    	; 0x1998 <LCD_vInit+0x136>
	else if (__tmp > 65535)
    190c:	fe 01       	movw	r30, r28
    190e:	ff 96       	adiw	r30, 0x3f	; 63
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	3f ef       	ldi	r19, 0xFF	; 255
    191c:	4f e7       	ldi	r20, 0x7F	; 127
    191e:	57 e4       	ldi	r21, 0x47	; 71
    1920:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1924:	18 16       	cp	r1, r24
    1926:	64 f5       	brge	.+88     	; 0x1980 <LCD_vInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1928:	fe 01       	movw	r30, r28
    192a:	ed 5b       	subi	r30, 0xBD	; 189
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e2       	ldi	r20, 0x20	; 32
    193c:	51 e4       	ldi	r21, 0x41	; 65
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9e af       	std	Y+62, r25	; 0x3e
    1954:	8d af       	std	Y+61, r24	; 0x3d
    1956:	0f c0       	rjmp	.+30     	; 0x1976 <LCD_vInit+0x114>
    1958:	88 ec       	ldi	r24, 0xC8	; 200
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	9c af       	std	Y+60, r25	; 0x3c
    195e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1960:	8b ad       	ldd	r24, Y+59	; 0x3b
    1962:	9c ad       	ldd	r25, Y+60	; 0x3c
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <LCD_vInit+0x102>
    1968:	9c af       	std	Y+60, r25	; 0x3c
    196a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196c:	8d ad       	ldd	r24, Y+61	; 0x3d
    196e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	9e af       	std	Y+62, r25	; 0x3e
    1974:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1976:	8d ad       	ldd	r24, Y+61	; 0x3d
    1978:	9e ad       	ldd	r25, Y+62	; 0x3e
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	69 f7       	brne	.-38     	; 0x1958 <LCD_vInit+0xf6>
    197e:	16 c0       	rjmp	.+44     	; 0x19ac <LCD_vInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1980:	fe 01       	movw	r30, r28
    1982:	ff 96       	adiw	r30, 0x3f	; 63
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9e af       	std	Y+62, r25	; 0x3e
    1996:	8d af       	std	Y+61, r24	; 0x3d
    1998:	8d ad       	ldd	r24, Y+61	; 0x3d
    199a:	9e ad       	ldd	r25, Y+62	; 0x3e
    199c:	9a af       	std	Y+58, r25	; 0x3a
    199e:	89 af       	std	Y+57, r24	; 0x39
    19a0:	89 ad       	ldd	r24, Y+57	; 0x39
    19a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <LCD_vInit+0x142>
    19a8:	9a af       	std	Y+58, r25	; 0x3a
    19aa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_vSendCmd(TWO_LINE_EIGHT_BITS_BIG_FONT);
    19ac:	8c e3       	ldi	r24, 0x3C	; 60
    19ae:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_vSendCmd>
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a0 e2       	ldi	r26, 0x20	; 32
    19b8:	b1 e4       	ldi	r27, 0x41	; 65
    19ba:	8d ab       	std	Y+53, r24	; 0x35
    19bc:	9e ab       	std	Y+54, r25	; 0x36
    19be:	af ab       	std	Y+55, r26	; 0x37
    19c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c2:	6d a9       	ldd	r22, Y+53	; 0x35
    19c4:	7e a9       	ldd	r23, Y+54	; 0x36
    19c6:	8f a9       	ldd	r24, Y+55	; 0x37
    19c8:	98 ad       	ldd	r25, Y+56	; 0x38
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a ef       	ldi	r20, 0xFA	; 250
    19d0:	54 e4       	ldi	r21, 0x44	; 68
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	89 ab       	std	Y+49, r24	; 0x31
    19dc:	9a ab       	std	Y+50, r25	; 0x32
    19de:	ab ab       	std	Y+51, r26	; 0x33
    19e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19e2:	69 a9       	ldd	r22, Y+49	; 0x31
    19e4:	7a a9       	ldd	r23, Y+50	; 0x32
    19e6:	8b a9       	ldd	r24, Y+51	; 0x33
    19e8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	5f e3       	ldi	r21, 0x3F	; 63
    19f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f6:	88 23       	and	r24, r24
    19f8:	2c f4       	brge	.+10     	; 0x1a04 <LCD_vInit+0x1a2>
		__ticks = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	98 ab       	std	Y+48, r25	; 0x30
    1a00:	8f a7       	std	Y+47, r24	; 0x2f
    1a02:	3f c0       	rjmp	.+126    	; 0x1a82 <LCD_vInit+0x220>
	else if (__tmp > 65535)
    1a04:	69 a9       	ldd	r22, Y+49	; 0x31
    1a06:	7a a9       	ldd	r23, Y+50	; 0x32
    1a08:	8b a9       	ldd	r24, Y+51	; 0x33
    1a0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	57 e4       	ldi	r21, 0x47	; 71
    1a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	4c f5       	brge	.+82     	; 0x1a6e <LCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a20:	8f a9       	ldd	r24, Y+55	; 0x37
    1a22:	98 ad       	ldd	r25, Y+56	; 0x38
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e2       	ldi	r20, 0x20	; 32
    1a2a:	51 e4       	ldi	r21, 0x41	; 65
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	98 ab       	std	Y+48, r25	; 0x30
    1a42:	8f a7       	std	Y+47, r24	; 0x2f
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <LCD_vInit+0x202>
    1a46:	88 ec       	ldi	r24, 0xC8	; 200
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9e a7       	std	Y+46, r25	; 0x2e
    1a4c:	8d a7       	std	Y+45, r24	; 0x2d
    1a4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a50:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_vInit+0x1f0>
    1a56:	9e a7       	std	Y+46, r25	; 0x2e
    1a58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	98 ab       	std	Y+48, r25	; 0x30
    1a62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a66:	98 a9       	ldd	r25, Y+48	; 0x30
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <LCD_vInit+0x1e4>
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <LCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a70:	7a a9       	ldd	r23, Y+50	; 0x32
    1a72:	8b a9       	ldd	r24, Y+51	; 0x33
    1a74:	9c a9       	ldd	r25, Y+52	; 0x34
    1a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	98 ab       	std	Y+48, r25	; 0x30
    1a80:	8f a7       	std	Y+47, r24	; 0x2f
    1a82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a84:	98 a9       	ldd	r25, Y+48	; 0x30
    1a86:	9c a7       	std	Y+44, r25	; 0x2c
    1a88:	8b a7       	std	Y+43, r24	; 0x2b
    1a8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_vInit+0x22c>
    1a92:	9c a7       	std	Y+44, r25	; 0x2c
    1a94:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_vSendCmd(CURSOR_ON);
    1a96:	8f e0       	ldi	r24, 0x0F	; 15
    1a98:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_vSendCmd>
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a0 e2       	ldi	r26, 0x20	; 32
    1aa2:	b1 e4       	ldi	r27, 0x41	; 65
    1aa4:	8f a3       	std	Y+39, r24	; 0x27
    1aa6:	98 a7       	std	Y+40, r25	; 0x28
    1aa8:	a9 a7       	std	Y+41, r26	; 0x29
    1aaa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aac:	6f a1       	ldd	r22, Y+39	; 0x27
    1aae:	78 a5       	ldd	r23, Y+40	; 0x28
    1ab0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ab2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4a ef       	ldi	r20, 0xFA	; 250
    1aba:	54 e4       	ldi	r21, 0x44	; 68
    1abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	8b a3       	std	Y+35, r24	; 0x23
    1ac6:	9c a3       	std	Y+36, r25	; 0x24
    1ac8:	ad a3       	std	Y+37, r26	; 0x25
    1aca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1acc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ace:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e8       	ldi	r20, 0x80	; 128
    1ada:	5f e3       	ldi	r21, 0x3F	; 63
    1adc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae0:	88 23       	and	r24, r24
    1ae2:	2c f4       	brge	.+10     	; 0x1aee <LCD_vInit+0x28c>
		__ticks = 1;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	9a a3       	std	Y+34, r25	; 0x22
    1aea:	89 a3       	std	Y+33, r24	; 0x21
    1aec:	3f c0       	rjmp	.+126    	; 0x1b6c <LCD_vInit+0x30a>
	else if (__tmp > 65535)
    1aee:	6b a1       	ldd	r22, Y+35	; 0x23
    1af0:	7c a1       	ldd	r23, Y+36	; 0x24
    1af2:	8d a1       	ldd	r24, Y+37	; 0x25
    1af4:	9e a1       	ldd	r25, Y+38	; 0x26
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	57 e4       	ldi	r21, 0x47	; 71
    1afe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b02:	18 16       	cp	r1, r24
    1b04:	4c f5       	brge	.+82     	; 0x1b58 <LCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b06:	6f a1       	ldd	r22, Y+39	; 0x27
    1b08:	78 a5       	ldd	r23, Y+40	; 0x28
    1b0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e2       	ldi	r20, 0x20	; 32
    1b14:	51 e4       	ldi	r21, 0x41	; 65
    1b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	bc 01       	movw	r22, r24
    1b20:	cd 01       	movw	r24, r26
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	9a a3       	std	Y+34, r25	; 0x22
    1b2c:	89 a3       	std	Y+33, r24	; 0x21
    1b2e:	0f c0       	rjmp	.+30     	; 0x1b4e <LCD_vInit+0x2ec>
    1b30:	88 ec       	ldi	r24, 0xC8	; 200
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	98 a3       	std	Y+32, r25	; 0x20
    1b36:	8f 8f       	std	Y+31, r24	; 0x1f
    1b38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b3a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <LCD_vInit+0x2da>
    1b40:	98 a3       	std	Y+32, r25	; 0x20
    1b42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b44:	89 a1       	ldd	r24, Y+33	; 0x21
    1b46:	9a a1       	ldd	r25, Y+34	; 0x22
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	9a a3       	std	Y+34, r25	; 0x22
    1b4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b50:	9a a1       	ldd	r25, Y+34	; 0x22
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	69 f7       	brne	.-38     	; 0x1b30 <LCD_vInit+0x2ce>
    1b56:	14 c0       	rjmp	.+40     	; 0x1b80 <LCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b58:	6b a1       	ldd	r22, Y+35	; 0x23
    1b5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	9a a3       	std	Y+34, r25	; 0x22
    1b6a:	89 a3       	std	Y+33, r24	; 0x21
    1b6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b70:	9e 8f       	std	Y+30, r25	; 0x1e
    1b72:	8d 8f       	std	Y+29, r24	; 0x1d
    1b74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <LCD_vInit+0x316>
    1b7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	LCD_vSendCmd(CLEAR_COMMAND);
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_vSendCmd>
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a0 e2       	ldi	r26, 0x20	; 32
    1b8c:	b1 e4       	ldi	r27, 0x41	; 65
    1b8e:	89 8f       	std	Y+25, r24	; 0x19
    1b90:	9a 8f       	std	Y+26, r25	; 0x1a
    1b92:	ab 8f       	std	Y+27, r26	; 0x1b
    1b94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	69 8d       	ldd	r22, Y+25	; 0x19
    1b98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a ef       	ldi	r20, 0xFA	; 250
    1ba4:	54 e4       	ldi	r21, 0x44	; 68
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	8d 8b       	std	Y+21, r24	; 0x15
    1bb0:	9e 8b       	std	Y+22, r25	; 0x16
    1bb2:	af 8b       	std	Y+23, r26	; 0x17
    1bb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bba:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bca:	88 23       	and	r24, r24
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <LCD_vInit+0x376>
		__ticks = 1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9c 8b       	std	Y+20, r25	; 0x14
    1bd4:	8b 8b       	std	Y+19, r24	; 0x13
    1bd6:	3f c0       	rjmp	.+126    	; 0x1c56 <LCD_vInit+0x3f4>
	else if (__tmp > 65535)
    1bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bda:	7e 89       	ldd	r23, Y+22	; 0x16
    1bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bde:	98 8d       	ldd	r25, Y+24	; 0x18
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	3f ef       	ldi	r19, 0xFF	; 255
    1be4:	4f e7       	ldi	r20, 0x7F	; 127
    1be6:	57 e4       	ldi	r21, 0x47	; 71
    1be8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bec:	18 16       	cp	r1, r24
    1bee:	4c f5       	brge	.+82     	; 0x1c42 <LCD_vInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9c 8b       	std	Y+20, r25	; 0x14
    1c16:	8b 8b       	std	Y+19, r24	; 0x13
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <LCD_vInit+0x3d6>
    1c1a:	88 ec       	ldi	r24, 0xC8	; 200
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9a 8b       	std	Y+18, r25	; 0x12
    1c20:	89 8b       	std	Y+17, r24	; 0x11
    1c22:	89 89       	ldd	r24, Y+17	; 0x11
    1c24:	9a 89       	ldd	r25, Y+18	; 0x12
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <LCD_vInit+0x3c4>
    1c2a:	9a 8b       	std	Y+18, r25	; 0x12
    1c2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c30:	9c 89       	ldd	r25, Y+20	; 0x14
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	9c 8b       	std	Y+20, r25	; 0x14
    1c36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c38:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	69 f7       	brne	.-38     	; 0x1c1a <LCD_vInit+0x3b8>
    1c40:	14 c0       	rjmp	.+40     	; 0x1c6a <LCD_vInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c42:	6d 89       	ldd	r22, Y+21	; 0x15
    1c44:	7e 89       	ldd	r23, Y+22	; 0x16
    1c46:	8f 89       	ldd	r24, Y+23	; 0x17
    1c48:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9c 8b       	std	Y+20, r25	; 0x14
    1c54:	8b 8b       	std	Y+19, r24	; 0x13
    1c56:	8b 89       	ldd	r24, Y+19	; 0x13
    1c58:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5a:	98 8b       	std	Y+16, r25	; 0x10
    1c5c:	8f 87       	std	Y+15, r24	; 0x0f
    1c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c60:	98 89       	ldd	r25, Y+16	; 0x10
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_vInit+0x400>
    1c66:	98 8b       	std	Y+16, r25	; 0x10
    1c68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSendCmd(START_FROM_LEFT_NO_SHIFT);
    1c6a:	86 e0       	ldi	r24, 0x06	; 6
    1c6c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_vSendCmd>
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	a0 e2       	ldi	r26, 0x20	; 32
    1c76:	b1 e4       	ldi	r27, 0x41	; 65
    1c78:	8b 87       	std	Y+11, r24	; 0x0b
    1c7a:	9c 87       	std	Y+12, r25	; 0x0c
    1c7c:	ad 87       	std	Y+13, r26	; 0x0d
    1c7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	4a ef       	ldi	r20, 0xFA	; 250
    1c8e:	54 e4       	ldi	r21, 0x44	; 68
    1c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	8f 83       	std	Y+7, r24	; 0x07
    1c9a:	98 87       	std	Y+8, r25	; 0x08
    1c9c:	a9 87       	std	Y+9, r26	; 0x09
    1c9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca2:	78 85       	ldd	r23, Y+8	; 0x08
    1ca4:	89 85       	ldd	r24, Y+9	; 0x09
    1ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e8       	ldi	r20, 0x80	; 128
    1cae:	5f e3       	ldi	r21, 0x3F	; 63
    1cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb4:	88 23       	and	r24, r24
    1cb6:	2c f4       	brge	.+10     	; 0x1cc2 <LCD_vInit+0x460>
		__ticks = 1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
    1cc0:	3f c0       	rjmp	.+126    	; 0x1d40 <LCD_vInit+0x4de>
	else if (__tmp > 65535)
    1cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc4:	78 85       	ldd	r23, Y+8	; 0x08
    1cc6:	89 85       	ldd	r24, Y+9	; 0x09
    1cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	3f ef       	ldi	r19, 0xFF	; 255
    1cce:	4f e7       	ldi	r20, 0x7F	; 127
    1cd0:	57 e4       	ldi	r21, 0x47	; 71
    1cd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd6:	18 16       	cp	r1, r24
    1cd8:	4c f5       	brge	.+82     	; 0x1d2c <LCD_vInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e2       	ldi	r20, 0x20	; 32
    1ce8:	51 e4       	ldi	r21, 0x41	; 65
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	9e 83       	std	Y+6, r25	; 0x06
    1d00:	8d 83       	std	Y+5, r24	; 0x05
    1d02:	0f c0       	rjmp	.+30     	; 0x1d22 <LCD_vInit+0x4c0>
    1d04:	88 ec       	ldi	r24, 0xC8	; 200
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	9c 83       	std	Y+4, r25	; 0x04
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <LCD_vInit+0x4ae>
    1d14:	9c 83       	std	Y+4, r25	; 0x04
    1d16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	69 f7       	brne	.-38     	; 0x1d04 <LCD_vInit+0x4a2>
    1d2a:	14 c0       	rjmp	.+40     	; 0x1d54 <LCD_vInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2e:	78 85       	ldd	r23, Y+8	; 0x08
    1d30:	89 85       	ldd	r24, Y+9	; 0x09
    1d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9e 83       	std	Y+6, r25	; 0x06
    1d3e:	8d 83       	std	Y+5, r24	; 0x05
    1d40:	8d 81       	ldd	r24, Y+5	; 0x05
    1d42:	9e 81       	ldd	r25, Y+6	; 0x06
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <LCD_vInit+0x4ea>
    1d50:	9a 83       	std	Y+2, r25	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1d54:	ca 5b       	subi	r28, 0xBA	; 186
    1d56:	df 4f       	sbci	r29, 0xFF	; 255
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	08 95       	ret

00001d6c <LCD_vSendCmd>:

//Function to send a command to the LCD
void LCD_vSendCmd(u8 Copy_u8Command){
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	e9 97       	sbiw	r28, 0x39	; 57
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	89 af       	std	Y+57, r24	; 0x39
	DIO_vSetPinValue(LCD_CTRL_PORT, RS_PIN, LOW);
    1d82:	82 e0       	ldi	r24, 0x02	; 2
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
	DIO_vSetPinValue(LCD_CTRL_PORT, RW_PIN, LOW);
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	61 e0       	ldi	r22, 0x01	; 1
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a0 e2       	ldi	r26, 0x20	; 32
    1d9c:	b1 e4       	ldi	r27, 0x41	; 65
    1d9e:	8d ab       	std	Y+53, r24	; 0x35
    1da0:	9e ab       	std	Y+54, r25	; 0x36
    1da2:	af ab       	std	Y+55, r26	; 0x37
    1da4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da6:	6d a9       	ldd	r22, Y+53	; 0x35
    1da8:	7e a9       	ldd	r23, Y+54	; 0x36
    1daa:	8f a9       	ldd	r24, Y+55	; 0x37
    1dac:	98 ad       	ldd	r25, Y+56	; 0x38
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	4a ef       	ldi	r20, 0xFA	; 250
    1db4:	54 e4       	ldi	r21, 0x44	; 68
    1db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	89 ab       	std	Y+49, r24	; 0x31
    1dc0:	9a ab       	std	Y+50, r25	; 0x32
    1dc2:	ab ab       	std	Y+51, r26	; 0x33
    1dc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dca:	8b a9       	ldd	r24, Y+51	; 0x33
    1dcc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e8       	ldi	r20, 0x80	; 128
    1dd4:	5f e3       	ldi	r21, 0x3F	; 63
    1dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dda:	88 23       	and	r24, r24
    1ddc:	2c f4       	brge	.+10     	; 0x1de8 <LCD_vSendCmd+0x7c>
		__ticks = 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	98 ab       	std	Y+48, r25	; 0x30
    1de4:	8f a7       	std	Y+47, r24	; 0x2f
    1de6:	3f c0       	rjmp	.+126    	; 0x1e66 <LCD_vSendCmd+0xfa>
	else if (__tmp > 65535)
    1de8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dea:	7a a9       	ldd	r23, Y+50	; 0x32
    1dec:	8b a9       	ldd	r24, Y+51	; 0x33
    1dee:	9c a9       	ldd	r25, Y+52	; 0x34
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	3f ef       	ldi	r19, 0xFF	; 255
    1df4:	4f e7       	ldi	r20, 0x7F	; 127
    1df6:	57 e4       	ldi	r21, 0x47	; 71
    1df8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dfc:	18 16       	cp	r1, r24
    1dfe:	4c f5       	brge	.+82     	; 0x1e52 <LCD_vSendCmd+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e00:	6d a9       	ldd	r22, Y+53	; 0x35
    1e02:	7e a9       	ldd	r23, Y+54	; 0x36
    1e04:	8f a9       	ldd	r24, Y+55	; 0x37
    1e06:	98 ad       	ldd	r25, Y+56	; 0x38
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e2       	ldi	r20, 0x20	; 32
    1e0e:	51 e4       	ldi	r21, 0x41	; 65
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	bc 01       	movw	r22, r24
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	98 ab       	std	Y+48, r25	; 0x30
    1e26:	8f a7       	std	Y+47, r24	; 0x2f
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <LCD_vSendCmd+0xdc>
    1e2a:	88 ec       	ldi	r24, 0xC8	; 200
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	9e a7       	std	Y+46, r25	; 0x2e
    1e30:	8d a7       	std	Y+45, r24	; 0x2d
    1e32:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e34:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <LCD_vSendCmd+0xca>
    1e3a:	9e a7       	std	Y+46, r25	; 0x2e
    1e3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e40:	98 a9       	ldd	r25, Y+48	; 0x30
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	98 ab       	std	Y+48, r25	; 0x30
    1e46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	69 f7       	brne	.-38     	; 0x1e2a <LCD_vSendCmd+0xbe>
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <LCD_vSendCmd+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e52:	69 a9       	ldd	r22, Y+49	; 0x31
    1e54:	7a a9       	ldd	r23, Y+50	; 0x32
    1e56:	8b a9       	ldd	r24, Y+51	; 0x33
    1e58:	9c a9       	ldd	r25, Y+52	; 0x34
    1e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	98 ab       	std	Y+48, r25	; 0x30
    1e64:	8f a7       	std	Y+47, r24	; 0x2f
    1e66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e68:	98 a9       	ldd	r25, Y+48	; 0x30
    1e6a:	9c a7       	std	Y+44, r25	; 0x2c
    1e6c:	8b a7       	std	Y+43, r24	; 0x2b
    1e6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e70:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_vSendCmd+0x106>
    1e76:	9c a7       	std	Y+44, r25	; 0x2c
    1e78:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CTRL_PORT, EN_PIN, HIGH);
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	62 e0       	ldi	r22, 0x02	; 2
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a0 e2       	ldi	r26, 0x20	; 32
    1e8a:	b1 e4       	ldi	r27, 0x41	; 65
    1e8c:	8f a3       	std	Y+39, r24	; 0x27
    1e8e:	98 a7       	std	Y+40, r25	; 0x28
    1e90:	a9 a7       	std	Y+41, r26	; 0x29
    1e92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e94:	6f a1       	ldd	r22, Y+39	; 0x27
    1e96:	78 a5       	ldd	r23, Y+40	; 0x28
    1e98:	89 a5       	ldd	r24, Y+41	; 0x29
    1e9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a ef       	ldi	r20, 0xFA	; 250
    1ea2:	54 e4       	ldi	r21, 0x44	; 68
    1ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8b a3       	std	Y+35, r24	; 0x23
    1eae:	9c a3       	std	Y+36, r25	; 0x24
    1eb0:	ad a3       	std	Y+37, r26	; 0x25
    1eb2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eba:	9e a1       	ldd	r25, Y+38	; 0x26
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <LCD_vSendCmd+0x16a>
		__ticks = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9a a3       	std	Y+34, r25	; 0x22
    1ed2:	89 a3       	std	Y+33, r24	; 0x21
    1ed4:	3f c0       	rjmp	.+126    	; 0x1f54 <LCD_vSendCmd+0x1e8>
	else if (__tmp > 65535)
    1ed6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eda:	8d a1       	ldd	r24, Y+37	; 0x25
    1edc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	3f ef       	ldi	r19, 0xFF	; 255
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	57 e4       	ldi	r21, 0x47	; 71
    1ee6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eea:	18 16       	cp	r1, r24
    1eec:	4c f5       	brge	.+82     	; 0x1f40 <LCD_vSendCmd+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e2       	ldi	r20, 0x20	; 32
    1efc:	51 e4       	ldi	r21, 0x41	; 65
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	bc 01       	movw	r22, r24
    1f08:	cd 01       	movw	r24, r26
    1f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9a a3       	std	Y+34, r25	; 0x22
    1f14:	89 a3       	std	Y+33, r24	; 0x21
    1f16:	0f c0       	rjmp	.+30     	; 0x1f36 <LCD_vSendCmd+0x1ca>
    1f18:	88 ec       	ldi	r24, 0xC8	; 200
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	98 a3       	std	Y+32, r25	; 0x20
    1f1e:	8f 8f       	std	Y+31, r24	; 0x1f
    1f20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f22:	98 a1       	ldd	r25, Y+32	; 0x20
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <LCD_vSendCmd+0x1b8>
    1f28:	98 a3       	std	Y+32, r25	; 0x20
    1f2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	9a a3       	std	Y+34, r25	; 0x22
    1f34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f36:	89 a1       	ldd	r24, Y+33	; 0x21
    1f38:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	69 f7       	brne	.-38     	; 0x1f18 <LCD_vSendCmd+0x1ac>
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <LCD_vSendCmd+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f40:	6b a1       	ldd	r22, Y+35	; 0x23
    1f42:	7c a1       	ldd	r23, Y+36	; 0x24
    1f44:	8d a1       	ldd	r24, Y+37	; 0x25
    1f46:	9e a1       	ldd	r25, Y+38	; 0x26
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9a a3       	std	Y+34, r25	; 0x22
    1f52:	89 a3       	std	Y+33, r24	; 0x21
    1f54:	89 a1       	ldd	r24, Y+33	; 0x21
    1f56:	9a a1       	ldd	r25, Y+34	; 0x22
    1f58:	9e 8f       	std	Y+30, r25	; 0x1e
    1f5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <LCD_vSendCmd+0x1f4>
    1f64:	9e 8f       	std	Y+30, r25	; 0x1e
    1f66:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	DIO_vSetGroupValue(LCD_DATA_PORT, Copy_u8Command);
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	69 ad       	ldd	r22, Y+57	; 0x39
    1f6c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_vSetGroupValue>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e2       	ldi	r26, 0x20	; 32
    1f76:	b1 e4       	ldi	r27, 0x41	; 65
    1f78:	89 8f       	std	Y+25, r24	; 0x19
    1f7a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f7c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	69 8d       	ldd	r22, Y+25	; 0x19
    1f82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a ef       	ldi	r20, 0xFA	; 250
    1f8e:	54 e4       	ldi	r21, 0x44	; 68
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8d 8b       	std	Y+21, r24	; 0x15
    1f9a:	9e 8b       	std	Y+22, r25	; 0x16
    1f9c:	af 8b       	std	Y+23, r26	; 0x17
    1f9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fa0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <LCD_vSendCmd+0x256>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 8b       	std	Y+20, r25	; 0x14
    1fbe:	8b 8b       	std	Y+19, r24	; 0x13
    1fc0:	3f c0       	rjmp	.+126    	; 0x2040 <LCD_vSendCmd+0x2d4>
	else if (__tmp > 65535)
    1fc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	4c f5       	brge	.+82     	; 0x202c <LCD_vSendCmd+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	69 8d       	ldd	r22, Y+25	; 0x19
    1fdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9c 8b       	std	Y+20, r25	; 0x14
    2000:	8b 8b       	std	Y+19, r24	; 0x13
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <LCD_vSendCmd+0x2b6>
    2004:	88 ec       	ldi	r24, 0xC8	; 200
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9a 8b       	std	Y+18, r25	; 0x12
    200a:	89 8b       	std	Y+17, r24	; 0x11
    200c:	89 89       	ldd	r24, Y+17	; 0x11
    200e:	9a 89       	ldd	r25, Y+18	; 0x12
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <LCD_vSendCmd+0x2a4>
    2014:	9a 8b       	std	Y+18, r25	; 0x12
    2016:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	8b 89       	ldd	r24, Y+19	; 0x13
    201a:	9c 89       	ldd	r25, Y+20	; 0x14
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	9c 8b       	std	Y+20, r25	; 0x14
    2020:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	69 f7       	brne	.-38     	; 0x2004 <LCD_vSendCmd+0x298>
    202a:	14 c0       	rjmp	.+40     	; 0x2054 <LCD_vSendCmd+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	6d 89       	ldd	r22, Y+21	; 0x15
    202e:	7e 89       	ldd	r23, Y+22	; 0x16
    2030:	8f 89       	ldd	r24, Y+23	; 0x17
    2032:	98 8d       	ldd	r25, Y+24	; 0x18
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9c 8b       	std	Y+20, r25	; 0x14
    203e:	8b 8b       	std	Y+19, r24	; 0x13
    2040:	8b 89       	ldd	r24, Y+19	; 0x13
    2042:	9c 89       	ldd	r25, Y+20	; 0x14
    2044:	98 8b       	std	Y+16, r25	; 0x10
    2046:	8f 87       	std	Y+15, r24	; 0x0f
    2048:	8f 85       	ldd	r24, Y+15	; 0x0f
    204a:	98 89       	ldd	r25, Y+16	; 0x10
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_vSendCmd+0x2e0>
    2050:	98 8b       	std	Y+16, r25	; 0x10
    2052:	8f 87       	std	Y+15, r24	; 0x0f
	//PORTD_REG = Copy_u8Command;
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CTRL_PORT, EN_PIN, LOW);
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	62 e0       	ldi	r22, 0x02	; 2
    2058:	40 e0       	ldi	r20, 0x00	; 0
    205a:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	a0 e2       	ldi	r26, 0x20	; 32
    2064:	b1 e4       	ldi	r27, 0x41	; 65
    2066:	8b 87       	std	Y+11, r24	; 0x0b
    2068:	9c 87       	std	Y+12, r25	; 0x0c
    206a:	ad 87       	std	Y+13, r26	; 0x0d
    206c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2070:	7c 85       	ldd	r23, Y+12	; 0x0c
    2072:	8d 85       	ldd	r24, Y+13	; 0x0d
    2074:	9e 85       	ldd	r25, Y+14	; 0x0e
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	4a ef       	ldi	r20, 0xFA	; 250
    207c:	54 e4       	ldi	r21, 0x44	; 68
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	8f 83       	std	Y+7, r24	; 0x07
    2088:	98 87       	std	Y+8, r25	; 0x08
    208a:	a9 87       	std	Y+9, r26	; 0x09
    208c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    208e:	6f 81       	ldd	r22, Y+7	; 0x07
    2090:	78 85       	ldd	r23, Y+8	; 0x08
    2092:	89 85       	ldd	r24, Y+9	; 0x09
    2094:	9a 85       	ldd	r25, Y+10	; 0x0a
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e8       	ldi	r20, 0x80	; 128
    209c:	5f e3       	ldi	r21, 0x3F	; 63
    209e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a2:	88 23       	and	r24, r24
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <LCD_vSendCmd+0x344>
		__ticks = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
    20ae:	3f c0       	rjmp	.+126    	; 0x212e <LCD_vSendCmd+0x3c2>
	else if (__tmp > 65535)
    20b0:	6f 81       	ldd	r22, Y+7	; 0x07
    20b2:	78 85       	ldd	r23, Y+8	; 0x08
    20b4:	89 85       	ldd	r24, Y+9	; 0x09
    20b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	3f ef       	ldi	r19, 0xFF	; 255
    20bc:	4f e7       	ldi	r20, 0x7F	; 127
    20be:	57 e4       	ldi	r21, 0x47	; 71
    20c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	4c f5       	brge	.+82     	; 0x211a <LCD_vSendCmd+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    20cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e2       	ldi	r20, 0x20	; 32
    20d6:	51 e4       	ldi	r21, 0x41	; 65
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
    20f0:	0f c0       	rjmp	.+30     	; 0x2110 <LCD_vSendCmd+0x3a4>
    20f2:	88 ec       	ldi	r24, 0xC8	; 200
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <LCD_vSendCmd+0x392>
    2102:	9c 83       	std	Y+4, r25	; 0x04
    2104:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	69 f7       	brne	.-38     	; 0x20f2 <LCD_vSendCmd+0x386>
    2118:	14 c0       	rjmp	.+40     	; 0x2142 <LCD_vSendCmd+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211a:	6f 81       	ldd	r22, Y+7	; 0x07
    211c:	78 85       	ldd	r23, Y+8	; 0x08
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	8d 83       	std	Y+5, r24	; 0x05
    212e:	8d 81       	ldd	r24, Y+5	; 0x05
    2130:	9e 81       	ldd	r25, Y+6	; 0x06
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_vSendCmd+0x3ce>
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2142:	e9 96       	adiw	r28, 0x39	; 57
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <LCD_vDisplayChar>:

//Function to display a character on the LCD
void LCD_vDisplayChar(u8 Copy_u8Character){
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	e9 97       	sbiw	r28, 0x39	; 57
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	89 af       	std	Y+57, r24	; 0x39
	DIO_vSetPinValue(LCD_CTRL_PORT, RS_PIN, HIGH);
    216a:	82 e0       	ldi	r24, 0x02	; 2
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
	DIO_vSetPinValue(LCD_CTRL_PORT, RW_PIN, LOW);
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	61 e0       	ldi	r22, 0x01	; 1
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	a0 e2       	ldi	r26, 0x20	; 32
    2184:	b1 e4       	ldi	r27, 0x41	; 65
    2186:	8d ab       	std	Y+53, r24	; 0x35
    2188:	9e ab       	std	Y+54, r25	; 0x36
    218a:	af ab       	std	Y+55, r26	; 0x37
    218c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218e:	6d a9       	ldd	r22, Y+53	; 0x35
    2190:	7e a9       	ldd	r23, Y+54	; 0x36
    2192:	8f a9       	ldd	r24, Y+55	; 0x37
    2194:	98 ad       	ldd	r25, Y+56	; 0x38
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	4a ef       	ldi	r20, 0xFA	; 250
    219c:	54 e4       	ldi	r21, 0x44	; 68
    219e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	89 ab       	std	Y+49, r24	; 0x31
    21a8:	9a ab       	std	Y+50, r25	; 0x32
    21aa:	ab ab       	std	Y+51, r26	; 0x33
    21ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21ae:	69 a9       	ldd	r22, Y+49	; 0x31
    21b0:	7a a9       	ldd	r23, Y+50	; 0x32
    21b2:	8b a9       	ldd	r24, Y+51	; 0x33
    21b4:	9c a9       	ldd	r25, Y+52	; 0x34
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e8       	ldi	r20, 0x80	; 128
    21bc:	5f e3       	ldi	r21, 0x3F	; 63
    21be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c2:	88 23       	and	r24, r24
    21c4:	2c f4       	brge	.+10     	; 0x21d0 <LCD_vDisplayChar+0x7c>
		__ticks = 1;
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	98 ab       	std	Y+48, r25	; 0x30
    21cc:	8f a7       	std	Y+47, r24	; 0x2f
    21ce:	3f c0       	rjmp	.+126    	; 0x224e <LCD_vDisplayChar+0xfa>
	else if (__tmp > 65535)
    21d0:	69 a9       	ldd	r22, Y+49	; 0x31
    21d2:	7a a9       	ldd	r23, Y+50	; 0x32
    21d4:	8b a9       	ldd	r24, Y+51	; 0x33
    21d6:	9c a9       	ldd	r25, Y+52	; 0x34
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	3f ef       	ldi	r19, 0xFF	; 255
    21dc:	4f e7       	ldi	r20, 0x7F	; 127
    21de:	57 e4       	ldi	r21, 0x47	; 71
    21e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e4:	18 16       	cp	r1, r24
    21e6:	4c f5       	brge	.+82     	; 0x223a <LCD_vDisplayChar+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e8:	6d a9       	ldd	r22, Y+53	; 0x35
    21ea:	7e a9       	ldd	r23, Y+54	; 0x36
    21ec:	8f a9       	ldd	r24, Y+55	; 0x37
    21ee:	98 ad       	ldd	r25, Y+56	; 0x38
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e2       	ldi	r20, 0x20	; 32
    21f6:	51 e4       	ldi	r21, 0x41	; 65
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	bc 01       	movw	r22, r24
    2202:	cd 01       	movw	r24, r26
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	98 ab       	std	Y+48, r25	; 0x30
    220e:	8f a7       	std	Y+47, r24	; 0x2f
    2210:	0f c0       	rjmp	.+30     	; 0x2230 <LCD_vDisplayChar+0xdc>
    2212:	88 ec       	ldi	r24, 0xC8	; 200
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9e a7       	std	Y+46, r25	; 0x2e
    2218:	8d a7       	std	Y+45, r24	; 0x2d
    221a:	8d a5       	ldd	r24, Y+45	; 0x2d
    221c:	9e a5       	ldd	r25, Y+46	; 0x2e
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <LCD_vDisplayChar+0xca>
    2222:	9e a7       	std	Y+46, r25	; 0x2e
    2224:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2226:	8f a5       	ldd	r24, Y+47	; 0x2f
    2228:	98 a9       	ldd	r25, Y+48	; 0x30
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	98 ab       	std	Y+48, r25	; 0x30
    222e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2230:	8f a5       	ldd	r24, Y+47	; 0x2f
    2232:	98 a9       	ldd	r25, Y+48	; 0x30
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	69 f7       	brne	.-38     	; 0x2212 <LCD_vDisplayChar+0xbe>
    2238:	14 c0       	rjmp	.+40     	; 0x2262 <LCD_vDisplayChar+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223a:	69 a9       	ldd	r22, Y+49	; 0x31
    223c:	7a a9       	ldd	r23, Y+50	; 0x32
    223e:	8b a9       	ldd	r24, Y+51	; 0x33
    2240:	9c a9       	ldd	r25, Y+52	; 0x34
    2242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	98 ab       	std	Y+48, r25	; 0x30
    224c:	8f a7       	std	Y+47, r24	; 0x2f
    224e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2250:	98 a9       	ldd	r25, Y+48	; 0x30
    2252:	9c a7       	std	Y+44, r25	; 0x2c
    2254:	8b a7       	std	Y+43, r24	; 0x2b
    2256:	8b a5       	ldd	r24, Y+43	; 0x2b
    2258:	9c a5       	ldd	r25, Y+44	; 0x2c
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <LCD_vDisplayChar+0x106>
    225e:	9c a7       	std	Y+44, r25	; 0x2c
    2260:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CTRL_PORT, EN_PIN, HIGH);
    2262:	82 e0       	ldi	r24, 0x02	; 2
    2264:	62 e0       	ldi	r22, 0x02	; 2
    2266:	41 e0       	ldi	r20, 0x01	; 1
    2268:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	a0 e2       	ldi	r26, 0x20	; 32
    2272:	b1 e4       	ldi	r27, 0x41	; 65
    2274:	8f a3       	std	Y+39, r24	; 0x27
    2276:	98 a7       	std	Y+40, r25	; 0x28
    2278:	a9 a7       	std	Y+41, r26	; 0x29
    227a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227c:	6f a1       	ldd	r22, Y+39	; 0x27
    227e:	78 a5       	ldd	r23, Y+40	; 0x28
    2280:	89 a5       	ldd	r24, Y+41	; 0x29
    2282:	9a a5       	ldd	r25, Y+42	; 0x2a
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	4a ef       	ldi	r20, 0xFA	; 250
    228a:	54 e4       	ldi	r21, 0x44	; 68
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	8b a3       	std	Y+35, r24	; 0x23
    2296:	9c a3       	std	Y+36, r25	; 0x24
    2298:	ad a3       	std	Y+37, r26	; 0x25
    229a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    229c:	6b a1       	ldd	r22, Y+35	; 0x23
    229e:	7c a1       	ldd	r23, Y+36	; 0x24
    22a0:	8d a1       	ldd	r24, Y+37	; 0x25
    22a2:	9e a1       	ldd	r25, Y+38	; 0x26
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	40 e8       	ldi	r20, 0x80	; 128
    22aa:	5f e3       	ldi	r21, 0x3F	; 63
    22ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b0:	88 23       	and	r24, r24
    22b2:	2c f4       	brge	.+10     	; 0x22be <LCD_vDisplayChar+0x16a>
		__ticks = 1;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9a a3       	std	Y+34, r25	; 0x22
    22ba:	89 a3       	std	Y+33, r24	; 0x21
    22bc:	3f c0       	rjmp	.+126    	; 0x233c <LCD_vDisplayChar+0x1e8>
	else if (__tmp > 65535)
    22be:	6b a1       	ldd	r22, Y+35	; 0x23
    22c0:	7c a1       	ldd	r23, Y+36	; 0x24
    22c2:	8d a1       	ldd	r24, Y+37	; 0x25
    22c4:	9e a1       	ldd	r25, Y+38	; 0x26
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	3f ef       	ldi	r19, 0xFF	; 255
    22ca:	4f e7       	ldi	r20, 0x7F	; 127
    22cc:	57 e4       	ldi	r21, 0x47	; 71
    22ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d2:	18 16       	cp	r1, r24
    22d4:	4c f5       	brge	.+82     	; 0x2328 <LCD_vDisplayChar+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d6:	6f a1       	ldd	r22, Y+39	; 0x27
    22d8:	78 a5       	ldd	r23, Y+40	; 0x28
    22da:	89 a5       	ldd	r24, Y+41	; 0x29
    22dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e2       	ldi	r20, 0x20	; 32
    22e4:	51 e4       	ldi	r21, 0x41	; 65
    22e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	bc 01       	movw	r22, r24
    22f0:	cd 01       	movw	r24, r26
    22f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	9a a3       	std	Y+34, r25	; 0x22
    22fc:	89 a3       	std	Y+33, r24	; 0x21
    22fe:	0f c0       	rjmp	.+30     	; 0x231e <LCD_vDisplayChar+0x1ca>
    2300:	88 ec       	ldi	r24, 0xC8	; 200
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	98 a3       	std	Y+32, r25	; 0x20
    2306:	8f 8f       	std	Y+31, r24	; 0x1f
    2308:	8f 8d       	ldd	r24, Y+31	; 0x1f
    230a:	98 a1       	ldd	r25, Y+32	; 0x20
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <LCD_vDisplayChar+0x1b8>
    2310:	98 a3       	std	Y+32, r25	; 0x20
    2312:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2314:	89 a1       	ldd	r24, Y+33	; 0x21
    2316:	9a a1       	ldd	r25, Y+34	; 0x22
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	9a a3       	std	Y+34, r25	; 0x22
    231c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231e:	89 a1       	ldd	r24, Y+33	; 0x21
    2320:	9a a1       	ldd	r25, Y+34	; 0x22
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	69 f7       	brne	.-38     	; 0x2300 <LCD_vDisplayChar+0x1ac>
    2326:	14 c0       	rjmp	.+40     	; 0x2350 <LCD_vDisplayChar+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2328:	6b a1       	ldd	r22, Y+35	; 0x23
    232a:	7c a1       	ldd	r23, Y+36	; 0x24
    232c:	8d a1       	ldd	r24, Y+37	; 0x25
    232e:	9e a1       	ldd	r25, Y+38	; 0x26
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9a a3       	std	Y+34, r25	; 0x22
    233a:	89 a3       	std	Y+33, r24	; 0x21
    233c:	89 a1       	ldd	r24, Y+33	; 0x21
    233e:	9a a1       	ldd	r25, Y+34	; 0x22
    2340:	9e 8f       	std	Y+30, r25	; 0x1e
    2342:	8d 8f       	std	Y+29, r24	; 0x1d
    2344:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2346:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <LCD_vDisplayChar+0x1f4>
    234c:	9e 8f       	std	Y+30, r25	; 0x1e
    234e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	DIO_vSetGroupValue(LCD_DATA_PORT, Copy_u8Character);
    2350:	83 e0       	ldi	r24, 0x03	; 3
    2352:	69 ad       	ldd	r22, Y+57	; 0x39
    2354:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_vSetGroupValue>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a0 e2       	ldi	r26, 0x20	; 32
    235e:	b1 e4       	ldi	r27, 0x41	; 65
    2360:	89 8f       	std	Y+25, r24	; 0x19
    2362:	9a 8f       	std	Y+26, r25	; 0x1a
    2364:	ab 8f       	std	Y+27, r26	; 0x1b
    2366:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2368:	69 8d       	ldd	r22, Y+25	; 0x19
    236a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a ef       	ldi	r20, 0xFA	; 250
    2376:	54 e4       	ldi	r21, 0x44	; 68
    2378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	8d 8b       	std	Y+21, r24	; 0x15
    2382:	9e 8b       	std	Y+22, r25	; 0x16
    2384:	af 8b       	std	Y+23, r26	; 0x17
    2386:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2388:	6d 89       	ldd	r22, Y+21	; 0x15
    238a:	7e 89       	ldd	r23, Y+22	; 0x16
    238c:	8f 89       	ldd	r24, Y+23	; 0x17
    238e:	98 8d       	ldd	r25, Y+24	; 0x18
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239c:	88 23       	and	r24, r24
    239e:	2c f4       	brge	.+10     	; 0x23aa <LCD_vDisplayChar+0x256>
		__ticks = 1;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9c 8b       	std	Y+20, r25	; 0x14
    23a6:	8b 8b       	std	Y+19, r24	; 0x13
    23a8:	3f c0       	rjmp	.+126    	; 0x2428 <LCD_vDisplayChar+0x2d4>
	else if (__tmp > 65535)
    23aa:	6d 89       	ldd	r22, Y+21	; 0x15
    23ac:	7e 89       	ldd	r23, Y+22	; 0x16
    23ae:	8f 89       	ldd	r24, Y+23	; 0x17
    23b0:	98 8d       	ldd	r25, Y+24	; 0x18
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	3f ef       	ldi	r19, 0xFF	; 255
    23b6:	4f e7       	ldi	r20, 0x7F	; 127
    23b8:	57 e4       	ldi	r21, 0x47	; 71
    23ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23be:	18 16       	cp	r1, r24
    23c0:	4c f5       	brge	.+82     	; 0x2414 <LCD_vDisplayChar+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c2:	69 8d       	ldd	r22, Y+25	; 0x19
    23c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e2       	ldi	r20, 0x20	; 32
    23d0:	51 e4       	ldi	r21, 0x41	; 65
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	9c 8b       	std	Y+20, r25	; 0x14
    23e8:	8b 8b       	std	Y+19, r24	; 0x13
    23ea:	0f c0       	rjmp	.+30     	; 0x240a <LCD_vDisplayChar+0x2b6>
    23ec:	88 ec       	ldi	r24, 0xC8	; 200
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9a 8b       	std	Y+18, r25	; 0x12
    23f2:	89 8b       	std	Y+17, r24	; 0x11
    23f4:	89 89       	ldd	r24, Y+17	; 0x11
    23f6:	9a 89       	ldd	r25, Y+18	; 0x12
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <LCD_vDisplayChar+0x2a4>
    23fc:	9a 8b       	std	Y+18, r25	; 0x12
    23fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2400:	8b 89       	ldd	r24, Y+19	; 0x13
    2402:	9c 89       	ldd	r25, Y+20	; 0x14
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	9c 8b       	std	Y+20, r25	; 0x14
    2408:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240a:	8b 89       	ldd	r24, Y+19	; 0x13
    240c:	9c 89       	ldd	r25, Y+20	; 0x14
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	69 f7       	brne	.-38     	; 0x23ec <LCD_vDisplayChar+0x298>
    2412:	14 c0       	rjmp	.+40     	; 0x243c <LCD_vDisplayChar+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2414:	6d 89       	ldd	r22, Y+21	; 0x15
    2416:	7e 89       	ldd	r23, Y+22	; 0x16
    2418:	8f 89       	ldd	r24, Y+23	; 0x17
    241a:	98 8d       	ldd	r25, Y+24	; 0x18
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9c 8b       	std	Y+20, r25	; 0x14
    2426:	8b 8b       	std	Y+19, r24	; 0x13
    2428:	8b 89       	ldd	r24, Y+19	; 0x13
    242a:	9c 89       	ldd	r25, Y+20	; 0x14
    242c:	98 8b       	std	Y+16, r25	; 0x10
    242e:	8f 87       	std	Y+15, r24	; 0x0f
    2430:	8f 85       	ldd	r24, Y+15	; 0x0f
    2432:	98 89       	ldd	r25, Y+16	; 0x10
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <LCD_vDisplayChar+0x2e0>
    2438:	98 8b       	std	Y+16, r25	; 0x10
    243a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CTRL_PORT, EN_PIN, LOW);
    243c:	82 e0       	ldi	r24, 0x02	; 2
    243e:	62 e0       	ldi	r22, 0x02	; 2
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	a0 e2       	ldi	r26, 0x20	; 32
    244c:	b1 e4       	ldi	r27, 0x41	; 65
    244e:	8b 87       	std	Y+11, r24	; 0x0b
    2450:	9c 87       	std	Y+12, r25	; 0x0c
    2452:	ad 87       	std	Y+13, r26	; 0x0d
    2454:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2456:	6b 85       	ldd	r22, Y+11	; 0x0b
    2458:	7c 85       	ldd	r23, Y+12	; 0x0c
    245a:	8d 85       	ldd	r24, Y+13	; 0x0d
    245c:	9e 85       	ldd	r25, Y+14	; 0x0e
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	4a ef       	ldi	r20, 0xFA	; 250
    2464:	54 e4       	ldi	r21, 0x44	; 68
    2466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	8f 83       	std	Y+7, r24	; 0x07
    2470:	98 87       	std	Y+8, r25	; 0x08
    2472:	a9 87       	std	Y+9, r26	; 0x09
    2474:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2476:	6f 81       	ldd	r22, Y+7	; 0x07
    2478:	78 85       	ldd	r23, Y+8	; 0x08
    247a:	89 85       	ldd	r24, Y+9	; 0x09
    247c:	9a 85       	ldd	r25, Y+10	; 0x0a
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e8       	ldi	r20, 0x80	; 128
    2484:	5f e3       	ldi	r21, 0x3F	; 63
    2486:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    248a:	88 23       	and	r24, r24
    248c:	2c f4       	brge	.+10     	; 0x2498 <LCD_vDisplayChar+0x344>
		__ticks = 1;
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	9e 83       	std	Y+6, r25	; 0x06
    2494:	8d 83       	std	Y+5, r24	; 0x05
    2496:	3f c0       	rjmp	.+126    	; 0x2516 <LCD_vDisplayChar+0x3c2>
	else if (__tmp > 65535)
    2498:	6f 81       	ldd	r22, Y+7	; 0x07
    249a:	78 85       	ldd	r23, Y+8	; 0x08
    249c:	89 85       	ldd	r24, Y+9	; 0x09
    249e:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	3f ef       	ldi	r19, 0xFF	; 255
    24a4:	4f e7       	ldi	r20, 0x7F	; 127
    24a6:	57 e4       	ldi	r21, 0x47	; 71
    24a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ac:	18 16       	cp	r1, r24
    24ae:	4c f5       	brge	.+82     	; 0x2502 <LCD_vDisplayChar+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e2       	ldi	r20, 0x20	; 32
    24be:	51 e4       	ldi	r21, 0x41	; 65
    24c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	bc 01       	movw	r22, r24
    24ca:	cd 01       	movw	r24, r26
    24cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9e 83       	std	Y+6, r25	; 0x06
    24d6:	8d 83       	std	Y+5, r24	; 0x05
    24d8:	0f c0       	rjmp	.+30     	; 0x24f8 <LCD_vDisplayChar+0x3a4>
    24da:	88 ec       	ldi	r24, 0xC8	; 200
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	9c 83       	std	Y+4, r25	; 0x04
    24e0:	8b 83       	std	Y+3, r24	; 0x03
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <LCD_vDisplayChar+0x392>
    24ea:	9c 83       	std	Y+4, r25	; 0x04
    24ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ee:	8d 81       	ldd	r24, Y+5	; 0x05
    24f0:	9e 81       	ldd	r25, Y+6	; 0x06
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	9e 83       	std	Y+6, r25	; 0x06
    24f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f8:	8d 81       	ldd	r24, Y+5	; 0x05
    24fa:	9e 81       	ldd	r25, Y+6	; 0x06
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	69 f7       	brne	.-38     	; 0x24da <LCD_vDisplayChar+0x386>
    2500:	14 c0       	rjmp	.+40     	; 0x252a <LCD_vDisplayChar+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2502:	6f 81       	ldd	r22, Y+7	; 0x07
    2504:	78 85       	ldd	r23, Y+8	; 0x08
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	9e 83       	std	Y+6, r25	; 0x06
    2514:	8d 83       	std	Y+5, r24	; 0x05
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	9e 81       	ldd	r25, Y+6	; 0x06
    251a:	9a 83       	std	Y+2, r25	; 0x02
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	9a 81       	ldd	r25, Y+2	; 0x02
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_vDisplayChar+0x3ce>
    2526:	9a 83       	std	Y+2, r25	; 0x02
    2528:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    252a:	e9 96       	adiw	r28, 0x39	; 57
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <LCD_vDisplayString>:

//Function to display a string on the LCD
void LCD_vDisplayString(u8 *Copy_u8String){
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	00 d0       	rcall	.+0      	; 0x2542 <LCD_vDisplayString+0x6>
    2542:	00 d0       	rcall	.+0      	; 0x2544 <LCD_vDisplayString+0x8>
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;Copy_u8String[i]!='\0';i++)
    254c:	1a 82       	std	Y+2, r1	; 0x02
    254e:	19 82       	std	Y+1, r1	; 0x01
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <LCD_vDisplayString+0x34>
	{
		LCD_vDisplayChar(Copy_u8String[i]);
    2552:	29 81       	ldd	r18, Y+1	; 0x01
    2554:	3a 81       	ldd	r19, Y+2	; 0x02
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	9c 81       	ldd	r25, Y+4	; 0x04
    255a:	fc 01       	movw	r30, r24
    255c:	e2 0f       	add	r30, r18
    255e:	f3 1f       	adc	r31, r19
    2560:	80 81       	ld	r24, Z
    2562:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vDisplayChar>
	_delay_ms(10);
}

//Function to display a string on the LCD
void LCD_vDisplayString(u8 *Copy_u8String){
	for(int i=0;Copy_u8String[i]!='\0';i++)
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	01 96       	adiw	r24, 0x01	; 1
    256c:	9a 83       	std	Y+2, r25	; 0x02
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	29 81       	ldd	r18, Y+1	; 0x01
    2572:	3a 81       	ldd	r19, Y+2	; 0x02
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	9c 81       	ldd	r25, Y+4	; 0x04
    2578:	fc 01       	movw	r30, r24
    257a:	e2 0f       	add	r30, r18
    257c:	f3 1f       	adc	r31, r19
    257e:	80 81       	ld	r24, Z
    2580:	88 23       	and	r24, r24
    2582:	39 f7       	brne	.-50     	; 0x2552 <LCD_vDisplayString+0x16>
	{
		LCD_vDisplayChar(Copy_u8String[i]);
	}
}
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <LCD_vDisplayNumber>:

//Function to display a number on the LCD
void LCD_vDisplayNumber(u16 Copy_u8Number){
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	2b 97       	sbiw	r28, 0x0b	; 11
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	de bf       	out	0x3e, r29	; 62
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	cd bf       	out	0x3d, r28	; 61
    25a6:	9b 87       	std	Y+11, r25	; 0x0b
    25a8:	8a 87       	std	Y+10, r24	; 0x0a
	if(Copy_u8Number == 0)
    25aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	21 f4       	brne	.+8      	; 0x25ba <LCD_vDisplayNumber+0x28>
	{
		LCD_vDisplayChar('0');
    25b2:	80 e3       	ldi	r24, 0x30	; 48
    25b4:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vDisplayChar>
    25b8:	40 c0       	rjmp	.+128    	; 0x263a <LCD_vDisplayNumber+0xa8>
	}
	else
	{
		u8 Local_u8TempNumber;
		u8 Array[5];
		u8 j=0;
    25ba:	1b 82       	std	Y+3, r1	; 0x03
    25bc:	1f c0       	rjmp	.+62     	; 0x25fc <LCD_vDisplayNumber+0x6a>
		while(Copy_u8Number != 0)
		{
			Local_u8TempNumber = Copy_u8Number%10;
    25be:	8a 85       	ldd	r24, Y+10	; 0x0a
    25c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25c2:	2a e0       	ldi	r18, 0x0A	; 10
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	b9 01       	movw	r22, r18
    25c8:	0e 94 77 23 	call	0x46ee	; 0x46ee <__udivmodhi4>
    25cc:	8c 83       	std	Y+4, r24	; 0x04
			Copy_u8Number /= 10;
    25ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d2:	2a e0       	ldi	r18, 0x0A	; 10
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	b9 01       	movw	r22, r18
    25d8:	0e 94 77 23 	call	0x46ee	; 0x46ee <__udivmodhi4>
    25dc:	cb 01       	movw	r24, r22
    25de:	9b 87       	std	Y+11, r25	; 0x0b
    25e0:	8a 87       	std	Y+10, r24	; 0x0a
			Array[j] = Local_u8TempNumber;
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	ce 01       	movw	r24, r28
    25ea:	05 96       	adiw	r24, 0x05	; 5
    25ec:	fc 01       	movw	r30, r24
    25ee:	e2 0f       	add	r30, r18
    25f0:	f3 1f       	adc	r31, r19
    25f2:	8c 81       	ldd	r24, Y+4	; 0x04
    25f4:	80 83       	st	Z, r24
			j++;
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		u8 Local_u8TempNumber;
		u8 Array[5];
		u8 j=0;
		while(Copy_u8Number != 0)
    25fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    25fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	e9 f6       	brne	.-70     	; 0x25be <LCD_vDisplayNumber+0x2c>
			Local_u8TempNumber = Copy_u8Number%10;
			Copy_u8Number /= 10;
			Array[j] = Local_u8TempNumber;
			j++;
		}
		for(int i=j-1;i>=0;i--)
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	88 2f       	mov	r24, r24
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	9a 83       	std	Y+2, r25	; 0x02
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	10 c0       	rjmp	.+32     	; 0x2632 <LCD_vDisplayNumber+0xa0>
		{
			LCD_vDisplayChar(Array[i]+48);
    2612:	29 81       	ldd	r18, Y+1	; 0x01
    2614:	3a 81       	ldd	r19, Y+2	; 0x02
    2616:	ce 01       	movw	r24, r28
    2618:	05 96       	adiw	r24, 0x05	; 5
    261a:	fc 01       	movw	r30, r24
    261c:	e2 0f       	add	r30, r18
    261e:	f3 1f       	adc	r31, r19
    2620:	80 81       	ld	r24, Z
    2622:	80 5d       	subi	r24, 0xD0	; 208
    2624:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vDisplayChar>
			Local_u8TempNumber = Copy_u8Number%10;
			Copy_u8Number /= 10;
			Array[j] = Local_u8TempNumber;
			j++;
		}
		for(int i=j-1;i>=0;i--)
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	9a 81       	ldd	r25, Y+2	; 0x02
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	9a 83       	std	Y+2, r25	; 0x02
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	99 23       	and	r25, r25
    2638:	64 f7       	brge	.-40     	; 0x2612 <LCD_vDisplayNumber+0x80>
		{
			LCD_vDisplayChar(Array[i]+48);
		}
	}
}
    263a:	2b 96       	adiw	r28, 0x0b	; 11
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <LCD_vGoToRowCol>:

//Function to change cursor location
void LCD_vGoToRowCol(u8 Copy_u8RowNumber, u8 Copy_u8ColNumber){
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <LCD_vGoToRowCol+0x6>
    2652:	00 d0       	rcall	.+0      	; 0x2654 <LCD_vGoToRowCol+0x8>
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8ColNumber >= 0) || (Copy_u8ColNumber <= 0))
	{
		switch(Copy_u8RowNumber)
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	3c 83       	std	Y+4, r19	; 0x04
    2664:	2b 83       	std	Y+3, r18	; 0x03
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	9c 81       	ldd	r25, Y+4	; 0x04
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	91 05       	cpc	r25, r1
    266e:	31 f0       	breq	.+12     	; 0x267c <LCD_vGoToRowCol+0x30>
    2670:	2b 81       	ldd	r18, Y+3	; 0x03
    2672:	3c 81       	ldd	r19, Y+4	; 0x04
    2674:	22 30       	cpi	r18, 0x02	; 2
    2676:	31 05       	cpc	r19, r1
    2678:	31 f0       	breq	.+12     	; 0x2686 <LCD_vGoToRowCol+0x3a>
    267a:	09 c0       	rjmp	.+18     	; 0x268e <LCD_vGoToRowCol+0x42>
		{
		case ROW_ONE: LCD_vSendCmd(SET_CURSOR_LOCATION | (ROW_ONE_ADD | Copy_u8ColNumber)); break;
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	80 68       	ori	r24, 0x80	; 128
    2680:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_vSendCmd>
    2684:	04 c0       	rjmp	.+8      	; 0x268e <LCD_vGoToRowCol+0x42>
		case ROW_TWO: LCD_vSendCmd(SET_CURSOR_LOCATION | (ROW_TWO_ADD | Copy_u8ColNumber)); break;
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	80 6c       	ori	r24, 0xC0	; 192
    268a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_vSendCmd>
	}
	else
	{
		LCD_vDisplayString("Error, column number exceeded 15");
	}
}
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <LCD_vShiftDisplay>:

//Function to shift display right or left
void LCD_vShiftDisplay(u8 Copy_u8ShiftDirection, u8 Copy_u8ShiftIterations){
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	a4 97       	sbiw	r28, 0x24	; 36
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	89 a3       	std	Y+33, r24	; 0x21
    26b2:	6a a3       	std	Y+34, r22	; 0x22
	switch(Copy_u8ShiftDirection)
    26b4:	89 a1       	ldd	r24, Y+33	; 0x21
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	3c a3       	std	Y+36, r19	; 0x24
    26bc:	2b a3       	std	Y+35, r18	; 0x23
    26be:	8b a1       	ldd	r24, Y+35	; 0x23
    26c0:	9c a1       	ldd	r25, Y+36	; 0x24
    26c2:	81 30       	cpi	r24, 0x01	; 1
    26c4:	91 05       	cpc	r25, r1
    26c6:	09 f4       	brne	.+2      	; 0x26ca <LCD_vShiftDisplay+0x2e>
    26c8:	8d c0       	rjmp	.+282    	; 0x27e4 <LCD_vShiftDisplay+0x148>
    26ca:	2b a1       	ldd	r18, Y+35	; 0x23
    26cc:	3c a1       	ldd	r19, Y+36	; 0x24
    26ce:	22 30       	cpi	r18, 0x02	; 2
    26d0:	31 05       	cpc	r19, r1
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <LCD_vShiftDisplay+0x3a>
    26d4:	0d c1       	rjmp	.+538    	; 0x28f0 <LCD_vShiftDisplay+0x254>
	{
	case LEFT:
	for(int i=0;i<Copy_u8ShiftIterations;i++)
    26d6:	18 a2       	std	Y+32, r1	; 0x20
    26d8:	1f 8e       	std	Y+31, r1	; 0x1f
    26da:	7a c0       	rjmp	.+244    	; 0x27d0 <LCD_vShiftDisplay+0x134>
	{
		LCD_vSendCmd(SHIFT_LEFT);
    26dc:	88 e1       	ldi	r24, 0x18	; 24
    26de:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_vSendCmd>
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a8 ec       	ldi	r26, 0xC8	; 200
    26e8:	b2 e4       	ldi	r27, 0x42	; 66
    26ea:	89 8f       	std	Y+25, r24	; 0x19
    26ec:	9a 8f       	std	Y+26, r25	; 0x1a
    26ee:	ab 8f       	std	Y+27, r26	; 0x1b
    26f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	69 8d       	ldd	r22, Y+25	; 0x19
    26f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a ef       	ldi	r20, 0xFA	; 250
    2700:	54 e4       	ldi	r21, 0x44	; 68
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8d 8b       	std	Y+21, r24	; 0x15
    270c:	9e 8b       	std	Y+22, r25	; 0x16
    270e:	af 8b       	std	Y+23, r26	; 0x17
    2710:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2712:	6d 89       	ldd	r22, Y+21	; 0x15
    2714:	7e 89       	ldd	r23, Y+22	; 0x16
    2716:	8f 89       	ldd	r24, Y+23	; 0x17
    2718:	98 8d       	ldd	r25, Y+24	; 0x18
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	2c f4       	brge	.+10     	; 0x2734 <LCD_vShiftDisplay+0x98>
		__ticks = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9c 8b       	std	Y+20, r25	; 0x14
    2730:	8b 8b       	std	Y+19, r24	; 0x13
    2732:	3f c0       	rjmp	.+126    	; 0x27b2 <LCD_vShiftDisplay+0x116>
	else if (__tmp > 65535)
    2734:	6d 89       	ldd	r22, Y+21	; 0x15
    2736:	7e 89       	ldd	r23, Y+22	; 0x16
    2738:	8f 89       	ldd	r24, Y+23	; 0x17
    273a:	98 8d       	ldd	r25, Y+24	; 0x18
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	4c f5       	brge	.+82     	; 0x279e <LCD_vShiftDisplay+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	69 8d       	ldd	r22, Y+25	; 0x19
    274e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2750:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2752:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9c 8b       	std	Y+20, r25	; 0x14
    2772:	8b 8b       	std	Y+19, r24	; 0x13
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <LCD_vShiftDisplay+0xf8>
    2776:	88 ec       	ldi	r24, 0xC8	; 200
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9a 8b       	std	Y+18, r25	; 0x12
    277c:	89 8b       	std	Y+17, r24	; 0x11
    277e:	89 89       	ldd	r24, Y+17	; 0x11
    2780:	9a 89       	ldd	r25, Y+18	; 0x12
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <LCD_vShiftDisplay+0xe6>
    2786:	9a 8b       	std	Y+18, r25	; 0x12
    2788:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	8b 89       	ldd	r24, Y+19	; 0x13
    278c:	9c 89       	ldd	r25, Y+20	; 0x14
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9c 8b       	std	Y+20, r25	; 0x14
    2792:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <LCD_vShiftDisplay+0xda>
    279c:	14 c0       	rjmp	.+40     	; 0x27c6 <LCD_vShiftDisplay+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	6d 89       	ldd	r22, Y+21	; 0x15
    27a0:	7e 89       	ldd	r23, Y+22	; 0x16
    27a2:	8f 89       	ldd	r24, Y+23	; 0x17
    27a4:	98 8d       	ldd	r25, Y+24	; 0x18
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9c 8b       	std	Y+20, r25	; 0x14
    27b0:	8b 8b       	std	Y+19, r24	; 0x13
    27b2:	8b 89       	ldd	r24, Y+19	; 0x13
    27b4:	9c 89       	ldd	r25, Y+20	; 0x14
    27b6:	98 8b       	std	Y+16, r25	; 0x10
    27b8:	8f 87       	std	Y+15, r24	; 0x0f
    27ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    27bc:	98 89       	ldd	r25, Y+16	; 0x10
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <LCD_vShiftDisplay+0x122>
    27c2:	98 8b       	std	Y+16, r25	; 0x10
    27c4:	8f 87       	std	Y+15, r24	; 0x0f
//Function to shift display right or left
void LCD_vShiftDisplay(u8 Copy_u8ShiftDirection, u8 Copy_u8ShiftIterations){
	switch(Copy_u8ShiftDirection)
	{
	case LEFT:
	for(int i=0;i<Copy_u8ShiftIterations;i++)
    27c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27c8:	98 a1       	ldd	r25, Y+32	; 0x20
    27ca:	01 96       	adiw	r24, 0x01	; 1
    27cc:	98 a3       	std	Y+32, r25	; 0x20
    27ce:	8f 8f       	std	Y+31, r24	; 0x1f
    27d0:	8a a1       	ldd	r24, Y+34	; 0x22
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27d8:	98 a1       	ldd	r25, Y+32	; 0x20
    27da:	82 17       	cp	r24, r18
    27dc:	93 07       	cpc	r25, r19
    27de:	0c f4       	brge	.+2      	; 0x27e2 <LCD_vShiftDisplay+0x146>
    27e0:	7d cf       	rjmp	.-262    	; 0x26dc <LCD_vShiftDisplay+0x40>
    27e2:	86 c0       	rjmp	.+268    	; 0x28f0 <LCD_vShiftDisplay+0x254>
		LCD_vSendCmd(SHIFT_LEFT);
		_delay_ms(100);
	}
	break;
	case RIGHT:
	for(int i=0;i<Copy_u8ShiftIterations;i++)
    27e4:	1e 8e       	std	Y+30, r1	; 0x1e
    27e6:	1d 8e       	std	Y+29, r1	; 0x1d
    27e8:	7a c0       	rjmp	.+244    	; 0x28de <LCD_vShiftDisplay+0x242>
	{
		LCD_vSendCmd(SHIFT_RIGHT);
    27ea:	8c e1       	ldi	r24, 0x1C	; 28
    27ec:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_vSendCmd>
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	a8 ec       	ldi	r26, 0xC8	; 200
    27f6:	b2 e4       	ldi	r27, 0x42	; 66
    27f8:	8b 87       	std	Y+11, r24	; 0x0b
    27fa:	9c 87       	std	Y+12, r25	; 0x0c
    27fc:	ad 87       	std	Y+13, r26	; 0x0d
    27fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2800:	6b 85       	ldd	r22, Y+11	; 0x0b
    2802:	7c 85       	ldd	r23, Y+12	; 0x0c
    2804:	8d 85       	ldd	r24, Y+13	; 0x0d
    2806:	9e 85       	ldd	r25, Y+14	; 0x0e
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	4a ef       	ldi	r20, 0xFA	; 250
    280e:	54 e4       	ldi	r21, 0x44	; 68
    2810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	8f 83       	std	Y+7, r24	; 0x07
    281a:	98 87       	std	Y+8, r25	; 0x08
    281c:	a9 87       	std	Y+9, r26	; 0x09
    281e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2820:	6f 81       	ldd	r22, Y+7	; 0x07
    2822:	78 85       	ldd	r23, Y+8	; 0x08
    2824:	89 85       	ldd	r24, Y+9	; 0x09
    2826:	9a 85       	ldd	r25, Y+10	; 0x0a
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e8       	ldi	r20, 0x80	; 128
    282e:	5f e3       	ldi	r21, 0x3F	; 63
    2830:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2834:	88 23       	and	r24, r24
    2836:	2c f4       	brge	.+10     	; 0x2842 <LCD_vShiftDisplay+0x1a6>
		__ticks = 1;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	9e 83       	std	Y+6, r25	; 0x06
    283e:	8d 83       	std	Y+5, r24	; 0x05
    2840:	3f c0       	rjmp	.+126    	; 0x28c0 <LCD_vShiftDisplay+0x224>
	else if (__tmp > 65535)
    2842:	6f 81       	ldd	r22, Y+7	; 0x07
    2844:	78 85       	ldd	r23, Y+8	; 0x08
    2846:	89 85       	ldd	r24, Y+9	; 0x09
    2848:	9a 85       	ldd	r25, Y+10	; 0x0a
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	3f ef       	ldi	r19, 0xFF	; 255
    284e:	4f e7       	ldi	r20, 0x7F	; 127
    2850:	57 e4       	ldi	r21, 0x47	; 71
    2852:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2856:	18 16       	cp	r1, r24
    2858:	4c f5       	brge	.+82     	; 0x28ac <LCD_vShiftDisplay+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285a:	6b 85       	ldd	r22, Y+11	; 0x0b
    285c:	7c 85       	ldd	r23, Y+12	; 0x0c
    285e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2860:	9e 85       	ldd	r25, Y+14	; 0x0e
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e2       	ldi	r20, 0x20	; 32
    2868:	51 e4       	ldi	r21, 0x41	; 65
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	9e 83       	std	Y+6, r25	; 0x06
    2880:	8d 83       	std	Y+5, r24	; 0x05
    2882:	0f c0       	rjmp	.+30     	; 0x28a2 <LCD_vShiftDisplay+0x206>
    2884:	88 ec       	ldi	r24, 0xC8	; 200
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	9c 83       	std	Y+4, r25	; 0x04
    288a:	8b 83       	std	Y+3, r24	; 0x03
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	9c 81       	ldd	r25, Y+4	; 0x04
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <LCD_vShiftDisplay+0x1f4>
    2894:	9c 83       	std	Y+4, r25	; 0x04
    2896:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2898:	8d 81       	ldd	r24, Y+5	; 0x05
    289a:	9e 81       	ldd	r25, Y+6	; 0x06
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a2:	8d 81       	ldd	r24, Y+5	; 0x05
    28a4:	9e 81       	ldd	r25, Y+6	; 0x06
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	69 f7       	brne	.-38     	; 0x2884 <LCD_vShiftDisplay+0x1e8>
    28aa:	14 c0       	rjmp	.+40     	; 0x28d4 <LCD_vShiftDisplay+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ac:	6f 81       	ldd	r22, Y+7	; 0x07
    28ae:	78 85       	ldd	r23, Y+8	; 0x08
    28b0:	89 85       	ldd	r24, Y+9	; 0x09
    28b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	9e 83       	std	Y+6, r25	; 0x06
    28be:	8d 83       	std	Y+5, r24	; 0x05
    28c0:	8d 81       	ldd	r24, Y+5	; 0x05
    28c2:	9e 81       	ldd	r25, Y+6	; 0x06
    28c4:	9a 83       	std	Y+2, r25	; 0x02
    28c6:	89 83       	std	Y+1, r24	; 0x01
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	9a 81       	ldd	r25, Y+2	; 0x02
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <LCD_vShiftDisplay+0x230>
    28d0:	9a 83       	std	Y+2, r25	; 0x02
    28d2:	89 83       	std	Y+1, r24	; 0x01
		LCD_vSendCmd(SHIFT_LEFT);
		_delay_ms(100);
	}
	break;
	case RIGHT:
	for(int i=0;i<Copy_u8ShiftIterations;i++)
    28d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28d8:	01 96       	adiw	r24, 0x01	; 1
    28da:	9e 8f       	std	Y+30, r25	; 0x1e
    28dc:	8d 8f       	std	Y+29, r24	; 0x1d
    28de:	8a a1       	ldd	r24, Y+34	; 0x22
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28e8:	82 17       	cp	r24, r18
    28ea:	93 07       	cpc	r25, r19
    28ec:	0c f4       	brge	.+2      	; 0x28f0 <LCD_vShiftDisplay+0x254>
    28ee:	7d cf       	rjmp	.-262    	; 0x27ea <LCD_vShiftDisplay+0x14e>
		LCD_vSendCmd(SHIFT_RIGHT);
		_delay_ms(100);
	}
	break;
	}
}
    28f0:	a4 96       	adiw	r28, 0x24	; 36
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	f8 94       	cli
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	cd bf       	out	0x3d, r28	; 61
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <LCD_vStoreSpecChar>:

//Function to create and print special character on LCD
void LCD_vStoreSpecChar(u8 *Copy_u8ASpecChar, u8 Copy_u8CGRAM_Location)
{
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	63 97       	sbiw	r28, 0x13	; 19
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	9a 8b       	std	Y+18, r25	; 0x12
    2918:	89 8b       	std	Y+17, r24	; 0x11
    291a:	6b 8b       	std	Y+19, r22	; 0x13
	LCD_vSendCmd(SET_CGRAM_LOCATION | (Copy_u8CGRAM_Location*8));
    291c:	8b 89       	ldd	r24, Y+19	; 0x13
    291e:	88 2f       	mov	r24, r24
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	88 0f       	add	r24, r24
    2924:	99 1f       	adc	r25, r25
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	88 0f       	add	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	80 64       	ori	r24, 0x40	; 64
    2930:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <LCD_vSendCmd>
	for(int i=0; i<8;i++)
    2934:	18 8a       	std	Y+16, r1	; 0x10
    2936:	1f 86       	std	Y+15, r1	; 0x0f
    2938:	0f c0       	rjmp	.+30     	; 0x2958 <LCD_vStoreSpecChar+0x56>
	{
		LCD_vDisplayChar(Copy_u8ASpecChar[i]);
    293a:	2f 85       	ldd	r18, Y+15	; 0x0f
    293c:	38 89       	ldd	r19, Y+16	; 0x10
    293e:	89 89       	ldd	r24, Y+17	; 0x11
    2940:	9a 89       	ldd	r25, Y+18	; 0x12
    2942:	fc 01       	movw	r30, r24
    2944:	e2 0f       	add	r30, r18
    2946:	f3 1f       	adc	r31, r19
    2948:	80 81       	ld	r24, Z
    294a:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vDisplayChar>

//Function to create and print special character on LCD
void LCD_vStoreSpecChar(u8 *Copy_u8ASpecChar, u8 Copy_u8CGRAM_Location)
{
	LCD_vSendCmd(SET_CGRAM_LOCATION | (Copy_u8CGRAM_Location*8));
	for(int i=0; i<8;i++)
    294e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2950:	98 89       	ldd	r25, Y+16	; 0x10
    2952:	01 96       	adiw	r24, 0x01	; 1
    2954:	98 8b       	std	Y+16, r25	; 0x10
    2956:	8f 87       	std	Y+15, r24	; 0x0f
    2958:	8f 85       	ldd	r24, Y+15	; 0x0f
    295a:	98 89       	ldd	r25, Y+16	; 0x10
    295c:	88 30       	cpi	r24, 0x08	; 8
    295e:	91 05       	cpc	r25, r1
    2960:	64 f3       	brlt	.-40     	; 0x293a <LCD_vStoreSpecChar+0x38>
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	a8 ec       	ldi	r26, 0xC8	; 200
    2968:	b2 e4       	ldi	r27, 0x42	; 66
    296a:	8b 87       	std	Y+11, r24	; 0x0b
    296c:	9c 87       	std	Y+12, r25	; 0x0c
    296e:	ad 87       	std	Y+13, r26	; 0x0d
    2970:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2972:	6b 85       	ldd	r22, Y+11	; 0x0b
    2974:	7c 85       	ldd	r23, Y+12	; 0x0c
    2976:	8d 85       	ldd	r24, Y+13	; 0x0d
    2978:	9e 85       	ldd	r25, Y+14	; 0x0e
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	4a ef       	ldi	r20, 0xFA	; 250
    2980:	54 e4       	ldi	r21, 0x44	; 68
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	8f 83       	std	Y+7, r24	; 0x07
    298c:	98 87       	std	Y+8, r25	; 0x08
    298e:	a9 87       	std	Y+9, r26	; 0x09
    2990:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2992:	6f 81       	ldd	r22, Y+7	; 0x07
    2994:	78 85       	ldd	r23, Y+8	; 0x08
    2996:	89 85       	ldd	r24, Y+9	; 0x09
    2998:	9a 85       	ldd	r25, Y+10	; 0x0a
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e8       	ldi	r20, 0x80	; 128
    29a0:	5f e3       	ldi	r21, 0x3F	; 63
    29a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a6:	88 23       	and	r24, r24
    29a8:	2c f4       	brge	.+10     	; 0x29b4 <LCD_vStoreSpecChar+0xb2>
		__ticks = 1;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	9e 83       	std	Y+6, r25	; 0x06
    29b0:	8d 83       	std	Y+5, r24	; 0x05
    29b2:	3f c0       	rjmp	.+126    	; 0x2a32 <LCD_vStoreSpecChar+0x130>
	else if (__tmp > 65535)
    29b4:	6f 81       	ldd	r22, Y+7	; 0x07
    29b6:	78 85       	ldd	r23, Y+8	; 0x08
    29b8:	89 85       	ldd	r24, Y+9	; 0x09
    29ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	3f ef       	ldi	r19, 0xFF	; 255
    29c0:	4f e7       	ldi	r20, 0x7F	; 127
    29c2:	57 e4       	ldi	r21, 0x47	; 71
    29c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c8:	18 16       	cp	r1, r24
    29ca:	4c f5       	brge	.+82     	; 0x2a1e <LCD_vStoreSpecChar+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e2       	ldi	r20, 0x20	; 32
    29da:	51 e4       	ldi	r21, 0x41	; 65
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	9e 83       	std	Y+6, r25	; 0x06
    29f2:	8d 83       	std	Y+5, r24	; 0x05
    29f4:	0f c0       	rjmp	.+30     	; 0x2a14 <LCD_vStoreSpecChar+0x112>
    29f6:	88 ec       	ldi	r24, 0xC8	; 200
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	9c 83       	std	Y+4, r25	; 0x04
    29fc:	8b 83       	std	Y+3, r24	; 0x03
    29fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2a00:	9c 81       	ldd	r25, Y+4	; 0x04
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <LCD_vStoreSpecChar+0x100>
    2a06:	9c 83       	std	Y+4, r25	; 0x04
    2a08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	9e 83       	std	Y+6, r25	; 0x06
    2a12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	69 f7       	brne	.-38     	; 0x29f6 <LCD_vStoreSpecChar+0xf4>
    2a1c:	14 c0       	rjmp	.+40     	; 0x2a46 <LCD_vStoreSpecChar+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a20:	78 85       	ldd	r23, Y+8	; 0x08
    2a22:	89 85       	ldd	r24, Y+9	; 0x09
    2a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	9e 83       	std	Y+6, r25	; 0x06
    2a30:	8d 83       	std	Y+5, r24	; 0x05
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	9e 81       	ldd	r25, Y+6	; 0x06
    2a36:	9a 83       	std	Y+2, r25	; 0x02
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <LCD_vStoreSpecChar+0x13c>
    2a42:	9a 83       	std	Y+2, r25	; 0x02
    2a44:	89 83       	std	Y+1, r24	; 0x01
		LCD_vDisplayChar(Copy_u8ASpecChar[i]);
		//LCD_vSendCmd(0b01000000 | i);
	}
	_delay_ms(100);

}
    2a46:	63 96       	adiw	r28, 0x13	; 19
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <KPD_vInitKeypad>:

const u8 GLOBAL_u8AcolNumber [4] = {KPD_C1, KPD_C2, KPD_C3, KPD_C4};


//This function will initialize the keypad ports
void KPD_vInitKeypad(void){
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
	DIO_vSet4LSBDir(KPD_PORT, OUTPUT);
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	61 e0       	ldi	r22, 0x01	; 1
    2a64:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_vSet4LSBDir>
	DIO_vSet4LSBValue(KPD_PORT, HIGH);
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	61 e0       	ldi	r22, 0x01	; 1
    2a6c:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_vSet4LSBValue>
	DIO_vSet4MSBDir(KPD_PORT, INPUT);
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <DIO_vSet4MSBDir>
	DIO_vSet4MSBValue(KPD_PORT, HIGH);
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	61 e0       	ldi	r22, 0x01	; 1
    2a7c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <DIO_vSet4MSBValue>


}
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <KPD_vGetPressedKey>:


//This function shall be responsible for getting the pressed key from keypad
void KPD_vGetPressedKey(u8 *Copy_u8PressedKey){
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	64 97       	sbiw	r28, 0x14	; 20
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	9c 8b       	std	Y+20, r25	; 0x14
    2a9c:	8b 8b       	std	Y+19, r24	; 0x13
	u8 LOCAL_u8RowCounter, LOCAL_u8ColCounter, LOCAL_u8PinValue, LOCAL_u8Flag=0;
    2a9e:	1f 86       	std	Y+15, r1	; 0x0f
	for(LOCAL_u8RowCounter=0;LOCAL_u8RowCounter<4;LOCAL_u8RowCounter++)
    2aa0:	1a 8a       	std	Y+18, r1	; 0x12
    2aa2:	cf c0       	rjmp	.+414    	; 0x2c42 <KPD_vGetPressedKey+0x1bc>
	{
		DIO_vSetPinValue(KPD_PORT, GLOBAL_u8ArowNumber[LOCAL_u8RowCounter], LOW);
    2aa4:	8a 89       	ldd	r24, Y+18	; 0x12
    2aa6:	88 2f       	mov	r24, r24
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	fc 01       	movw	r30, r24
    2aac:	e8 58       	subi	r30, 0x88	; 136
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	90 81       	ld	r25, Z
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	69 2f       	mov	r22, r25
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
		for(LOCAL_u8ColCounter=0;LOCAL_u8ColCounter<4;LOCAL_u8ColCounter++)
    2abc:	19 8a       	std	Y+17, r1	; 0x11
    2abe:	ab c0       	rjmp	.+342    	; 0x2c16 <KPD_vGetPressedKey+0x190>
		{
			LOCAL_u8PinValue = DIO_u8ReadPinValue(KPD_PORT, GLOBAL_u8AcolNumber[LOCAL_u8ColCounter]);
    2ac0:	89 89       	ldd	r24, Y+17	; 0x11
    2ac2:	88 2f       	mov	r24, r24
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	e4 58       	subi	r30, 0x84	; 132
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	90 81       	ld	r25, Z
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	69 2f       	mov	r22, r25
    2ad2:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_u8ReadPinValue>
    2ad6:	88 8b       	std	Y+16, r24	; 0x10
			if (LOCAL_u8PinValue == BTN_PRESSED)
    2ad8:	88 89       	ldd	r24, Y+16	; 0x10
    2ada:	88 23       	and	r24, r24
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <KPD_vGetPressedKey+0x5a>
    2ade:	98 c0       	rjmp	.+304    	; 0x2c10 <KPD_vGetPressedKey+0x18a>
    2ae0:	72 c0       	rjmp	.+228    	; 0x2bc6 <KPD_vGetPressedKey+0x140>
			{
				while(DIO_u8ReadPinValue(KPD_PORT, GLOBAL_u8AcolNumber[LOCAL_u8ColCounter]) == BTN_PRESSED)
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	a8 e4       	ldi	r26, 0x48	; 72
    2ae8:	b2 e4       	ldi	r27, 0x42	; 66
    2aea:	8b 87       	std	Y+11, r24	; 0x0b
    2aec:	9c 87       	std	Y+12, r25	; 0x0c
    2aee:	ad 87       	std	Y+13, r26	; 0x0d
    2af0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	4a ef       	ldi	r20, 0xFA	; 250
    2b00:	54 e4       	ldi	r21, 0x44	; 68
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	8f 83       	std	Y+7, r24	; 0x07
    2b0c:	98 87       	std	Y+8, r25	; 0x08
    2b0e:	a9 87       	std	Y+9, r26	; 0x09
    2b10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b12:	6f 81       	ldd	r22, Y+7	; 0x07
    2b14:	78 85       	ldd	r23, Y+8	; 0x08
    2b16:	89 85       	ldd	r24, Y+9	; 0x09
    2b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e8       	ldi	r20, 0x80	; 128
    2b20:	5f e3       	ldi	r21, 0x3F	; 63
    2b22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b26:	88 23       	and	r24, r24
    2b28:	2c f4       	brge	.+10     	; 0x2b34 <KPD_vGetPressedKey+0xae>
		__ticks = 1;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	9e 83       	std	Y+6, r25	; 0x06
    2b30:	8d 83       	std	Y+5, r24	; 0x05
    2b32:	3f c0       	rjmp	.+126    	; 0x2bb2 <KPD_vGetPressedKey+0x12c>
	else if (__tmp > 65535)
    2b34:	6f 81       	ldd	r22, Y+7	; 0x07
    2b36:	78 85       	ldd	r23, Y+8	; 0x08
    2b38:	89 85       	ldd	r24, Y+9	; 0x09
    2b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	3f ef       	ldi	r19, 0xFF	; 255
    2b40:	4f e7       	ldi	r20, 0x7F	; 127
    2b42:	57 e4       	ldi	r21, 0x47	; 71
    2b44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b48:	18 16       	cp	r1, r24
    2b4a:	4c f5       	brge	.+82     	; 0x2b9e <KPD_vGetPressedKey+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e2       	ldi	r20, 0x20	; 32
    2b5a:	51 e4       	ldi	r21, 0x41	; 65
    2b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	bc 01       	movw	r22, r24
    2b66:	cd 01       	movw	r24, r26
    2b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	9e 83       	std	Y+6, r25	; 0x06
    2b72:	8d 83       	std	Y+5, r24	; 0x05
    2b74:	0f c0       	rjmp	.+30     	; 0x2b94 <KPD_vGetPressedKey+0x10e>
    2b76:	88 ec       	ldi	r24, 0xC8	; 200
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	9c 83       	std	Y+4, r25	; 0x04
    2b7c:	8b 83       	std	Y+3, r24	; 0x03
    2b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b80:	9c 81       	ldd	r25, Y+4	; 0x04
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <KPD_vGetPressedKey+0xfc>
    2b86:	9c 83       	std	Y+4, r25	; 0x04
    2b88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b94:	8d 81       	ldd	r24, Y+5	; 0x05
    2b96:	9e 81       	ldd	r25, Y+6	; 0x06
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	69 f7       	brne	.-38     	; 0x2b76 <KPD_vGetPressedKey+0xf0>
    2b9c:	14 c0       	rjmp	.+40     	; 0x2bc6 <KPD_vGetPressedKey+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba0:	78 85       	ldd	r23, Y+8	; 0x08
    2ba2:	89 85       	ldd	r24, Y+9	; 0x09
    2ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	9e 83       	std	Y+6, r25	; 0x06
    2bb0:	8d 83       	std	Y+5, r24	; 0x05
    2bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <KPD_vGetPressedKey+0x138>
    2bc2:	9a 83       	std	Y+2, r25	; 0x02
    2bc4:	89 83       	std	Y+1, r24	; 0x01
    2bc6:	89 89       	ldd	r24, Y+17	; 0x11
    2bc8:	88 2f       	mov	r24, r24
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	fc 01       	movw	r30, r24
    2bce:	e4 58       	subi	r30, 0x84	; 132
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	90 81       	ld	r25, Z
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	69 2f       	mov	r22, r25
    2bd8:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_u8ReadPinValue>
    2bdc:	88 23       	and	r24, r24
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <KPD_vGetPressedKey+0x15c>
    2be0:	80 cf       	rjmp	.-256    	; 0x2ae2 <KPD_vGetPressedKey+0x5c>
				{
					_delay_ms(50);
				}
				*Copy_u8PressedKey = GLOBAL_u8AkpdInterface[LOCAL_u8RowCounter][LOCAL_u8ColCounter];
    2be2:	8a 89       	ldd	r24, Y+18	; 0x12
    2be4:	48 2f       	mov	r20, r24
    2be6:	50 e0       	ldi	r21, 0x00	; 0
    2be8:	89 89       	ldd	r24, Y+17	; 0x11
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	ca 01       	movw	r24, r20
    2bf0:	88 0f       	add	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	82 0f       	add	r24, r18
    2bfa:	93 1f       	adc	r25, r19
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	e8 59       	subi	r30, 0x98	; 152
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	80 81       	ld	r24, Z
    2c04:	eb 89       	ldd	r30, Y+19	; 0x13
    2c06:	fc 89       	ldd	r31, Y+20	; 0x14
    2c08:	80 83       	st	Z, r24
				LOCAL_u8Flag = 1;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	8f 87       	std	Y+15, r24	; 0x0f
    2c0e:	07 c0       	rjmp	.+14     	; 0x2c1e <KPD_vGetPressedKey+0x198>
void KPD_vGetPressedKey(u8 *Copy_u8PressedKey){
	u8 LOCAL_u8RowCounter, LOCAL_u8ColCounter, LOCAL_u8PinValue, LOCAL_u8Flag=0;
	for(LOCAL_u8RowCounter=0;LOCAL_u8RowCounter<4;LOCAL_u8RowCounter++)
	{
		DIO_vSetPinValue(KPD_PORT, GLOBAL_u8ArowNumber[LOCAL_u8RowCounter], LOW);
		for(LOCAL_u8ColCounter=0;LOCAL_u8ColCounter<4;LOCAL_u8ColCounter++)
    2c10:	89 89       	ldd	r24, Y+17	; 0x11
    2c12:	8f 5f       	subi	r24, 0xFF	; 255
    2c14:	89 8b       	std	Y+17, r24	; 0x11
    2c16:	89 89       	ldd	r24, Y+17	; 0x11
    2c18:	84 30       	cpi	r24, 0x04	; 4
    2c1a:	08 f4       	brcc	.+2      	; 0x2c1e <KPD_vGetPressedKey+0x198>
    2c1c:	51 cf       	rjmp	.-350    	; 0x2ac0 <KPD_vGetPressedKey+0x3a>
				*Copy_u8PressedKey = GLOBAL_u8AkpdInterface[LOCAL_u8RowCounter][LOCAL_u8ColCounter];
				LOCAL_u8Flag = 1;
				break;
			}
		}
		DIO_vSetPinValue(KPD_PORT, GLOBAL_u8ArowNumber[LOCAL_u8RowCounter], HIGH);
    2c1e:	8a 89       	ldd	r24, Y+18	; 0x12
    2c20:	88 2f       	mov	r24, r24
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	fc 01       	movw	r30, r24
    2c26:	e8 58       	subi	r30, 0x88	; 136
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	90 81       	ld	r25, Z
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	69 2f       	mov	r22, r25
    2c30:	41 e0       	ldi	r20, 0x01	; 1
    2c32:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
		if(LOCAL_u8Flag == 1)
    2c36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c38:	81 30       	cpi	r24, 0x01	; 1
    2c3a:	39 f0       	breq	.+14     	; 0x2c4a <KPD_vGetPressedKey+0x1c4>


//This function shall be responsible for getting the pressed key from keypad
void KPD_vGetPressedKey(u8 *Copy_u8PressedKey){
	u8 LOCAL_u8RowCounter, LOCAL_u8ColCounter, LOCAL_u8PinValue, LOCAL_u8Flag=0;
	for(LOCAL_u8RowCounter=0;LOCAL_u8RowCounter<4;LOCAL_u8RowCounter++)
    2c3c:	8a 89       	ldd	r24, Y+18	; 0x12
    2c3e:	8f 5f       	subi	r24, 0xFF	; 255
    2c40:	8a 8b       	std	Y+18, r24	; 0x12
    2c42:	8a 89       	ldd	r24, Y+18	; 0x12
    2c44:	84 30       	cpi	r24, 0x04	; 4
    2c46:	08 f4       	brcc	.+2      	; 0x2c4a <KPD_vGetPressedKey+0x1c4>
    2c48:	2d cf       	rjmp	.-422    	; 0x2aa4 <KPD_vGetPressedKey+0x1e>
		if(LOCAL_u8Flag == 1)
		{
			break;
		}
	}
}
    2c4a:	64 96       	adiw	r28, 0x14	; 20
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <main>:
#include <util/delay.h>
#define F_CPU 8000000UL
u8 flag = 0;

void main()
{
    2c5c:	0f 93       	push	r16
    2c5e:	1f 93       	push	r17
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	c0 57       	subi	r28, 0x70	; 112
    2c6a:	d0 40       	sbci	r29, 0x00	; 0
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	f8 94       	cli
    2c70:	de bf       	out	0x3e, r29	; 62
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetGroupDir(PORTA, OUTPUT);
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	61 e0       	ldi	r22, 0x01	; 1
    2c7a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <DIO_vSetGroupDir>
	DIO_vSetPinDir(PORTD, PIN2, INPUT);
    2c7e:	83 e0       	ldi	r24, 0x03	; 3
    2c80:	62 e0       	ldi	r22, 0x02	; 2
    2c82:	40 e0       	ldi	r20, 0x00	; 0
    2c84:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_vSetPinDir>
	DIO_vSetPinValue(PORTD, PIN2, HIGH);
    2c88:	83 e0       	ldi	r24, 0x03	; 3
    2c8a:	62 e0       	ldi	r22, 0x02	; 2
    2c8c:	41 e0       	ldi	r20, 0x01	; 1
    2c8e:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
	EXTI_vEnablePin(INT0_PIN);
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <EXTI_vEnablePin>
	GIE_vEnableInterrupts();
    2c98:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_vEnableInterrupts>
	while(1)
	{
		DIO_vSetPinValue(PORTA, PIN0, HIGH);
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	60 e0       	ldi	r22, 0x00	; 0
    2ca0:	41 e0       	ldi	r20, 0x01	; 1
    2ca2:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e3 59       	subi	r30, 0x93	; 147
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	a6 e1       	ldi	r26, 0x16	; 22
    2cb2:	b3 e4       	ldi	r27, 0x43	; 67
    2cb4:	80 83       	st	Z, r24
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	a2 83       	std	Z+2, r26	; 0x02
    2cba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbc:	8e 01       	movw	r16, r28
    2cbe:	07 59       	subi	r16, 0x97	; 151
    2cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e3 59       	subi	r30, 0x93	; 147
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	4a ef       	ldi	r20, 0xFA	; 250
    2cd6:	54 e4       	ldi	r21, 0x44	; 68
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	f8 01       	movw	r30, r16
    2ce2:	80 83       	st	Z, r24
    2ce4:	91 83       	std	Z+1, r25	; 0x01
    2ce6:	a2 83       	std	Z+2, r26	; 0x02
    2ce8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cea:	fe 01       	movw	r30, r28
    2cec:	e7 59       	subi	r30, 0x97	; 151
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e8       	ldi	r20, 0x80	; 128
    2cfe:	5f e3       	ldi	r21, 0x3F	; 63
    2d00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d04:	88 23       	and	r24, r24
    2d06:	44 f4       	brge	.+16     	; 0x2d18 <main+0xbc>
		__ticks = 1;
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e9 59       	subi	r30, 0x99	; 153
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	80 83       	st	Z, r24
    2d16:	64 c0       	rjmp	.+200    	; 0x2de0 <main+0x184>
	else if (__tmp > 65535)
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e7 59       	subi	r30, 0x97	; 151
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	3f ef       	ldi	r19, 0xFF	; 255
    2d2a:	4f e7       	ldi	r20, 0x7F	; 127
    2d2c:	57 e4       	ldi	r21, 0x47	; 71
    2d2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d32:	18 16       	cp	r1, r24
    2d34:	0c f0       	brlt	.+2      	; 0x2d38 <main+0xdc>
    2d36:	43 c0       	rjmp	.+134    	; 0x2dbe <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e3 59       	subi	r30, 0x93	; 147
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	60 81       	ld	r22, Z
    2d40:	71 81       	ldd	r23, Z+1	; 0x01
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	93 81       	ldd	r25, Z+3	; 0x03
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	8e 01       	movw	r16, r28
    2d58:	09 59       	subi	r16, 0x99	; 153
    2d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	f8 01       	movw	r30, r16
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
    2d6e:	1f c0       	rjmp	.+62     	; 0x2dae <main+0x152>
    2d70:	fe 01       	movw	r30, r28
    2d72:	eb 59       	subi	r30, 0x9B	; 155
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	88 ec       	ldi	r24, 0xC8	; 200
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
    2d7e:	fe 01       	movw	r30, r28
    2d80:	eb 59       	subi	r30, 0x9B	; 155
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <main+0x12c>
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	eb 59       	subi	r30, 0x9B	; 155
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	91 83       	std	Z+1, r25	; 0x01
    2d94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d96:	de 01       	movw	r26, r28
    2d98:	a9 59       	subi	r26, 0x99	; 153
    2d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e9 59       	subi	r30, 0x99	; 153
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 81       	ld	r24, Z
    2da4:	91 81       	ldd	r25, Z+1	; 0x01
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	11 96       	adiw	r26, 0x01	; 1
    2daa:	9c 93       	st	X, r25
    2dac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	fe 01       	movw	r30, r28
    2db0:	e9 59       	subi	r30, 0x99	; 153
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	91 81       	ldd	r25, Z+1	; 0x01
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	d1 f6       	brne	.-76     	; 0x2d70 <main+0x114>
    2dbc:	28 c0       	rjmp	.+80     	; 0x2e0e <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbe:	8e 01       	movw	r16, r28
    2dc0:	09 59       	subi	r16, 0x99	; 153
    2dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e7 59       	subi	r30, 0x97	; 151
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	f8 01       	movw	r30, r16
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	80 83       	st	Z, r24
    2de0:	de 01       	movw	r26, r28
    2de2:	ad 59       	subi	r26, 0x9D	; 157
    2de4:	bf 4f       	sbci	r27, 0xFF	; 255
    2de6:	fe 01       	movw	r30, r28
    2de8:	e9 59       	subi	r30, 0x99	; 153
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	11 96       	adiw	r26, 0x01	; 1
    2df2:	9c 93       	st	X, r25
    2df4:	8e 93       	st	-X, r24
    2df6:	fe 01       	movw	r30, r28
    2df8:	ed 59       	subi	r30, 0x9D	; 157
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <main+0x1a4>
    2e04:	fe 01       	movw	r30, r28
    2e06:	ed 59       	subi	r30, 0x9D	; 157
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	80 83       	st	Z, r24
		_delay_ms(150);
		if (flag==1)
    2e0e:	80 91 80 00 	lds	r24, 0x0080
    2e12:	81 30       	cpi	r24, 0x01	; 1
    2e14:	19 f4       	brne	.+6      	; 0x2e1c <main+0x1c0>
			{
				flag=0;
    2e16:	10 92 80 00 	sts	0x0080, r1
    2e1a:	40 cf       	rjmp	.-384    	; 0x2c9c <main+0x40>
				continue;
			}
		DIO_vSetPinValue(PORTA, PIN0, LOW);
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	60 e0       	ldi	r22, 0x00	; 0
    2e20:	40 e0       	ldi	r20, 0x00	; 0
    2e22:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
		DIO_vSetPinValue(PORTA, PIN1, HIGH);
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	61 e0       	ldi	r22, 0x01	; 1
    2e2a:	41 e0       	ldi	r20, 0x01	; 1
    2e2c:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    2e30:	fe 01       	movw	r30, r28
    2e32:	e1 5a       	subi	r30, 0xA1	; 161
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	a6 e1       	ldi	r26, 0x16	; 22
    2e3c:	b3 e4       	ldi	r27, 0x43	; 67
    2e3e:	80 83       	st	Z, r24
    2e40:	91 83       	std	Z+1, r25	; 0x01
    2e42:	a2 83       	std	Z+2, r26	; 0x02
    2e44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e46:	8e 01       	movw	r16, r28
    2e48:	05 5a       	subi	r16, 0xA5	; 165
    2e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e1 5a       	subi	r30, 0xA1	; 161
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	60 81       	ld	r22, Z
    2e54:	71 81       	ldd	r23, Z+1	; 0x01
    2e56:	82 81       	ldd	r24, Z+2	; 0x02
    2e58:	93 81       	ldd	r25, Z+3	; 0x03
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	4a ef       	ldi	r20, 0xFA	; 250
    2e60:	54 e4       	ldi	r21, 0x44	; 68
    2e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	f8 01       	movw	r30, r16
    2e6c:	80 83       	st	Z, r24
    2e6e:	91 83       	std	Z+1, r25	; 0x01
    2e70:	a2 83       	std	Z+2, r26	; 0x02
    2e72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e74:	fe 01       	movw	r30, r28
    2e76:	e5 5a       	subi	r30, 0xA5	; 165
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	60 81       	ld	r22, Z
    2e7c:	71 81       	ldd	r23, Z+1	; 0x01
    2e7e:	82 81       	ldd	r24, Z+2	; 0x02
    2e80:	93 81       	ldd	r25, Z+3	; 0x03
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e8       	ldi	r20, 0x80	; 128
    2e88:	5f e3       	ldi	r21, 0x3F	; 63
    2e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e8e:	88 23       	and	r24, r24
    2e90:	44 f4       	brge	.+16     	; 0x2ea2 <main+0x246>
		__ticks = 1;
    2e92:	fe 01       	movw	r30, r28
    2e94:	e7 5a       	subi	r30, 0xA7	; 167
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	80 83       	st	Z, r24
    2ea0:	64 c0       	rjmp	.+200    	; 0x2f6a <main+0x30e>
	else if (__tmp > 65535)
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e5 5a       	subi	r30, 0xA5	; 165
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	60 81       	ld	r22, Z
    2eaa:	71 81       	ldd	r23, Z+1	; 0x01
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
    2eae:	93 81       	ldd	r25, Z+3	; 0x03
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	3f ef       	ldi	r19, 0xFF	; 255
    2eb4:	4f e7       	ldi	r20, 0x7F	; 127
    2eb6:	57 e4       	ldi	r21, 0x47	; 71
    2eb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ebc:	18 16       	cp	r1, r24
    2ebe:	0c f0       	brlt	.+2      	; 0x2ec2 <main+0x266>
    2ec0:	43 c0       	rjmp	.+134    	; 0x2f48 <main+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e1 5a       	subi	r30, 0xA1	; 161
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	60 81       	ld	r22, Z
    2eca:	71 81       	ldd	r23, Z+1	; 0x01
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	93 81       	ldd	r25, Z+3	; 0x03
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e2       	ldi	r20, 0x20	; 32
    2ed6:	51 e4       	ldi	r21, 0x41	; 65
    2ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	8e 01       	movw	r16, r28
    2ee2:	07 5a       	subi	r16, 0xA7	; 167
    2ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	f8 01       	movw	r30, r16
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	80 83       	st	Z, r24
    2ef8:	1f c0       	rjmp	.+62     	; 0x2f38 <main+0x2dc>
    2efa:	fe 01       	movw	r30, r28
    2efc:	e9 5a       	subi	r30, 0xA9	; 169
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	88 ec       	ldi	r24, 0xC8	; 200
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	80 83       	st	Z, r24
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e9 5a       	subi	r30, 0xA9	; 169
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	80 81       	ld	r24, Z
    2f10:	91 81       	ldd	r25, Z+1	; 0x01
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <main+0x2b6>
    2f16:	fe 01       	movw	r30, r28
    2f18:	e9 5a       	subi	r30, 0xA9	; 169
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	91 83       	std	Z+1, r25	; 0x01
    2f1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f20:	de 01       	movw	r26, r28
    2f22:	a7 5a       	subi	r26, 0xA7	; 167
    2f24:	bf 4f       	sbci	r27, 0xFF	; 255
    2f26:	fe 01       	movw	r30, r28
    2f28:	e7 5a       	subi	r30, 0xA7	; 167
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	91 81       	ldd	r25, Z+1	; 0x01
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	11 96       	adiw	r26, 0x01	; 1
    2f34:	9c 93       	st	X, r25
    2f36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e7 5a       	subi	r30, 0xA7	; 167
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	00 97       	sbiw	r24, 0x00	; 0
    2f44:	d1 f6       	brne	.-76     	; 0x2efa <main+0x29e>
    2f46:	28 c0       	rjmp	.+80     	; 0x2f98 <main+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f48:	8e 01       	movw	r16, r28
    2f4a:	07 5a       	subi	r16, 0xA7	; 167
    2f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e5 5a       	subi	r30, 0xA5	; 165
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	60 81       	ld	r22, Z
    2f56:	71 81       	ldd	r23, Z+1	; 0x01
    2f58:	82 81       	ldd	r24, Z+2	; 0x02
    2f5a:	93 81       	ldd	r25, Z+3	; 0x03
    2f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	f8 01       	movw	r30, r16
    2f66:	91 83       	std	Z+1, r25	; 0x01
    2f68:	80 83       	st	Z, r24
    2f6a:	de 01       	movw	r26, r28
    2f6c:	ab 5a       	subi	r26, 0xAB	; 171
    2f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f70:	fe 01       	movw	r30, r28
    2f72:	e7 5a       	subi	r30, 0xA7	; 167
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	91 81       	ldd	r25, Z+1	; 0x01
    2f7a:	11 96       	adiw	r26, 0x01	; 1
    2f7c:	9c 93       	st	X, r25
    2f7e:	8e 93       	st	-X, r24
    2f80:	fe 01       	movw	r30, r28
    2f82:	eb 5a       	subi	r30, 0xAB	; 171
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 81       	ld	r24, Z
    2f88:	91 81       	ldd	r25, Z+1	; 0x01
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	f1 f7       	brne	.-4      	; 0x2f8a <main+0x32e>
    2f8e:	fe 01       	movw	r30, r28
    2f90:	eb 5a       	subi	r30, 0xAB	; 171
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	91 83       	std	Z+1, r25	; 0x01
    2f96:	80 83       	st	Z, r24
		_delay_ms(150);
		if (flag==1)
    2f98:	80 91 80 00 	lds	r24, 0x0080
    2f9c:	81 30       	cpi	r24, 0x01	; 1
    2f9e:	19 f4       	brne	.+6      	; 0x2fa6 <main+0x34a>
			{
				flag=0;
    2fa0:	10 92 80 00 	sts	0x0080, r1
    2fa4:	7b ce       	rjmp	.-778    	; 0x2c9c <main+0x40>
				continue;
			}
		DIO_vSetPinValue(PORTA, PIN1, LOW);
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	61 e0       	ldi	r22, 0x01	; 1
    2faa:	40 e0       	ldi	r20, 0x00	; 0
    2fac:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
		DIO_vSetPinValue(PORTA, PIN2, HIGH);
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	62 e0       	ldi	r22, 0x02	; 2
    2fb4:	41 e0       	ldi	r20, 0x01	; 1
    2fb6:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    2fba:	fe 01       	movw	r30, r28
    2fbc:	ef 5a       	subi	r30, 0xAF	; 175
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	a6 e1       	ldi	r26, 0x16	; 22
    2fc6:	b3 e4       	ldi	r27, 0x43	; 67
    2fc8:	80 83       	st	Z, r24
    2fca:	91 83       	std	Z+1, r25	; 0x01
    2fcc:	a2 83       	std	Z+2, r26	; 0x02
    2fce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd0:	8e 01       	movw	r16, r28
    2fd2:	03 5b       	subi	r16, 0xB3	; 179
    2fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	ef 5a       	subi	r30, 0xAF	; 175
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	60 81       	ld	r22, Z
    2fde:	71 81       	ldd	r23, Z+1	; 0x01
    2fe0:	82 81       	ldd	r24, Z+2	; 0x02
    2fe2:	93 81       	ldd	r25, Z+3	; 0x03
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	4a ef       	ldi	r20, 0xFA	; 250
    2fea:	54 e4       	ldi	r21, 0x44	; 68
    2fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	f8 01       	movw	r30, r16
    2ff6:	80 83       	st	Z, r24
    2ff8:	91 83       	std	Z+1, r25	; 0x01
    2ffa:	a2 83       	std	Z+2, r26	; 0x02
    2ffc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ffe:	fe 01       	movw	r30, r28
    3000:	e3 5b       	subi	r30, 0xB3	; 179
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	60 81       	ld	r22, Z
    3006:	71 81       	ldd	r23, Z+1	; 0x01
    3008:	82 81       	ldd	r24, Z+2	; 0x02
    300a:	93 81       	ldd	r25, Z+3	; 0x03
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e8       	ldi	r20, 0x80	; 128
    3012:	5f e3       	ldi	r21, 0x3F	; 63
    3014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3018:	88 23       	and	r24, r24
    301a:	44 f4       	brge	.+16     	; 0x302c <main+0x3d0>
		__ticks = 1;
    301c:	fe 01       	movw	r30, r28
    301e:	e5 5b       	subi	r30, 0xB5	; 181
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	91 83       	std	Z+1, r25	; 0x01
    3028:	80 83       	st	Z, r24
    302a:	64 c0       	rjmp	.+200    	; 0x30f4 <main+0x498>
	else if (__tmp > 65535)
    302c:	fe 01       	movw	r30, r28
    302e:	e3 5b       	subi	r30, 0xB3	; 179
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	60 81       	ld	r22, Z
    3034:	71 81       	ldd	r23, Z+1	; 0x01
    3036:	82 81       	ldd	r24, Z+2	; 0x02
    3038:	93 81       	ldd	r25, Z+3	; 0x03
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	3f ef       	ldi	r19, 0xFF	; 255
    303e:	4f e7       	ldi	r20, 0x7F	; 127
    3040:	57 e4       	ldi	r21, 0x47	; 71
    3042:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3046:	18 16       	cp	r1, r24
    3048:	0c f0       	brlt	.+2      	; 0x304c <main+0x3f0>
    304a:	43 c0       	rjmp	.+134    	; 0x30d2 <main+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304c:	fe 01       	movw	r30, r28
    304e:	ef 5a       	subi	r30, 0xAF	; 175
    3050:	ff 4f       	sbci	r31, 0xFF	; 255
    3052:	60 81       	ld	r22, Z
    3054:	71 81       	ldd	r23, Z+1	; 0x01
    3056:	82 81       	ldd	r24, Z+2	; 0x02
    3058:	93 81       	ldd	r25, Z+3	; 0x03
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e2       	ldi	r20, 0x20	; 32
    3060:	51 e4       	ldi	r21, 0x41	; 65
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	8e 01       	movw	r16, r28
    306c:	05 5b       	subi	r16, 0xB5	; 181
    306e:	1f 4f       	sbci	r17, 0xFF	; 255
    3070:	bc 01       	movw	r22, r24
    3072:	cd 01       	movw	r24, r26
    3074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	f8 01       	movw	r30, r16
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	80 83       	st	Z, r24
    3082:	1f c0       	rjmp	.+62     	; 0x30c2 <main+0x466>
    3084:	fe 01       	movw	r30, r28
    3086:	e7 5b       	subi	r30, 0xB7	; 183
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	88 ec       	ldi	r24, 0xC8	; 200
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	91 83       	std	Z+1, r25	; 0x01
    3090:	80 83       	st	Z, r24
    3092:	fe 01       	movw	r30, r28
    3094:	e7 5b       	subi	r30, 0xB7	; 183
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	80 81       	ld	r24, Z
    309a:	91 81       	ldd	r25, Z+1	; 0x01
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <main+0x440>
    30a0:	fe 01       	movw	r30, r28
    30a2:	e7 5b       	subi	r30, 0xB7	; 183
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	91 83       	std	Z+1, r25	; 0x01
    30a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30aa:	de 01       	movw	r26, r28
    30ac:	a5 5b       	subi	r26, 0xB5	; 181
    30ae:	bf 4f       	sbci	r27, 0xFF	; 255
    30b0:	fe 01       	movw	r30, r28
    30b2:	e5 5b       	subi	r30, 0xB5	; 181
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	11 96       	adiw	r26, 0x01	; 1
    30be:	9c 93       	st	X, r25
    30c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c2:	fe 01       	movw	r30, r28
    30c4:	e5 5b       	subi	r30, 0xB5	; 181
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 81       	ld	r24, Z
    30ca:	91 81       	ldd	r25, Z+1	; 0x01
    30cc:	00 97       	sbiw	r24, 0x00	; 0
    30ce:	d1 f6       	brne	.-76     	; 0x3084 <main+0x428>
    30d0:	28 c0       	rjmp	.+80     	; 0x3122 <main+0x4c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d2:	8e 01       	movw	r16, r28
    30d4:	05 5b       	subi	r16, 0xB5	; 181
    30d6:	1f 4f       	sbci	r17, 0xFF	; 255
    30d8:	fe 01       	movw	r30, r28
    30da:	e3 5b       	subi	r30, 0xB3	; 179
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	60 81       	ld	r22, Z
    30e0:	71 81       	ldd	r23, Z+1	; 0x01
    30e2:	82 81       	ldd	r24, Z+2	; 0x02
    30e4:	93 81       	ldd	r25, Z+3	; 0x03
    30e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	f8 01       	movw	r30, r16
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	80 83       	st	Z, r24
    30f4:	de 01       	movw	r26, r28
    30f6:	a9 5b       	subi	r26, 0xB9	; 185
    30f8:	bf 4f       	sbci	r27, 0xFF	; 255
    30fa:	fe 01       	movw	r30, r28
    30fc:	e5 5b       	subi	r30, 0xB5	; 181
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	80 81       	ld	r24, Z
    3102:	91 81       	ldd	r25, Z+1	; 0x01
    3104:	11 96       	adiw	r26, 0x01	; 1
    3106:	9c 93       	st	X, r25
    3108:	8e 93       	st	-X, r24
    310a:	fe 01       	movw	r30, r28
    310c:	e9 5b       	subi	r30, 0xB9	; 185
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	80 81       	ld	r24, Z
    3112:	91 81       	ldd	r25, Z+1	; 0x01
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <main+0x4b8>
    3118:	fe 01       	movw	r30, r28
    311a:	e9 5b       	subi	r30, 0xB9	; 185
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	91 83       	std	Z+1, r25	; 0x01
    3120:	80 83       	st	Z, r24
		_delay_ms(150);
		if (flag==1)
    3122:	80 91 80 00 	lds	r24, 0x0080
    3126:	81 30       	cpi	r24, 0x01	; 1
    3128:	19 f4       	brne	.+6      	; 0x3130 <main+0x4d4>
			{
				flag=0;
    312a:	10 92 80 00 	sts	0x0080, r1
    312e:	b6 cd       	rjmp	.-1172   	; 0x2c9c <main+0x40>
				continue;
			}
		DIO_vSetPinValue(PORTA, PIN2, LOW);
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	62 e0       	ldi	r22, 0x02	; 2
    3134:	40 e0       	ldi	r20, 0x00	; 0
    3136:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
		DIO_vSetPinValue(PORTA, PIN3, HIGH);
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	63 e0       	ldi	r22, 0x03	; 3
    313e:	41 e0       	ldi	r20, 0x01	; 1
    3140:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    3144:	fe 01       	movw	r30, r28
    3146:	ed 5b       	subi	r30, 0xBD	; 189
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	a6 e1       	ldi	r26, 0x16	; 22
    3150:	b3 e4       	ldi	r27, 0x43	; 67
    3152:	80 83       	st	Z, r24
    3154:	91 83       	std	Z+1, r25	; 0x01
    3156:	a2 83       	std	Z+2, r26	; 0x02
    3158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315a:	8e 01       	movw	r16, r28
    315c:	01 5c       	subi	r16, 0xC1	; 193
    315e:	1f 4f       	sbci	r17, 0xFF	; 255
    3160:	fe 01       	movw	r30, r28
    3162:	ed 5b       	subi	r30, 0xBD	; 189
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	60 81       	ld	r22, Z
    3168:	71 81       	ldd	r23, Z+1	; 0x01
    316a:	82 81       	ldd	r24, Z+2	; 0x02
    316c:	93 81       	ldd	r25, Z+3	; 0x03
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	4a ef       	ldi	r20, 0xFA	; 250
    3174:	54 e4       	ldi	r21, 0x44	; 68
    3176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	f8 01       	movw	r30, r16
    3180:	80 83       	st	Z, r24
    3182:	91 83       	std	Z+1, r25	; 0x01
    3184:	a2 83       	std	Z+2, r26	; 0x02
    3186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3188:	fe 01       	movw	r30, r28
    318a:	ff 96       	adiw	r30, 0x3f	; 63
    318c:	60 81       	ld	r22, Z
    318e:	71 81       	ldd	r23, Z+1	; 0x01
    3190:	82 81       	ldd	r24, Z+2	; 0x02
    3192:	93 81       	ldd	r25, Z+3	; 0x03
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e8       	ldi	r20, 0x80	; 128
    319a:	5f e3       	ldi	r21, 0x3F	; 63
    319c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31a0:	88 23       	and	r24, r24
    31a2:	2c f4       	brge	.+10     	; 0x31ae <main+0x552>
		__ticks = 1;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	9e af       	std	Y+62, r25	; 0x3e
    31aa:	8d af       	std	Y+61, r24	; 0x3d
    31ac:	46 c0       	rjmp	.+140    	; 0x323a <main+0x5de>
	else if (__tmp > 65535)
    31ae:	fe 01       	movw	r30, r28
    31b0:	ff 96       	adiw	r30, 0x3f	; 63
    31b2:	60 81       	ld	r22, Z
    31b4:	71 81       	ldd	r23, Z+1	; 0x01
    31b6:	82 81       	ldd	r24, Z+2	; 0x02
    31b8:	93 81       	ldd	r25, Z+3	; 0x03
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	3f ef       	ldi	r19, 0xFF	; 255
    31be:	4f e7       	ldi	r20, 0x7F	; 127
    31c0:	57 e4       	ldi	r21, 0x47	; 71
    31c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31c6:	18 16       	cp	r1, r24
    31c8:	64 f5       	brge	.+88     	; 0x3222 <main+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ca:	fe 01       	movw	r30, r28
    31cc:	ed 5b       	subi	r30, 0xBD	; 189
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	60 81       	ld	r22, Z
    31d2:	71 81       	ldd	r23, Z+1	; 0x01
    31d4:	82 81       	ldd	r24, Z+2	; 0x02
    31d6:	93 81       	ldd	r25, Z+3	; 0x03
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	40 e2       	ldi	r20, 0x20	; 32
    31de:	51 e4       	ldi	r21, 0x41	; 65
    31e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	bc 01       	movw	r22, r24
    31ea:	cd 01       	movw	r24, r26
    31ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	9e af       	std	Y+62, r25	; 0x3e
    31f6:	8d af       	std	Y+61, r24	; 0x3d
    31f8:	0f c0       	rjmp	.+30     	; 0x3218 <main+0x5bc>
    31fa:	88 ec       	ldi	r24, 0xC8	; 200
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	9c af       	std	Y+60, r25	; 0x3c
    3200:	8b af       	std	Y+59, r24	; 0x3b
    3202:	8b ad       	ldd	r24, Y+59	; 0x3b
    3204:	9c ad       	ldd	r25, Y+60	; 0x3c
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <main+0x5aa>
    320a:	9c af       	std	Y+60, r25	; 0x3c
    320c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3210:	9e ad       	ldd	r25, Y+62	; 0x3e
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	9e af       	std	Y+62, r25	; 0x3e
    3216:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3218:	8d ad       	ldd	r24, Y+61	; 0x3d
    321a:	9e ad       	ldd	r25, Y+62	; 0x3e
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	69 f7       	brne	.-38     	; 0x31fa <main+0x59e>
    3220:	16 c0       	rjmp	.+44     	; 0x324e <main+0x5f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3222:	fe 01       	movw	r30, r28
    3224:	ff 96       	adiw	r30, 0x3f	; 63
    3226:	60 81       	ld	r22, Z
    3228:	71 81       	ldd	r23, Z+1	; 0x01
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	93 81       	ldd	r25, Z+3	; 0x03
    322e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	9e af       	std	Y+62, r25	; 0x3e
    3238:	8d af       	std	Y+61, r24	; 0x3d
    323a:	8d ad       	ldd	r24, Y+61	; 0x3d
    323c:	9e ad       	ldd	r25, Y+62	; 0x3e
    323e:	9a af       	std	Y+58, r25	; 0x3a
    3240:	89 af       	std	Y+57, r24	; 0x39
    3242:	89 ad       	ldd	r24, Y+57	; 0x39
    3244:	9a ad       	ldd	r25, Y+58	; 0x3a
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <main+0x5ea>
    324a:	9a af       	std	Y+58, r25	; 0x3a
    324c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(150);
		if (flag==1)
    324e:	80 91 80 00 	lds	r24, 0x0080
    3252:	81 30       	cpi	r24, 0x01	; 1
    3254:	19 f4       	brne	.+6      	; 0x325c <main+0x600>
			{
				flag=0;
    3256:	10 92 80 00 	sts	0x0080, r1
    325a:	20 cd       	rjmp	.-1472   	; 0x2c9c <main+0x40>
				continue;
			}
		DIO_vSetPinValue(PORTA, PIN3, LOW);
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	63 e0       	ldi	r22, 0x03	; 3
    3260:	40 e0       	ldi	r20, 0x00	; 0
    3262:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
		DIO_vSetPinValue(PORTA, PIN4, HIGH);
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	64 e0       	ldi	r22, 0x04	; 4
    326a:	41 e0       	ldi	r20, 0x01	; 1
    326c:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	a6 e1       	ldi	r26, 0x16	; 22
    3276:	b3 e4       	ldi	r27, 0x43	; 67
    3278:	8d ab       	std	Y+53, r24	; 0x35
    327a:	9e ab       	std	Y+54, r25	; 0x36
    327c:	af ab       	std	Y+55, r26	; 0x37
    327e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3280:	6d a9       	ldd	r22, Y+53	; 0x35
    3282:	7e a9       	ldd	r23, Y+54	; 0x36
    3284:	8f a9       	ldd	r24, Y+55	; 0x37
    3286:	98 ad       	ldd	r25, Y+56	; 0x38
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	4a ef       	ldi	r20, 0xFA	; 250
    328e:	54 e4       	ldi	r21, 0x44	; 68
    3290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	89 ab       	std	Y+49, r24	; 0x31
    329a:	9a ab       	std	Y+50, r25	; 0x32
    329c:	ab ab       	std	Y+51, r26	; 0x33
    329e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32a0:	69 a9       	ldd	r22, Y+49	; 0x31
    32a2:	7a a9       	ldd	r23, Y+50	; 0x32
    32a4:	8b a9       	ldd	r24, Y+51	; 0x33
    32a6:	9c a9       	ldd	r25, Y+52	; 0x34
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e8       	ldi	r20, 0x80	; 128
    32ae:	5f e3       	ldi	r21, 0x3F	; 63
    32b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b4:	88 23       	and	r24, r24
    32b6:	2c f4       	brge	.+10     	; 0x32c2 <main+0x666>
		__ticks = 1;
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	98 ab       	std	Y+48, r25	; 0x30
    32be:	8f a7       	std	Y+47, r24	; 0x2f
    32c0:	3f c0       	rjmp	.+126    	; 0x3340 <main+0x6e4>
	else if (__tmp > 65535)
    32c2:	69 a9       	ldd	r22, Y+49	; 0x31
    32c4:	7a a9       	ldd	r23, Y+50	; 0x32
    32c6:	8b a9       	ldd	r24, Y+51	; 0x33
    32c8:	9c a9       	ldd	r25, Y+52	; 0x34
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	3f ef       	ldi	r19, 0xFF	; 255
    32ce:	4f e7       	ldi	r20, 0x7F	; 127
    32d0:	57 e4       	ldi	r21, 0x47	; 71
    32d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32d6:	18 16       	cp	r1, r24
    32d8:	4c f5       	brge	.+82     	; 0x332c <main+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32da:	6d a9       	ldd	r22, Y+53	; 0x35
    32dc:	7e a9       	ldd	r23, Y+54	; 0x36
    32de:	8f a9       	ldd	r24, Y+55	; 0x37
    32e0:	98 ad       	ldd	r25, Y+56	; 0x38
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	40 e2       	ldi	r20, 0x20	; 32
    32e8:	51 e4       	ldi	r21, 0x41	; 65
    32ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	bc 01       	movw	r22, r24
    32f4:	cd 01       	movw	r24, r26
    32f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	98 ab       	std	Y+48, r25	; 0x30
    3300:	8f a7       	std	Y+47, r24	; 0x2f
    3302:	0f c0       	rjmp	.+30     	; 0x3322 <main+0x6c6>
    3304:	88 ec       	ldi	r24, 0xC8	; 200
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	9e a7       	std	Y+46, r25	; 0x2e
    330a:	8d a7       	std	Y+45, r24	; 0x2d
    330c:	8d a5       	ldd	r24, Y+45	; 0x2d
    330e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	f1 f7       	brne	.-4      	; 0x3310 <main+0x6b4>
    3314:	9e a7       	std	Y+46, r25	; 0x2e
    3316:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3318:	8f a5       	ldd	r24, Y+47	; 0x2f
    331a:	98 a9       	ldd	r25, Y+48	; 0x30
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	98 ab       	std	Y+48, r25	; 0x30
    3320:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3322:	8f a5       	ldd	r24, Y+47	; 0x2f
    3324:	98 a9       	ldd	r25, Y+48	; 0x30
    3326:	00 97       	sbiw	r24, 0x00	; 0
    3328:	69 f7       	brne	.-38     	; 0x3304 <main+0x6a8>
    332a:	14 c0       	rjmp	.+40     	; 0x3354 <main+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    332c:	69 a9       	ldd	r22, Y+49	; 0x31
    332e:	7a a9       	ldd	r23, Y+50	; 0x32
    3330:	8b a9       	ldd	r24, Y+51	; 0x33
    3332:	9c a9       	ldd	r25, Y+52	; 0x34
    3334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	98 ab       	std	Y+48, r25	; 0x30
    333e:	8f a7       	std	Y+47, r24	; 0x2f
    3340:	8f a5       	ldd	r24, Y+47	; 0x2f
    3342:	98 a9       	ldd	r25, Y+48	; 0x30
    3344:	9c a7       	std	Y+44, r25	; 0x2c
    3346:	8b a7       	std	Y+43, r24	; 0x2b
    3348:	8b a5       	ldd	r24, Y+43	; 0x2b
    334a:	9c a5       	ldd	r25, Y+44	; 0x2c
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	f1 f7       	brne	.-4      	; 0x334c <main+0x6f0>
    3350:	9c a7       	std	Y+44, r25	; 0x2c
    3352:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(150);
		if (flag==1)
    3354:	80 91 80 00 	lds	r24, 0x0080
    3358:	81 30       	cpi	r24, 0x01	; 1
    335a:	19 f4       	brne	.+6      	; 0x3362 <main+0x706>
			{
				flag=0;
    335c:	10 92 80 00 	sts	0x0080, r1
    3360:	9d cc       	rjmp	.-1734   	; 0x2c9c <main+0x40>
				continue;
			}
		DIO_vSetPinValue(PORTA, PIN4, LOW);
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	64 e0       	ldi	r22, 0x04	; 4
    3366:	40 e0       	ldi	r20, 0x00	; 0
    3368:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
		DIO_vSetPinValue(PORTA, PIN5, HIGH);
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	65 e0       	ldi	r22, 0x05	; 5
    3370:	41 e0       	ldi	r20, 0x01	; 1
    3372:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	a6 e1       	ldi	r26, 0x16	; 22
    337c:	b3 e4       	ldi	r27, 0x43	; 67
    337e:	8f a3       	std	Y+39, r24	; 0x27
    3380:	98 a7       	std	Y+40, r25	; 0x28
    3382:	a9 a7       	std	Y+41, r26	; 0x29
    3384:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3386:	6f a1       	ldd	r22, Y+39	; 0x27
    3388:	78 a5       	ldd	r23, Y+40	; 0x28
    338a:	89 a5       	ldd	r24, Y+41	; 0x29
    338c:	9a a5       	ldd	r25, Y+42	; 0x2a
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	4a ef       	ldi	r20, 0xFA	; 250
    3394:	54 e4       	ldi	r21, 0x44	; 68
    3396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	8b a3       	std	Y+35, r24	; 0x23
    33a0:	9c a3       	std	Y+36, r25	; 0x24
    33a2:	ad a3       	std	Y+37, r26	; 0x25
    33a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33a6:	6b a1       	ldd	r22, Y+35	; 0x23
    33a8:	7c a1       	ldd	r23, Y+36	; 0x24
    33aa:	8d a1       	ldd	r24, Y+37	; 0x25
    33ac:	9e a1       	ldd	r25, Y+38	; 0x26
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e8       	ldi	r20, 0x80	; 128
    33b4:	5f e3       	ldi	r21, 0x3F	; 63
    33b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ba:	88 23       	and	r24, r24
    33bc:	2c f4       	brge	.+10     	; 0x33c8 <main+0x76c>
		__ticks = 1;
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	9a a3       	std	Y+34, r25	; 0x22
    33c4:	89 a3       	std	Y+33, r24	; 0x21
    33c6:	3f c0       	rjmp	.+126    	; 0x3446 <main+0x7ea>
	else if (__tmp > 65535)
    33c8:	6b a1       	ldd	r22, Y+35	; 0x23
    33ca:	7c a1       	ldd	r23, Y+36	; 0x24
    33cc:	8d a1       	ldd	r24, Y+37	; 0x25
    33ce:	9e a1       	ldd	r25, Y+38	; 0x26
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	3f ef       	ldi	r19, 0xFF	; 255
    33d4:	4f e7       	ldi	r20, 0x7F	; 127
    33d6:	57 e4       	ldi	r21, 0x47	; 71
    33d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33dc:	18 16       	cp	r1, r24
    33de:	4c f5       	brge	.+82     	; 0x3432 <main+0x7d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e0:	6f a1       	ldd	r22, Y+39	; 0x27
    33e2:	78 a5       	ldd	r23, Y+40	; 0x28
    33e4:	89 a5       	ldd	r24, Y+41	; 0x29
    33e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e2       	ldi	r20, 0x20	; 32
    33ee:	51 e4       	ldi	r21, 0x41	; 65
    33f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	bc 01       	movw	r22, r24
    33fa:	cd 01       	movw	r24, r26
    33fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	9a a3       	std	Y+34, r25	; 0x22
    3406:	89 a3       	std	Y+33, r24	; 0x21
    3408:	0f c0       	rjmp	.+30     	; 0x3428 <main+0x7cc>
    340a:	88 ec       	ldi	r24, 0xC8	; 200
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	98 a3       	std	Y+32, r25	; 0x20
    3410:	8f 8f       	std	Y+31, r24	; 0x1f
    3412:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3414:	98 a1       	ldd	r25, Y+32	; 0x20
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	f1 f7       	brne	.-4      	; 0x3416 <main+0x7ba>
    341a:	98 a3       	std	Y+32, r25	; 0x20
    341c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341e:	89 a1       	ldd	r24, Y+33	; 0x21
    3420:	9a a1       	ldd	r25, Y+34	; 0x22
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	9a a3       	std	Y+34, r25	; 0x22
    3426:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3428:	89 a1       	ldd	r24, Y+33	; 0x21
    342a:	9a a1       	ldd	r25, Y+34	; 0x22
    342c:	00 97       	sbiw	r24, 0x00	; 0
    342e:	69 f7       	brne	.-38     	; 0x340a <main+0x7ae>
    3430:	14 c0       	rjmp	.+40     	; 0x345a <main+0x7fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3432:	6b a1       	ldd	r22, Y+35	; 0x23
    3434:	7c a1       	ldd	r23, Y+36	; 0x24
    3436:	8d a1       	ldd	r24, Y+37	; 0x25
    3438:	9e a1       	ldd	r25, Y+38	; 0x26
    343a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	9a a3       	std	Y+34, r25	; 0x22
    3444:	89 a3       	std	Y+33, r24	; 0x21
    3446:	89 a1       	ldd	r24, Y+33	; 0x21
    3448:	9a a1       	ldd	r25, Y+34	; 0x22
    344a:	9e 8f       	std	Y+30, r25	; 0x1e
    344c:	8d 8f       	std	Y+29, r24	; 0x1d
    344e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3450:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3452:	01 97       	sbiw	r24, 0x01	; 1
    3454:	f1 f7       	brne	.-4      	; 0x3452 <main+0x7f6>
    3456:	9e 8f       	std	Y+30, r25	; 0x1e
    3458:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(150);
		if (flag==1)
    345a:	80 91 80 00 	lds	r24, 0x0080
    345e:	81 30       	cpi	r24, 0x01	; 1
    3460:	19 f4       	brne	.+6      	; 0x3468 <main+0x80c>
			{
				flag=0;
    3462:	10 92 80 00 	sts	0x0080, r1
    3466:	1a cc       	rjmp	.-1996   	; 0x2c9c <main+0x40>
				continue;
			}
		DIO_vSetPinValue(PORTA, PIN5, LOW);
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	65 e0       	ldi	r22, 0x05	; 5
    346c:	40 e0       	ldi	r20, 0x00	; 0
    346e:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
		DIO_vSetPinValue(PORTA, PIN6, HIGH);
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	66 e0       	ldi	r22, 0x06	; 6
    3476:	41 e0       	ldi	r20, 0x01	; 1
    3478:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	a6 e1       	ldi	r26, 0x16	; 22
    3482:	b3 e4       	ldi	r27, 0x43	; 67
    3484:	89 8f       	std	Y+25, r24	; 0x19
    3486:	9a 8f       	std	Y+26, r25	; 0x1a
    3488:	ab 8f       	std	Y+27, r26	; 0x1b
    348a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    348c:	69 8d       	ldd	r22, Y+25	; 0x19
    348e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	4a ef       	ldi	r20, 0xFA	; 250
    349a:	54 e4       	ldi	r21, 0x44	; 68
    349c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	8d 8b       	std	Y+21, r24	; 0x15
    34a6:	9e 8b       	std	Y+22, r25	; 0x16
    34a8:	af 8b       	std	Y+23, r26	; 0x17
    34aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34ac:	6d 89       	ldd	r22, Y+21	; 0x15
    34ae:	7e 89       	ldd	r23, Y+22	; 0x16
    34b0:	8f 89       	ldd	r24, Y+23	; 0x17
    34b2:	98 8d       	ldd	r25, Y+24	; 0x18
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e8       	ldi	r20, 0x80	; 128
    34ba:	5f e3       	ldi	r21, 0x3F	; 63
    34bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34c0:	88 23       	and	r24, r24
    34c2:	2c f4       	brge	.+10     	; 0x34ce <main+0x872>
		__ticks = 1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	9c 8b       	std	Y+20, r25	; 0x14
    34ca:	8b 8b       	std	Y+19, r24	; 0x13
    34cc:	3f c0       	rjmp	.+126    	; 0x354c <main+0x8f0>
	else if (__tmp > 65535)
    34ce:	6d 89       	ldd	r22, Y+21	; 0x15
    34d0:	7e 89       	ldd	r23, Y+22	; 0x16
    34d2:	8f 89       	ldd	r24, Y+23	; 0x17
    34d4:	98 8d       	ldd	r25, Y+24	; 0x18
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	3f ef       	ldi	r19, 0xFF	; 255
    34da:	4f e7       	ldi	r20, 0x7F	; 127
    34dc:	57 e4       	ldi	r21, 0x47	; 71
    34de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34e2:	18 16       	cp	r1, r24
    34e4:	4c f5       	brge	.+82     	; 0x3538 <main+0x8dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e6:	69 8d       	ldd	r22, Y+25	; 0x19
    34e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e2       	ldi	r20, 0x20	; 32
    34f4:	51 e4       	ldi	r21, 0x41	; 65
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	9c 8b       	std	Y+20, r25	; 0x14
    350c:	8b 8b       	std	Y+19, r24	; 0x13
    350e:	0f c0       	rjmp	.+30     	; 0x352e <main+0x8d2>
    3510:	88 ec       	ldi	r24, 0xC8	; 200
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	9a 8b       	std	Y+18, r25	; 0x12
    3516:	89 8b       	std	Y+17, r24	; 0x11
    3518:	89 89       	ldd	r24, Y+17	; 0x11
    351a:	9a 89       	ldd	r25, Y+18	; 0x12
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	f1 f7       	brne	.-4      	; 0x351c <main+0x8c0>
    3520:	9a 8b       	std	Y+18, r25	; 0x12
    3522:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3524:	8b 89       	ldd	r24, Y+19	; 0x13
    3526:	9c 89       	ldd	r25, Y+20	; 0x14
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	9c 8b       	std	Y+20, r25	; 0x14
    352c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352e:	8b 89       	ldd	r24, Y+19	; 0x13
    3530:	9c 89       	ldd	r25, Y+20	; 0x14
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	69 f7       	brne	.-38     	; 0x3510 <main+0x8b4>
    3536:	14 c0       	rjmp	.+40     	; 0x3560 <main+0x904>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3538:	6d 89       	ldd	r22, Y+21	; 0x15
    353a:	7e 89       	ldd	r23, Y+22	; 0x16
    353c:	8f 89       	ldd	r24, Y+23	; 0x17
    353e:	98 8d       	ldd	r25, Y+24	; 0x18
    3540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	9c 8b       	std	Y+20, r25	; 0x14
    354a:	8b 8b       	std	Y+19, r24	; 0x13
    354c:	8b 89       	ldd	r24, Y+19	; 0x13
    354e:	9c 89       	ldd	r25, Y+20	; 0x14
    3550:	98 8b       	std	Y+16, r25	; 0x10
    3552:	8f 87       	std	Y+15, r24	; 0x0f
    3554:	8f 85       	ldd	r24, Y+15	; 0x0f
    3556:	98 89       	ldd	r25, Y+16	; 0x10
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <main+0x8fc>
    355c:	98 8b       	std	Y+16, r25	; 0x10
    355e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(150);
		if (flag==1)
    3560:	80 91 80 00 	lds	r24, 0x0080
    3564:	81 30       	cpi	r24, 0x01	; 1
    3566:	19 f4       	brne	.+6      	; 0x356e <main+0x912>
			{
				flag=0;
    3568:	10 92 80 00 	sts	0x0080, r1
    356c:	97 cb       	rjmp	.-2258   	; 0x2c9c <main+0x40>
				continue;
			}
		DIO_vSetPinValue(PORTA, PIN6, LOW);
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	66 e0       	ldi	r22, 0x06	; 6
    3572:	40 e0       	ldi	r20, 0x00	; 0
    3574:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
		DIO_vSetPinValue(PORTA, PIN7, HIGH);
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	67 e0       	ldi	r22, 0x07	; 7
    357c:	41 e0       	ldi	r20, 0x01	; 1
    357e:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	a6 e1       	ldi	r26, 0x16	; 22
    3588:	b3 e4       	ldi	r27, 0x43	; 67
    358a:	8b 87       	std	Y+11, r24	; 0x0b
    358c:	9c 87       	std	Y+12, r25	; 0x0c
    358e:	ad 87       	std	Y+13, r26	; 0x0d
    3590:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3592:	6b 85       	ldd	r22, Y+11	; 0x0b
    3594:	7c 85       	ldd	r23, Y+12	; 0x0c
    3596:	8d 85       	ldd	r24, Y+13	; 0x0d
    3598:	9e 85       	ldd	r25, Y+14	; 0x0e
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	4a ef       	ldi	r20, 0xFA	; 250
    35a0:	54 e4       	ldi	r21, 0x44	; 68
    35a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	8f 83       	std	Y+7, r24	; 0x07
    35ac:	98 87       	std	Y+8, r25	; 0x08
    35ae:	a9 87       	std	Y+9, r26	; 0x09
    35b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35b2:	6f 81       	ldd	r22, Y+7	; 0x07
    35b4:	78 85       	ldd	r23, Y+8	; 0x08
    35b6:	89 85       	ldd	r24, Y+9	; 0x09
    35b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	40 e8       	ldi	r20, 0x80	; 128
    35c0:	5f e3       	ldi	r21, 0x3F	; 63
    35c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35c6:	88 23       	and	r24, r24
    35c8:	2c f4       	brge	.+10     	; 0x35d4 <main+0x978>
		__ticks = 1;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	9e 83       	std	Y+6, r25	; 0x06
    35d0:	8d 83       	std	Y+5, r24	; 0x05
    35d2:	3f c0       	rjmp	.+126    	; 0x3652 <main+0x9f6>
	else if (__tmp > 65535)
    35d4:	6f 81       	ldd	r22, Y+7	; 0x07
    35d6:	78 85       	ldd	r23, Y+8	; 0x08
    35d8:	89 85       	ldd	r24, Y+9	; 0x09
    35da:	9a 85       	ldd	r25, Y+10	; 0x0a
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	3f ef       	ldi	r19, 0xFF	; 255
    35e0:	4f e7       	ldi	r20, 0x7F	; 127
    35e2:	57 e4       	ldi	r21, 0x47	; 71
    35e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35e8:	18 16       	cp	r1, r24
    35ea:	4c f5       	brge	.+82     	; 0x363e <main+0x9e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	40 e2       	ldi	r20, 0x20	; 32
    35fa:	51 e4       	ldi	r21, 0x41	; 65
    35fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	bc 01       	movw	r22, r24
    3606:	cd 01       	movw	r24, r26
    3608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360c:	dc 01       	movw	r26, r24
    360e:	cb 01       	movw	r24, r22
    3610:	9e 83       	std	Y+6, r25	; 0x06
    3612:	8d 83       	std	Y+5, r24	; 0x05
    3614:	0f c0       	rjmp	.+30     	; 0x3634 <main+0x9d8>
    3616:	88 ec       	ldi	r24, 0xC8	; 200
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	9c 83       	std	Y+4, r25	; 0x04
    361c:	8b 83       	std	Y+3, r24	; 0x03
    361e:	8b 81       	ldd	r24, Y+3	; 0x03
    3620:	9c 81       	ldd	r25, Y+4	; 0x04
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	f1 f7       	brne	.-4      	; 0x3622 <main+0x9c6>
    3626:	9c 83       	std	Y+4, r25	; 0x04
    3628:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362a:	8d 81       	ldd	r24, Y+5	; 0x05
    362c:	9e 81       	ldd	r25, Y+6	; 0x06
    362e:	01 97       	sbiw	r24, 0x01	; 1
    3630:	9e 83       	std	Y+6, r25	; 0x06
    3632:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3634:	8d 81       	ldd	r24, Y+5	; 0x05
    3636:	9e 81       	ldd	r25, Y+6	; 0x06
    3638:	00 97       	sbiw	r24, 0x00	; 0
    363a:	69 f7       	brne	.-38     	; 0x3616 <main+0x9ba>
    363c:	14 c0       	rjmp	.+40     	; 0x3666 <main+0xa0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    363e:	6f 81       	ldd	r22, Y+7	; 0x07
    3640:	78 85       	ldd	r23, Y+8	; 0x08
    3642:	89 85       	ldd	r24, Y+9	; 0x09
    3644:	9a 85       	ldd	r25, Y+10	; 0x0a
    3646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	9e 83       	std	Y+6, r25	; 0x06
    3650:	8d 83       	std	Y+5, r24	; 0x05
    3652:	8d 81       	ldd	r24, Y+5	; 0x05
    3654:	9e 81       	ldd	r25, Y+6	; 0x06
    3656:	9a 83       	std	Y+2, r25	; 0x02
    3658:	89 83       	std	Y+1, r24	; 0x01
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	9a 81       	ldd	r25, Y+2	; 0x02
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	f1 f7       	brne	.-4      	; 0x365e <main+0xa02>
    3662:	9a 83       	std	Y+2, r25	; 0x02
    3664:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(150);
		if (flag==1)
    3666:	80 91 80 00 	lds	r24, 0x0080
    366a:	81 30       	cpi	r24, 0x01	; 1
    366c:	19 f4       	brne	.+6      	; 0x3674 <main+0xa18>
			{
				flag=0;
    366e:	10 92 80 00 	sts	0x0080, r1
    3672:	14 cb       	rjmp	.-2520   	; 0x2c9c <main+0x40>
				continue;
			}
		DIO_vSetPinValue(PORTA, PIN7, LOW);
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	67 e0       	ldi	r22, 0x07	; 7
    3678:	40 e0       	ldi	r20, 0x00	; 0
    367a:	0e 94 5f 07 	call	0xebe	; 0xebe <DIO_vSetPinValue>
    367e:	0e cb       	rjmp	.-2532   	; 0x2c9c <main+0x40>

00003680 <__vector_1>:
	}
}

void __vector_1(void)	__attribute__((signal));
void __vector_1(void)
{
    3680:	1f 92       	push	r1
    3682:	0f 92       	push	r0
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	0f 92       	push	r0
    3688:	11 24       	eor	r1, r1
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	2f 93       	push	r18
    3690:	3f 93       	push	r19
    3692:	4f 93       	push	r20
    3694:	5f 93       	push	r21
    3696:	6f 93       	push	r22
    3698:	7f 93       	push	r23
    369a:	8f 93       	push	r24
    369c:	9f 93       	push	r25
    369e:	af 93       	push	r26
    36a0:	bf 93       	push	r27
    36a2:	ef 93       	push	r30
    36a4:	ff 93       	push	r31
    36a6:	df 93       	push	r29
    36a8:	cf 93       	push	r28
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    36ae:	c4 55       	subi	r28, 0x54	; 84
    36b0:	d0 40       	sbci	r29, 0x00	; 0
    36b2:	de bf       	out	0x3e, r29	; 62
    36b4:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetGroupValue(PORTA, 0xFF);
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	6f ef       	ldi	r22, 0xFF	; 255
    36ba:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_vSetGroupValue>
    36be:	fe 01       	movw	r30, r28
    36c0:	ef 5a       	subi	r30, 0xAF	; 175
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	a6 e1       	ldi	r26, 0x16	; 22
    36ca:	b3 e4       	ldi	r27, 0x43	; 67
    36cc:	80 83       	st	Z, r24
    36ce:	91 83       	std	Z+1, r25	; 0x01
    36d0:	a2 83       	std	Z+2, r26	; 0x02
    36d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d4:	8e 01       	movw	r16, r28
    36d6:	03 5b       	subi	r16, 0xB3	; 179
    36d8:	1f 4f       	sbci	r17, 0xFF	; 255
    36da:	fe 01       	movw	r30, r28
    36dc:	ef 5a       	subi	r30, 0xAF	; 175
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	60 81       	ld	r22, Z
    36e2:	71 81       	ldd	r23, Z+1	; 0x01
    36e4:	82 81       	ldd	r24, Z+2	; 0x02
    36e6:	93 81       	ldd	r25, Z+3	; 0x03
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	4a ef       	ldi	r20, 0xFA	; 250
    36ee:	54 e4       	ldi	r21, 0x44	; 68
    36f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	f8 01       	movw	r30, r16
    36fa:	80 83       	st	Z, r24
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	a2 83       	std	Z+2, r26	; 0x02
    3700:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3702:	fe 01       	movw	r30, r28
    3704:	e3 5b       	subi	r30, 0xB3	; 179
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	60 81       	ld	r22, Z
    370a:	71 81       	ldd	r23, Z+1	; 0x01
    370c:	82 81       	ldd	r24, Z+2	; 0x02
    370e:	93 81       	ldd	r25, Z+3	; 0x03
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	40 e8       	ldi	r20, 0x80	; 128
    3716:	5f e3       	ldi	r21, 0x3F	; 63
    3718:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    371c:	88 23       	and	r24, r24
    371e:	44 f4       	brge	.+16     	; 0x3730 <__vector_1+0xb0>
		__ticks = 1;
    3720:	fe 01       	movw	r30, r28
    3722:	e5 5b       	subi	r30, 0xB5	; 181
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	91 83       	std	Z+1, r25	; 0x01
    372c:	80 83       	st	Z, r24
    372e:	64 c0       	rjmp	.+200    	; 0x37f8 <__vector_1+0x178>
	else if (__tmp > 65535)
    3730:	fe 01       	movw	r30, r28
    3732:	e3 5b       	subi	r30, 0xB3	; 179
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	60 81       	ld	r22, Z
    3738:	71 81       	ldd	r23, Z+1	; 0x01
    373a:	82 81       	ldd	r24, Z+2	; 0x02
    373c:	93 81       	ldd	r25, Z+3	; 0x03
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	3f ef       	ldi	r19, 0xFF	; 255
    3742:	4f e7       	ldi	r20, 0x7F	; 127
    3744:	57 e4       	ldi	r21, 0x47	; 71
    3746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    374a:	18 16       	cp	r1, r24
    374c:	0c f0       	brlt	.+2      	; 0x3750 <__vector_1+0xd0>
    374e:	43 c0       	rjmp	.+134    	; 0x37d6 <__vector_1+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3750:	fe 01       	movw	r30, r28
    3752:	ef 5a       	subi	r30, 0xAF	; 175
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	60 81       	ld	r22, Z
    3758:	71 81       	ldd	r23, Z+1	; 0x01
    375a:	82 81       	ldd	r24, Z+2	; 0x02
    375c:	93 81       	ldd	r25, Z+3	; 0x03
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e2       	ldi	r20, 0x20	; 32
    3764:	51 e4       	ldi	r21, 0x41	; 65
    3766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	8e 01       	movw	r16, r28
    3770:	05 5b       	subi	r16, 0xB5	; 181
    3772:	1f 4f       	sbci	r17, 0xFF	; 255
    3774:	bc 01       	movw	r22, r24
    3776:	cd 01       	movw	r24, r26
    3778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	f8 01       	movw	r30, r16
    3782:	91 83       	std	Z+1, r25	; 0x01
    3784:	80 83       	st	Z, r24
    3786:	1f c0       	rjmp	.+62     	; 0x37c6 <__vector_1+0x146>
    3788:	fe 01       	movw	r30, r28
    378a:	e7 5b       	subi	r30, 0xB7	; 183
    378c:	ff 4f       	sbci	r31, 0xFF	; 255
    378e:	88 ec       	ldi	r24, 0xC8	; 200
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	91 83       	std	Z+1, r25	; 0x01
    3794:	80 83       	st	Z, r24
    3796:	fe 01       	movw	r30, r28
    3798:	e7 5b       	subi	r30, 0xB7	; 183
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	80 81       	ld	r24, Z
    379e:	91 81       	ldd	r25, Z+1	; 0x01
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	f1 f7       	brne	.-4      	; 0x37a0 <__vector_1+0x120>
    37a4:	fe 01       	movw	r30, r28
    37a6:	e7 5b       	subi	r30, 0xB7	; 183
    37a8:	ff 4f       	sbci	r31, 0xFF	; 255
    37aa:	91 83       	std	Z+1, r25	; 0x01
    37ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ae:	de 01       	movw	r26, r28
    37b0:	a5 5b       	subi	r26, 0xB5	; 181
    37b2:	bf 4f       	sbci	r27, 0xFF	; 255
    37b4:	fe 01       	movw	r30, r28
    37b6:	e5 5b       	subi	r30, 0xB5	; 181
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	80 81       	ld	r24, Z
    37bc:	91 81       	ldd	r25, Z+1	; 0x01
    37be:	01 97       	sbiw	r24, 0x01	; 1
    37c0:	11 96       	adiw	r26, 0x01	; 1
    37c2:	9c 93       	st	X, r25
    37c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c6:	fe 01       	movw	r30, r28
    37c8:	e5 5b       	subi	r30, 0xB5	; 181
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 81       	ld	r24, Z
    37ce:	91 81       	ldd	r25, Z+1	; 0x01
    37d0:	00 97       	sbiw	r24, 0x00	; 0
    37d2:	d1 f6       	brne	.-76     	; 0x3788 <__vector_1+0x108>
    37d4:	27 c0       	rjmp	.+78     	; 0x3824 <__vector_1+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d6:	8e 01       	movw	r16, r28
    37d8:	05 5b       	subi	r16, 0xB5	; 181
    37da:	1f 4f       	sbci	r17, 0xFF	; 255
    37dc:	fe 01       	movw	r30, r28
    37de:	e3 5b       	subi	r30, 0xB3	; 179
    37e0:	ff 4f       	sbci	r31, 0xFF	; 255
    37e2:	60 81       	ld	r22, Z
    37e4:	71 81       	ldd	r23, Z+1	; 0x01
    37e6:	82 81       	ldd	r24, Z+2	; 0x02
    37e8:	93 81       	ldd	r25, Z+3	; 0x03
    37ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ee:	dc 01       	movw	r26, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	f8 01       	movw	r30, r16
    37f4:	91 83       	std	Z+1, r25	; 0x01
    37f6:	80 83       	st	Z, r24
    37f8:	de 01       	movw	r26, r28
    37fa:	a9 5b       	subi	r26, 0xB9	; 185
    37fc:	bf 4f       	sbci	r27, 0xFF	; 255
    37fe:	fe 01       	movw	r30, r28
    3800:	e5 5b       	subi	r30, 0xB5	; 181
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	80 81       	ld	r24, Z
    3806:	91 81       	ldd	r25, Z+1	; 0x01
    3808:	8d 93       	st	X+, r24
    380a:	9c 93       	st	X, r25
    380c:	fe 01       	movw	r30, r28
    380e:	e9 5b       	subi	r30, 0xB9	; 185
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	80 81       	ld	r24, Z
    3814:	91 81       	ldd	r25, Z+1	; 0x01
    3816:	01 97       	sbiw	r24, 0x01	; 1
    3818:	f1 f7       	brne	.-4      	; 0x3816 <__vector_1+0x196>
    381a:	fe 01       	movw	r30, r28
    381c:	e9 5b       	subi	r30, 0xB9	; 185
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	91 83       	std	Z+1, r25	; 0x01
    3822:	80 83       	st	Z, r24
	_delay_ms(150);
	DIO_vSetGroupValue(PORTA, 0x00);
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	60 e0       	ldi	r22, 0x00	; 0
    3828:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_vSetGroupValue>
    382c:	fe 01       	movw	r30, r28
    382e:	ed 5b       	subi	r30, 0xBD	; 189
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	a6 e1       	ldi	r26, 0x16	; 22
    3838:	b3 e4       	ldi	r27, 0x43	; 67
    383a:	80 83       	st	Z, r24
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	a2 83       	std	Z+2, r26	; 0x02
    3840:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3842:	8e 01       	movw	r16, r28
    3844:	01 5c       	subi	r16, 0xC1	; 193
    3846:	1f 4f       	sbci	r17, 0xFF	; 255
    3848:	fe 01       	movw	r30, r28
    384a:	ed 5b       	subi	r30, 0xBD	; 189
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	60 81       	ld	r22, Z
    3850:	71 81       	ldd	r23, Z+1	; 0x01
    3852:	82 81       	ldd	r24, Z+2	; 0x02
    3854:	93 81       	ldd	r25, Z+3	; 0x03
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	4a ef       	ldi	r20, 0xFA	; 250
    385c:	54 e4       	ldi	r21, 0x44	; 68
    385e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	f8 01       	movw	r30, r16
    3868:	80 83       	st	Z, r24
    386a:	91 83       	std	Z+1, r25	; 0x01
    386c:	a2 83       	std	Z+2, r26	; 0x02
    386e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3870:	fe 01       	movw	r30, r28
    3872:	ff 96       	adiw	r30, 0x3f	; 63
    3874:	60 81       	ld	r22, Z
    3876:	71 81       	ldd	r23, Z+1	; 0x01
    3878:	82 81       	ldd	r24, Z+2	; 0x02
    387a:	93 81       	ldd	r25, Z+3	; 0x03
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e8       	ldi	r20, 0x80	; 128
    3882:	5f e3       	ldi	r21, 0x3F	; 63
    3884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3888:	88 23       	and	r24, r24
    388a:	2c f4       	brge	.+10     	; 0x3896 <__vector_1+0x216>
		__ticks = 1;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	9e af       	std	Y+62, r25	; 0x3e
    3892:	8d af       	std	Y+61, r24	; 0x3d
    3894:	46 c0       	rjmp	.+140    	; 0x3922 <__vector_1+0x2a2>
	else if (__tmp > 65535)
    3896:	fe 01       	movw	r30, r28
    3898:	ff 96       	adiw	r30, 0x3f	; 63
    389a:	60 81       	ld	r22, Z
    389c:	71 81       	ldd	r23, Z+1	; 0x01
    389e:	82 81       	ldd	r24, Z+2	; 0x02
    38a0:	93 81       	ldd	r25, Z+3	; 0x03
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	3f ef       	ldi	r19, 0xFF	; 255
    38a6:	4f e7       	ldi	r20, 0x7F	; 127
    38a8:	57 e4       	ldi	r21, 0x47	; 71
    38aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ae:	18 16       	cp	r1, r24
    38b0:	64 f5       	brge	.+88     	; 0x390a <__vector_1+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b2:	fe 01       	movw	r30, r28
    38b4:	ed 5b       	subi	r30, 0xBD	; 189
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	60 81       	ld	r22, Z
    38ba:	71 81       	ldd	r23, Z+1	; 0x01
    38bc:	82 81       	ldd	r24, Z+2	; 0x02
    38be:	93 81       	ldd	r25, Z+3	; 0x03
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	40 e2       	ldi	r20, 0x20	; 32
    38c6:	51 e4       	ldi	r21, 0x41	; 65
    38c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	bc 01       	movw	r22, r24
    38d2:	cd 01       	movw	r24, r26
    38d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	9e af       	std	Y+62, r25	; 0x3e
    38de:	8d af       	std	Y+61, r24	; 0x3d
    38e0:	0f c0       	rjmp	.+30     	; 0x3900 <__vector_1+0x280>
    38e2:	88 ec       	ldi	r24, 0xC8	; 200
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	9c af       	std	Y+60, r25	; 0x3c
    38e8:	8b af       	std	Y+59, r24	; 0x3b
    38ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    38ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    38ee:	01 97       	sbiw	r24, 0x01	; 1
    38f0:	f1 f7       	brne	.-4      	; 0x38ee <__vector_1+0x26e>
    38f2:	9c af       	std	Y+60, r25	; 0x3c
    38f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    38f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	9e af       	std	Y+62, r25	; 0x3e
    38fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3900:	8d ad       	ldd	r24, Y+61	; 0x3d
    3902:	9e ad       	ldd	r25, Y+62	; 0x3e
    3904:	00 97       	sbiw	r24, 0x00	; 0
    3906:	69 f7       	brne	.-38     	; 0x38e2 <__vector_1+0x262>
    3908:	16 c0       	rjmp	.+44     	; 0x3936 <__vector_1+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    390a:	fe 01       	movw	r30, r28
    390c:	ff 96       	adiw	r30, 0x3f	; 63
    390e:	60 81       	ld	r22, Z
    3910:	71 81       	ldd	r23, Z+1	; 0x01
    3912:	82 81       	ldd	r24, Z+2	; 0x02
    3914:	93 81       	ldd	r25, Z+3	; 0x03
    3916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	9e af       	std	Y+62, r25	; 0x3e
    3920:	8d af       	std	Y+61, r24	; 0x3d
    3922:	8d ad       	ldd	r24, Y+61	; 0x3d
    3924:	9e ad       	ldd	r25, Y+62	; 0x3e
    3926:	9a af       	std	Y+58, r25	; 0x3a
    3928:	89 af       	std	Y+57, r24	; 0x39
    392a:	89 ad       	ldd	r24, Y+57	; 0x39
    392c:	9a ad       	ldd	r25, Y+58	; 0x3a
    392e:	01 97       	sbiw	r24, 0x01	; 1
    3930:	f1 f7       	brne	.-4      	; 0x392e <__vector_1+0x2ae>
    3932:	9a af       	std	Y+58, r25	; 0x3a
    3934:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(150);
	DIO_vSetGroupValue(PORTA, 0xFF);
    3936:	80 e0       	ldi	r24, 0x00	; 0
    3938:	6f ef       	ldi	r22, 0xFF	; 255
    393a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_vSetGroupValue>
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	a6 e1       	ldi	r26, 0x16	; 22
    3944:	b3 e4       	ldi	r27, 0x43	; 67
    3946:	8d ab       	std	Y+53, r24	; 0x35
    3948:	9e ab       	std	Y+54, r25	; 0x36
    394a:	af ab       	std	Y+55, r26	; 0x37
    394c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394e:	6d a9       	ldd	r22, Y+53	; 0x35
    3950:	7e a9       	ldd	r23, Y+54	; 0x36
    3952:	8f a9       	ldd	r24, Y+55	; 0x37
    3954:	98 ad       	ldd	r25, Y+56	; 0x38
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	4a ef       	ldi	r20, 0xFA	; 250
    395c:	54 e4       	ldi	r21, 0x44	; 68
    395e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	89 ab       	std	Y+49, r24	; 0x31
    3968:	9a ab       	std	Y+50, r25	; 0x32
    396a:	ab ab       	std	Y+51, r26	; 0x33
    396c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    396e:	69 a9       	ldd	r22, Y+49	; 0x31
    3970:	7a a9       	ldd	r23, Y+50	; 0x32
    3972:	8b a9       	ldd	r24, Y+51	; 0x33
    3974:	9c a9       	ldd	r25, Y+52	; 0x34
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	40 e8       	ldi	r20, 0x80	; 128
    397c:	5f e3       	ldi	r21, 0x3F	; 63
    397e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3982:	88 23       	and	r24, r24
    3984:	2c f4       	brge	.+10     	; 0x3990 <__vector_1+0x310>
		__ticks = 1;
    3986:	81 e0       	ldi	r24, 0x01	; 1
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	98 ab       	std	Y+48, r25	; 0x30
    398c:	8f a7       	std	Y+47, r24	; 0x2f
    398e:	3f c0       	rjmp	.+126    	; 0x3a0e <__vector_1+0x38e>
	else if (__tmp > 65535)
    3990:	69 a9       	ldd	r22, Y+49	; 0x31
    3992:	7a a9       	ldd	r23, Y+50	; 0x32
    3994:	8b a9       	ldd	r24, Y+51	; 0x33
    3996:	9c a9       	ldd	r25, Y+52	; 0x34
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	3f ef       	ldi	r19, 0xFF	; 255
    399c:	4f e7       	ldi	r20, 0x7F	; 127
    399e:	57 e4       	ldi	r21, 0x47	; 71
    39a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39a4:	18 16       	cp	r1, r24
    39a6:	4c f5       	brge	.+82     	; 0x39fa <__vector_1+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a8:	6d a9       	ldd	r22, Y+53	; 0x35
    39aa:	7e a9       	ldd	r23, Y+54	; 0x36
    39ac:	8f a9       	ldd	r24, Y+55	; 0x37
    39ae:	98 ad       	ldd	r25, Y+56	; 0x38
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	40 e2       	ldi	r20, 0x20	; 32
    39b6:	51 e4       	ldi	r21, 0x41	; 65
    39b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39bc:	dc 01       	movw	r26, r24
    39be:	cb 01       	movw	r24, r22
    39c0:	bc 01       	movw	r22, r24
    39c2:	cd 01       	movw	r24, r26
    39c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	98 ab       	std	Y+48, r25	; 0x30
    39ce:	8f a7       	std	Y+47, r24	; 0x2f
    39d0:	0f c0       	rjmp	.+30     	; 0x39f0 <__vector_1+0x370>
    39d2:	88 ec       	ldi	r24, 0xC8	; 200
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	9e a7       	std	Y+46, r25	; 0x2e
    39d8:	8d a7       	std	Y+45, r24	; 0x2d
    39da:	8d a5       	ldd	r24, Y+45	; 0x2d
    39dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    39de:	01 97       	sbiw	r24, 0x01	; 1
    39e0:	f1 f7       	brne	.-4      	; 0x39de <__vector_1+0x35e>
    39e2:	9e a7       	std	Y+46, r25	; 0x2e
    39e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    39e8:	98 a9       	ldd	r25, Y+48	; 0x30
    39ea:	01 97       	sbiw	r24, 0x01	; 1
    39ec:	98 ab       	std	Y+48, r25	; 0x30
    39ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    39f2:	98 a9       	ldd	r25, Y+48	; 0x30
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	69 f7       	brne	.-38     	; 0x39d2 <__vector_1+0x352>
    39f8:	14 c0       	rjmp	.+40     	; 0x3a22 <__vector_1+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39fa:	69 a9       	ldd	r22, Y+49	; 0x31
    39fc:	7a a9       	ldd	r23, Y+50	; 0x32
    39fe:	8b a9       	ldd	r24, Y+51	; 0x33
    3a00:	9c a9       	ldd	r25, Y+52	; 0x34
    3a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	98 ab       	std	Y+48, r25	; 0x30
    3a0c:	8f a7       	std	Y+47, r24	; 0x2f
    3a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a10:	98 a9       	ldd	r25, Y+48	; 0x30
    3a12:	9c a7       	std	Y+44, r25	; 0x2c
    3a14:	8b a7       	std	Y+43, r24	; 0x2b
    3a16:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a18:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a1a:	01 97       	sbiw	r24, 0x01	; 1
    3a1c:	f1 f7       	brne	.-4      	; 0x3a1a <__vector_1+0x39a>
    3a1e:	9c a7       	std	Y+44, r25	; 0x2c
    3a20:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(150);
	DIO_vSetGroupValue(PORTA, 0x00);
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	60 e0       	ldi	r22, 0x00	; 0
    3a26:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_vSetGroupValue>
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	a6 e1       	ldi	r26, 0x16	; 22
    3a30:	b3 e4       	ldi	r27, 0x43	; 67
    3a32:	8f a3       	std	Y+39, r24	; 0x27
    3a34:	98 a7       	std	Y+40, r25	; 0x28
    3a36:	a9 a7       	std	Y+41, r26	; 0x29
    3a38:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a3a:	6f a1       	ldd	r22, Y+39	; 0x27
    3a3c:	78 a5       	ldd	r23, Y+40	; 0x28
    3a3e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a40:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	4a ef       	ldi	r20, 0xFA	; 250
    3a48:	54 e4       	ldi	r21, 0x44	; 68
    3a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	8b a3       	std	Y+35, r24	; 0x23
    3a54:	9c a3       	std	Y+36, r25	; 0x24
    3a56:	ad a3       	std	Y+37, r26	; 0x25
    3a58:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a60:	9e a1       	ldd	r25, Y+38	; 0x26
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	40 e8       	ldi	r20, 0x80	; 128
    3a68:	5f e3       	ldi	r21, 0x3F	; 63
    3a6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a6e:	88 23       	and	r24, r24
    3a70:	2c f4       	brge	.+10     	; 0x3a7c <__vector_1+0x3fc>
		__ticks = 1;
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	9a a3       	std	Y+34, r25	; 0x22
    3a78:	89 a3       	std	Y+33, r24	; 0x21
    3a7a:	3f c0       	rjmp	.+126    	; 0x3afa <__vector_1+0x47a>
	else if (__tmp > 65535)
    3a7c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a7e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a80:	8d a1       	ldd	r24, Y+37	; 0x25
    3a82:	9e a1       	ldd	r25, Y+38	; 0x26
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	3f ef       	ldi	r19, 0xFF	; 255
    3a88:	4f e7       	ldi	r20, 0x7F	; 127
    3a8a:	57 e4       	ldi	r21, 0x47	; 71
    3a8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a90:	18 16       	cp	r1, r24
    3a92:	4c f5       	brge	.+82     	; 0x3ae6 <__vector_1+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a94:	6f a1       	ldd	r22, Y+39	; 0x27
    3a96:	78 a5       	ldd	r23, Y+40	; 0x28
    3a98:	89 a5       	ldd	r24, Y+41	; 0x29
    3a9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	40 e2       	ldi	r20, 0x20	; 32
    3aa2:	51 e4       	ldi	r21, 0x41	; 65
    3aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	bc 01       	movw	r22, r24
    3aae:	cd 01       	movw	r24, r26
    3ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	9a a3       	std	Y+34, r25	; 0x22
    3aba:	89 a3       	std	Y+33, r24	; 0x21
    3abc:	0f c0       	rjmp	.+30     	; 0x3adc <__vector_1+0x45c>
    3abe:	88 ec       	ldi	r24, 0xC8	; 200
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	98 a3       	std	Y+32, r25	; 0x20
    3ac4:	8f 8f       	std	Y+31, r24	; 0x1f
    3ac6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ac8:	98 a1       	ldd	r25, Y+32	; 0x20
    3aca:	01 97       	sbiw	r24, 0x01	; 1
    3acc:	f1 f7       	brne	.-4      	; 0x3aca <__vector_1+0x44a>
    3ace:	98 a3       	std	Y+32, r25	; 0x20
    3ad0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ad4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	9a a3       	std	Y+34, r25	; 0x22
    3ada:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3adc:	89 a1       	ldd	r24, Y+33	; 0x21
    3ade:	9a a1       	ldd	r25, Y+34	; 0x22
    3ae0:	00 97       	sbiw	r24, 0x00	; 0
    3ae2:	69 f7       	brne	.-38     	; 0x3abe <__vector_1+0x43e>
    3ae4:	14 c0       	rjmp	.+40     	; 0x3b0e <__vector_1+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ae8:	7c a1       	ldd	r23, Y+36	; 0x24
    3aea:	8d a1       	ldd	r24, Y+37	; 0x25
    3aec:	9e a1       	ldd	r25, Y+38	; 0x26
    3aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	9a a3       	std	Y+34, r25	; 0x22
    3af8:	89 a3       	std	Y+33, r24	; 0x21
    3afa:	89 a1       	ldd	r24, Y+33	; 0x21
    3afc:	9a a1       	ldd	r25, Y+34	; 0x22
    3afe:	9e 8f       	std	Y+30, r25	; 0x1e
    3b00:	8d 8f       	std	Y+29, r24	; 0x1d
    3b02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	f1 f7       	brne	.-4      	; 0x3b06 <__vector_1+0x486>
    3b0a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b0c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(150);
	DIO_vSetGroupValue(PORTA, 0xFF);
    3b0e:	80 e0       	ldi	r24, 0x00	; 0
    3b10:	6f ef       	ldi	r22, 0xFF	; 255
    3b12:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_vSetGroupValue>
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	a6 e1       	ldi	r26, 0x16	; 22
    3b1c:	b3 e4       	ldi	r27, 0x43	; 67
    3b1e:	89 8f       	std	Y+25, r24	; 0x19
    3b20:	9a 8f       	std	Y+26, r25	; 0x1a
    3b22:	ab 8f       	std	Y+27, r26	; 0x1b
    3b24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b26:	69 8d       	ldd	r22, Y+25	; 0x19
    3b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	4a ef       	ldi	r20, 0xFA	; 250
    3b34:	54 e4       	ldi	r21, 0x44	; 68
    3b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	8d 8b       	std	Y+21, r24	; 0x15
    3b40:	9e 8b       	std	Y+22, r25	; 0x16
    3b42:	af 8b       	std	Y+23, r26	; 0x17
    3b44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b46:	6d 89       	ldd	r22, Y+21	; 0x15
    3b48:	7e 89       	ldd	r23, Y+22	; 0x16
    3b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	40 e8       	ldi	r20, 0x80	; 128
    3b54:	5f e3       	ldi	r21, 0x3F	; 63
    3b56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b5a:	88 23       	and	r24, r24
    3b5c:	2c f4       	brge	.+10     	; 0x3b68 <__vector_1+0x4e8>
		__ticks = 1;
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	9c 8b       	std	Y+20, r25	; 0x14
    3b64:	8b 8b       	std	Y+19, r24	; 0x13
    3b66:	3f c0       	rjmp	.+126    	; 0x3be6 <__vector_1+0x566>
	else if (__tmp > 65535)
    3b68:	6d 89       	ldd	r22, Y+21	; 0x15
    3b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	3f ef       	ldi	r19, 0xFF	; 255
    3b74:	4f e7       	ldi	r20, 0x7F	; 127
    3b76:	57 e4       	ldi	r21, 0x47	; 71
    3b78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b7c:	18 16       	cp	r1, r24
    3b7e:	4c f5       	brge	.+82     	; 0x3bd2 <__vector_1+0x552>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b80:	69 8d       	ldd	r22, Y+25	; 0x19
    3b82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e2       	ldi	r20, 0x20	; 32
    3b8e:	51 e4       	ldi	r21, 0x41	; 65
    3b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	bc 01       	movw	r22, r24
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	9c 8b       	std	Y+20, r25	; 0x14
    3ba6:	8b 8b       	std	Y+19, r24	; 0x13
    3ba8:	0f c0       	rjmp	.+30     	; 0x3bc8 <__vector_1+0x548>
    3baa:	88 ec       	ldi	r24, 0xC8	; 200
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	9a 8b       	std	Y+18, r25	; 0x12
    3bb0:	89 8b       	std	Y+17, r24	; 0x11
    3bb2:	89 89       	ldd	r24, Y+17	; 0x11
    3bb4:	9a 89       	ldd	r25, Y+18	; 0x12
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	f1 f7       	brne	.-4      	; 0x3bb6 <__vector_1+0x536>
    3bba:	9a 8b       	std	Y+18, r25	; 0x12
    3bbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    3bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	9c 8b       	std	Y+20, r25	; 0x14
    3bc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    3bca:	9c 89       	ldd	r25, Y+20	; 0x14
    3bcc:	00 97       	sbiw	r24, 0x00	; 0
    3bce:	69 f7       	brne	.-38     	; 0x3baa <__vector_1+0x52a>
    3bd0:	14 c0       	rjmp	.+40     	; 0x3bfa <__vector_1+0x57a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    3bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    3bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    3bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    3bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	9c 8b       	std	Y+20, r25	; 0x14
    3be4:	8b 8b       	std	Y+19, r24	; 0x13
    3be6:	8b 89       	ldd	r24, Y+19	; 0x13
    3be8:	9c 89       	ldd	r25, Y+20	; 0x14
    3bea:	98 8b       	std	Y+16, r25	; 0x10
    3bec:	8f 87       	std	Y+15, r24	; 0x0f
    3bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bf0:	98 89       	ldd	r25, Y+16	; 0x10
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
    3bf4:	f1 f7       	brne	.-4      	; 0x3bf2 <__vector_1+0x572>
    3bf6:	98 8b       	std	Y+16, r25	; 0x10
    3bf8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(150);
	DIO_vSetGroupValue(PORTA, 0x00);
    3bfa:	80 e0       	ldi	r24, 0x00	; 0
    3bfc:	60 e0       	ldi	r22, 0x00	; 0
    3bfe:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_vSetGroupValue>
    3c02:	80 e0       	ldi	r24, 0x00	; 0
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	a6 e1       	ldi	r26, 0x16	; 22
    3c08:	b3 e4       	ldi	r27, 0x43	; 67
    3c0a:	8b 87       	std	Y+11, r24	; 0x0b
    3c0c:	9c 87       	std	Y+12, r25	; 0x0c
    3c0e:	ad 87       	std	Y+13, r26	; 0x0d
    3c10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	4a ef       	ldi	r20, 0xFA	; 250
    3c20:	54 e4       	ldi	r21, 0x44	; 68
    3c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	8f 83       	std	Y+7, r24	; 0x07
    3c2c:	98 87       	std	Y+8, r25	; 0x08
    3c2e:	a9 87       	std	Y+9, r26	; 0x09
    3c30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c32:	6f 81       	ldd	r22, Y+7	; 0x07
    3c34:	78 85       	ldd	r23, Y+8	; 0x08
    3c36:	89 85       	ldd	r24, Y+9	; 0x09
    3c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e8       	ldi	r20, 0x80	; 128
    3c40:	5f e3       	ldi	r21, 0x3F	; 63
    3c42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c46:	88 23       	and	r24, r24
    3c48:	2c f4       	brge	.+10     	; 0x3c54 <__vector_1+0x5d4>
		__ticks = 1;
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	9e 83       	std	Y+6, r25	; 0x06
    3c50:	8d 83       	std	Y+5, r24	; 0x05
    3c52:	3f c0       	rjmp	.+126    	; 0x3cd2 <__vector_1+0x652>
	else if (__tmp > 65535)
    3c54:	6f 81       	ldd	r22, Y+7	; 0x07
    3c56:	78 85       	ldd	r23, Y+8	; 0x08
    3c58:	89 85       	ldd	r24, Y+9	; 0x09
    3c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	3f ef       	ldi	r19, 0xFF	; 255
    3c60:	4f e7       	ldi	r20, 0x7F	; 127
    3c62:	57 e4       	ldi	r21, 0x47	; 71
    3c64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c68:	18 16       	cp	r1, r24
    3c6a:	4c f5       	brge	.+82     	; 0x3cbe <__vector_1+0x63e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	40 e2       	ldi	r20, 0x20	; 32
    3c7a:	51 e4       	ldi	r21, 0x41	; 65
    3c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c80:	dc 01       	movw	r26, r24
    3c82:	cb 01       	movw	r24, r22
    3c84:	bc 01       	movw	r22, r24
    3c86:	cd 01       	movw	r24, r26
    3c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	9e 83       	std	Y+6, r25	; 0x06
    3c92:	8d 83       	std	Y+5, r24	; 0x05
    3c94:	0f c0       	rjmp	.+30     	; 0x3cb4 <__vector_1+0x634>
    3c96:	88 ec       	ldi	r24, 0xC8	; 200
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	9c 83       	std	Y+4, r25	; 0x04
    3c9c:	8b 83       	std	Y+3, r24	; 0x03
    3c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca2:	01 97       	sbiw	r24, 0x01	; 1
    3ca4:	f1 f7       	brne	.-4      	; 0x3ca2 <__vector_1+0x622>
    3ca6:	9c 83       	std	Y+4, r25	; 0x04
    3ca8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3caa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cac:	9e 81       	ldd	r25, Y+6	; 0x06
    3cae:	01 97       	sbiw	r24, 0x01	; 1
    3cb0:	9e 83       	std	Y+6, r25	; 0x06
    3cb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb8:	00 97       	sbiw	r24, 0x00	; 0
    3cba:	69 f7       	brne	.-38     	; 0x3c96 <__vector_1+0x616>
    3cbc:	14 c0       	rjmp	.+40     	; 0x3ce6 <__vector_1+0x666>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc0:	78 85       	ldd	r23, Y+8	; 0x08
    3cc2:	89 85       	ldd	r24, Y+9	; 0x09
    3cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cca:	dc 01       	movw	r26, r24
    3ccc:	cb 01       	movw	r24, r22
    3cce:	9e 83       	std	Y+6, r25	; 0x06
    3cd0:	8d 83       	std	Y+5, r24	; 0x05
    3cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd6:	9a 83       	std	Y+2, r25	; 0x02
    3cd8:	89 83       	std	Y+1, r24	; 0x01
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cde:	01 97       	sbiw	r24, 0x01	; 1
    3ce0:	f1 f7       	brne	.-4      	; 0x3cde <__vector_1+0x65e>
    3ce2:	9a 83       	std	Y+2, r25	; 0x02
    3ce4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(150);
	flag = 1;
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	80 93 80 00 	sts	0x0080, r24
}
    3cec:	cc 5a       	subi	r28, 0xAC	; 172
    3cee:	df 4f       	sbci	r29, 0xFF	; 255
    3cf0:	de bf       	out	0x3e, r29	; 62
    3cf2:	cd bf       	out	0x3d, r28	; 61
    3cf4:	cf 91       	pop	r28
    3cf6:	df 91       	pop	r29
    3cf8:	ff 91       	pop	r31
    3cfa:	ef 91       	pop	r30
    3cfc:	bf 91       	pop	r27
    3cfe:	af 91       	pop	r26
    3d00:	9f 91       	pop	r25
    3d02:	8f 91       	pop	r24
    3d04:	7f 91       	pop	r23
    3d06:	6f 91       	pop	r22
    3d08:	5f 91       	pop	r21
    3d0a:	4f 91       	pop	r20
    3d0c:	3f 91       	pop	r19
    3d0e:	2f 91       	pop	r18
    3d10:	1f 91       	pop	r17
    3d12:	0f 91       	pop	r16
    3d14:	0f 90       	pop	r0
    3d16:	0f be       	out	0x3f, r0	; 63
    3d18:	0f 90       	pop	r0
    3d1a:	1f 90       	pop	r1
    3d1c:	18 95       	reti

00003d1e <SET_Direction>:
 */

#include "DIO_Interface.h"

void SET_Direction(u8 Copy_PORT, u8 Copy_PIN, u8 Direction)//set a specific pin as input or output
{
    3d1e:	df 93       	push	r29
    3d20:	cf 93       	push	r28
    3d22:	cd b7       	in	r28, 0x3d	; 61
    3d24:	de b7       	in	r29, 0x3e	; 62
    3d26:	27 97       	sbiw	r28, 0x07	; 7
    3d28:	0f b6       	in	r0, 0x3f	; 63
    3d2a:	f8 94       	cli
    3d2c:	de bf       	out	0x3e, r29	; 62
    3d2e:	0f be       	out	0x3f, r0	; 63
    3d30:	cd bf       	out	0x3d, r28	; 61
    3d32:	89 83       	std	Y+1, r24	; 0x01
    3d34:	6a 83       	std	Y+2, r22	; 0x02
    3d36:	4b 83       	std	Y+3, r20	; 0x03
	if(Direction == OUTPUT)
    3d38:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3a:	81 30       	cpi	r24, 0x01	; 1
    3d3c:	09 f0       	breq	.+2      	; 0x3d40 <SET_Direction+0x22>
    3d3e:	70 c0       	rjmp	.+224    	; 0x3e20 <SET_Direction+0x102>
	{
		switch(Copy_PORT)
    3d40:	89 81       	ldd	r24, Y+1	; 0x01
    3d42:	28 2f       	mov	r18, r24
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	3f 83       	std	Y+7, r19	; 0x07
    3d48:	2e 83       	std	Y+6, r18	; 0x06
    3d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    3d4c:	9f 81       	ldd	r25, Y+7	; 0x07
    3d4e:	82 30       	cpi	r24, 0x02	; 2
    3d50:	91 05       	cpc	r25, r1
    3d52:	51 f1       	breq	.+84     	; 0x3da8 <SET_Direction+0x8a>
    3d54:	2e 81       	ldd	r18, Y+6	; 0x06
    3d56:	3f 81       	ldd	r19, Y+7	; 0x07
    3d58:	23 30       	cpi	r18, 0x03	; 3
    3d5a:	31 05       	cpc	r19, r1
    3d5c:	34 f4       	brge	.+12     	; 0x3d6a <SET_Direction+0x4c>
    3d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d60:	9f 81       	ldd	r25, Y+7	; 0x07
    3d62:	81 30       	cpi	r24, 0x01	; 1
    3d64:	91 05       	cpc	r25, r1
    3d66:	61 f0       	breq	.+24     	; 0x3d80 <SET_Direction+0x62>
    3d68:	d3 c0       	rjmp	.+422    	; 0x3f10 <SET_Direction+0x1f2>
    3d6a:	2e 81       	ldd	r18, Y+6	; 0x06
    3d6c:	3f 81       	ldd	r19, Y+7	; 0x07
    3d6e:	23 30       	cpi	r18, 0x03	; 3
    3d70:	31 05       	cpc	r19, r1
    3d72:	71 f1       	breq	.+92     	; 0x3dd0 <SET_Direction+0xb2>
    3d74:	8e 81       	ldd	r24, Y+6	; 0x06
    3d76:	9f 81       	ldd	r25, Y+7	; 0x07
    3d78:	84 30       	cpi	r24, 0x04	; 4
    3d7a:	91 05       	cpc	r25, r1
    3d7c:	e9 f1       	breq	.+122    	; 0x3df8 <SET_Direction+0xda>
    3d7e:	c8 c0       	rjmp	.+400    	; 0x3f10 <SET_Direction+0x1f2>
		{
		case PORTA:
			SET_BIT(DDRA_REG, Copy_PIN);
    3d80:	aa e3       	ldi	r26, 0x3A	; 58
    3d82:	b0 e0       	ldi	r27, 0x00	; 0
    3d84:	ea e3       	ldi	r30, 0x3A	; 58
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	80 81       	ld	r24, Z
    3d8a:	48 2f       	mov	r20, r24
    3d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8e:	28 2f       	mov	r18, r24
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	02 2e       	mov	r0, r18
    3d98:	02 c0       	rjmp	.+4      	; 0x3d9e <SET_Direction+0x80>
    3d9a:	88 0f       	add	r24, r24
    3d9c:	99 1f       	adc	r25, r25
    3d9e:	0a 94       	dec	r0
    3da0:	e2 f7       	brpl	.-8      	; 0x3d9a <SET_Direction+0x7c>
    3da2:	84 2b       	or	r24, r20
    3da4:	8c 93       	st	X, r24
    3da6:	b4 c0       	rjmp	.+360    	; 0x3f10 <SET_Direction+0x1f2>
			break;
		case PORTB:
			SET_BIT(DDRB_REG, Copy_PIN);
    3da8:	a7 e3       	ldi	r26, 0x37	; 55
    3daa:	b0 e0       	ldi	r27, 0x00	; 0
    3dac:	e7 e3       	ldi	r30, 0x37	; 55
    3dae:	f0 e0       	ldi	r31, 0x00	; 0
    3db0:	80 81       	ld	r24, Z
    3db2:	48 2f       	mov	r20, r24
    3db4:	8a 81       	ldd	r24, Y+2	; 0x02
    3db6:	28 2f       	mov	r18, r24
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	02 2e       	mov	r0, r18
    3dc0:	02 c0       	rjmp	.+4      	; 0x3dc6 <SET_Direction+0xa8>
    3dc2:	88 0f       	add	r24, r24
    3dc4:	99 1f       	adc	r25, r25
    3dc6:	0a 94       	dec	r0
    3dc8:	e2 f7       	brpl	.-8      	; 0x3dc2 <SET_Direction+0xa4>
    3dca:	84 2b       	or	r24, r20
    3dcc:	8c 93       	st	X, r24
    3dce:	a0 c0       	rjmp	.+320    	; 0x3f10 <SET_Direction+0x1f2>
			break;
		case PORTC:
			SET_BIT(DDRC_REG, Copy_PIN);
    3dd0:	a4 e3       	ldi	r26, 0x34	; 52
    3dd2:	b0 e0       	ldi	r27, 0x00	; 0
    3dd4:	e4 e3       	ldi	r30, 0x34	; 52
    3dd6:	f0 e0       	ldi	r31, 0x00	; 0
    3dd8:	80 81       	ld	r24, Z
    3dda:	48 2f       	mov	r20, r24
    3ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dde:	28 2f       	mov	r18, r24
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	02 2e       	mov	r0, r18
    3de8:	02 c0       	rjmp	.+4      	; 0x3dee <SET_Direction+0xd0>
    3dea:	88 0f       	add	r24, r24
    3dec:	99 1f       	adc	r25, r25
    3dee:	0a 94       	dec	r0
    3df0:	e2 f7       	brpl	.-8      	; 0x3dea <SET_Direction+0xcc>
    3df2:	84 2b       	or	r24, r20
    3df4:	8c 93       	st	X, r24
    3df6:	8c c0       	rjmp	.+280    	; 0x3f10 <SET_Direction+0x1f2>
			break;
		case PORTD:
			SET_BIT(DDRD_REG, Copy_PIN);
    3df8:	a1 e3       	ldi	r26, 0x31	; 49
    3dfa:	b0 e0       	ldi	r27, 0x00	; 0
    3dfc:	e1 e3       	ldi	r30, 0x31	; 49
    3dfe:	f0 e0       	ldi	r31, 0x00	; 0
    3e00:	80 81       	ld	r24, Z
    3e02:	48 2f       	mov	r20, r24
    3e04:	8a 81       	ldd	r24, Y+2	; 0x02
    3e06:	28 2f       	mov	r18, r24
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	02 2e       	mov	r0, r18
    3e10:	02 c0       	rjmp	.+4      	; 0x3e16 <SET_Direction+0xf8>
    3e12:	88 0f       	add	r24, r24
    3e14:	99 1f       	adc	r25, r25
    3e16:	0a 94       	dec	r0
    3e18:	e2 f7       	brpl	.-8      	; 0x3e12 <SET_Direction+0xf4>
    3e1a:	84 2b       	or	r24, r20
    3e1c:	8c 93       	st	X, r24
    3e1e:	78 c0       	rjmp	.+240    	; 0x3f10 <SET_Direction+0x1f2>
			break;
		}
	}
	else if(Direction == INPUT)
    3e20:	8b 81       	ldd	r24, Y+3	; 0x03
    3e22:	88 23       	and	r24, r24
    3e24:	09 f0       	breq	.+2      	; 0x3e28 <SET_Direction+0x10a>
    3e26:	74 c0       	rjmp	.+232    	; 0x3f10 <SET_Direction+0x1f2>
	{
		switch(Copy_PORT)
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	28 2f       	mov	r18, r24
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	3d 83       	std	Y+5, r19	; 0x05
    3e30:	2c 83       	std	Y+4, r18	; 0x04
    3e32:	8c 81       	ldd	r24, Y+4	; 0x04
    3e34:	9d 81       	ldd	r25, Y+5	; 0x05
    3e36:	82 30       	cpi	r24, 0x02	; 2
    3e38:	91 05       	cpc	r25, r1
    3e3a:	61 f1       	breq	.+88     	; 0x3e94 <SET_Direction+0x176>
    3e3c:	2c 81       	ldd	r18, Y+4	; 0x04
    3e3e:	3d 81       	ldd	r19, Y+5	; 0x05
    3e40:	23 30       	cpi	r18, 0x03	; 3
    3e42:	31 05       	cpc	r19, r1
    3e44:	34 f4       	brge	.+12     	; 0x3e52 <SET_Direction+0x134>
    3e46:	8c 81       	ldd	r24, Y+4	; 0x04
    3e48:	9d 81       	ldd	r25, Y+5	; 0x05
    3e4a:	81 30       	cpi	r24, 0x01	; 1
    3e4c:	91 05       	cpc	r25, r1
    3e4e:	69 f0       	breq	.+26     	; 0x3e6a <SET_Direction+0x14c>
    3e50:	5f c0       	rjmp	.+190    	; 0x3f10 <SET_Direction+0x1f2>
    3e52:	2c 81       	ldd	r18, Y+4	; 0x04
    3e54:	3d 81       	ldd	r19, Y+5	; 0x05
    3e56:	23 30       	cpi	r18, 0x03	; 3
    3e58:	31 05       	cpc	r19, r1
    3e5a:	89 f1       	breq	.+98     	; 0x3ebe <SET_Direction+0x1a0>
    3e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e60:	84 30       	cpi	r24, 0x04	; 4
    3e62:	91 05       	cpc	r25, r1
    3e64:	09 f4       	brne	.+2      	; 0x3e68 <SET_Direction+0x14a>
    3e66:	40 c0       	rjmp	.+128    	; 0x3ee8 <SET_Direction+0x1ca>
    3e68:	53 c0       	rjmp	.+166    	; 0x3f10 <SET_Direction+0x1f2>
		{
		case PORTA:
			CLR_BIT(DDRA_REG, Copy_PIN);
    3e6a:	aa e3       	ldi	r26, 0x3A	; 58
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	ea e3       	ldi	r30, 0x3A	; 58
    3e70:	f0 e0       	ldi	r31, 0x00	; 0
    3e72:	80 81       	ld	r24, Z
    3e74:	48 2f       	mov	r20, r24
    3e76:	8a 81       	ldd	r24, Y+2	; 0x02
    3e78:	28 2f       	mov	r18, r24
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	81 e0       	ldi	r24, 0x01	; 1
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	02 2e       	mov	r0, r18
    3e82:	02 c0       	rjmp	.+4      	; 0x3e88 <SET_Direction+0x16a>
    3e84:	88 0f       	add	r24, r24
    3e86:	99 1f       	adc	r25, r25
    3e88:	0a 94       	dec	r0
    3e8a:	e2 f7       	brpl	.-8      	; 0x3e84 <SET_Direction+0x166>
    3e8c:	80 95       	com	r24
    3e8e:	84 23       	and	r24, r20
    3e90:	8c 93       	st	X, r24
    3e92:	3e c0       	rjmp	.+124    	; 0x3f10 <SET_Direction+0x1f2>
			break;
		case PORTB:
			CLR_BIT(DDRB_REG, Copy_PIN);
    3e94:	a7 e3       	ldi	r26, 0x37	; 55
    3e96:	b0 e0       	ldi	r27, 0x00	; 0
    3e98:	e7 e3       	ldi	r30, 0x37	; 55
    3e9a:	f0 e0       	ldi	r31, 0x00	; 0
    3e9c:	80 81       	ld	r24, Z
    3e9e:	48 2f       	mov	r20, r24
    3ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea2:	28 2f       	mov	r18, r24
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	02 2e       	mov	r0, r18
    3eac:	02 c0       	rjmp	.+4      	; 0x3eb2 <SET_Direction+0x194>
    3eae:	88 0f       	add	r24, r24
    3eb0:	99 1f       	adc	r25, r25
    3eb2:	0a 94       	dec	r0
    3eb4:	e2 f7       	brpl	.-8      	; 0x3eae <SET_Direction+0x190>
    3eb6:	80 95       	com	r24
    3eb8:	84 23       	and	r24, r20
    3eba:	8c 93       	st	X, r24
    3ebc:	29 c0       	rjmp	.+82     	; 0x3f10 <SET_Direction+0x1f2>
			break;
		case PORTC:
			CLR_BIT(DDRC_REG, Copy_PIN);
    3ebe:	a4 e3       	ldi	r26, 0x34	; 52
    3ec0:	b0 e0       	ldi	r27, 0x00	; 0
    3ec2:	e4 e3       	ldi	r30, 0x34	; 52
    3ec4:	f0 e0       	ldi	r31, 0x00	; 0
    3ec6:	80 81       	ld	r24, Z
    3ec8:	48 2f       	mov	r20, r24
    3eca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ecc:	28 2f       	mov	r18, r24
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	02 2e       	mov	r0, r18
    3ed6:	02 c0       	rjmp	.+4      	; 0x3edc <SET_Direction+0x1be>
    3ed8:	88 0f       	add	r24, r24
    3eda:	99 1f       	adc	r25, r25
    3edc:	0a 94       	dec	r0
    3ede:	e2 f7       	brpl	.-8      	; 0x3ed8 <SET_Direction+0x1ba>
    3ee0:	80 95       	com	r24
    3ee2:	84 23       	and	r24, r20
    3ee4:	8c 93       	st	X, r24
    3ee6:	14 c0       	rjmp	.+40     	; 0x3f10 <SET_Direction+0x1f2>
			break;
		case PORTD:
			CLR_BIT(DDRD_REG, Copy_PIN);
    3ee8:	a1 e3       	ldi	r26, 0x31	; 49
    3eea:	b0 e0       	ldi	r27, 0x00	; 0
    3eec:	e1 e3       	ldi	r30, 0x31	; 49
    3eee:	f0 e0       	ldi	r31, 0x00	; 0
    3ef0:	80 81       	ld	r24, Z
    3ef2:	48 2f       	mov	r20, r24
    3ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef6:	28 2f       	mov	r18, r24
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	02 2e       	mov	r0, r18
    3f00:	02 c0       	rjmp	.+4      	; 0x3f06 <SET_Direction+0x1e8>
    3f02:	88 0f       	add	r24, r24
    3f04:	99 1f       	adc	r25, r25
    3f06:	0a 94       	dec	r0
    3f08:	e2 f7       	brpl	.-8      	; 0x3f02 <SET_Direction+0x1e4>
    3f0a:	80 95       	com	r24
    3f0c:	84 23       	and	r24, r20
    3f0e:	8c 93       	st	X, r24
			break;
		}
	}
}
    3f10:	27 96       	adiw	r28, 0x07	; 7
    3f12:	0f b6       	in	r0, 0x3f	; 63
    3f14:	f8 94       	cli
    3f16:	de bf       	out	0x3e, r29	; 62
    3f18:	0f be       	out	0x3f, r0	; 63
    3f1a:	cd bf       	out	0x3d, r28	; 61
    3f1c:	cf 91       	pop	r28
    3f1e:	df 91       	pop	r29
    3f20:	08 95       	ret

00003f22 <SET_State>:

void SET_State(u8 Copy_PORT, u8 Copy_PIN, u8 State)//set a specific output pin as high or low
{
    3f22:	df 93       	push	r29
    3f24:	cf 93       	push	r28
    3f26:	cd b7       	in	r28, 0x3d	; 61
    3f28:	de b7       	in	r29, 0x3e	; 62
    3f2a:	27 97       	sbiw	r28, 0x07	; 7
    3f2c:	0f b6       	in	r0, 0x3f	; 63
    3f2e:	f8 94       	cli
    3f30:	de bf       	out	0x3e, r29	; 62
    3f32:	0f be       	out	0x3f, r0	; 63
    3f34:	cd bf       	out	0x3d, r28	; 61
    3f36:	89 83       	std	Y+1, r24	; 0x01
    3f38:	6a 83       	std	Y+2, r22	; 0x02
    3f3a:	4b 83       	std	Y+3, r20	; 0x03
	if(State == HIGH)
    3f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3e:	81 30       	cpi	r24, 0x01	; 1
    3f40:	09 f0       	breq	.+2      	; 0x3f44 <SET_State+0x22>
    3f42:	70 c0       	rjmp	.+224    	; 0x4024 <SET_State+0x102>
	{
		switch(Copy_PORT)
    3f44:	89 81       	ldd	r24, Y+1	; 0x01
    3f46:	28 2f       	mov	r18, r24
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	3f 83       	std	Y+7, r19	; 0x07
    3f4c:	2e 83       	std	Y+6, r18	; 0x06
    3f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    3f50:	9f 81       	ldd	r25, Y+7	; 0x07
    3f52:	82 30       	cpi	r24, 0x02	; 2
    3f54:	91 05       	cpc	r25, r1
    3f56:	51 f1       	breq	.+84     	; 0x3fac <SET_State+0x8a>
    3f58:	2e 81       	ldd	r18, Y+6	; 0x06
    3f5a:	3f 81       	ldd	r19, Y+7	; 0x07
    3f5c:	23 30       	cpi	r18, 0x03	; 3
    3f5e:	31 05       	cpc	r19, r1
    3f60:	34 f4       	brge	.+12     	; 0x3f6e <SET_State+0x4c>
    3f62:	8e 81       	ldd	r24, Y+6	; 0x06
    3f64:	9f 81       	ldd	r25, Y+7	; 0x07
    3f66:	81 30       	cpi	r24, 0x01	; 1
    3f68:	91 05       	cpc	r25, r1
    3f6a:	61 f0       	breq	.+24     	; 0x3f84 <SET_State+0x62>
    3f6c:	d3 c0       	rjmp	.+422    	; 0x4114 <SET_State+0x1f2>
    3f6e:	2e 81       	ldd	r18, Y+6	; 0x06
    3f70:	3f 81       	ldd	r19, Y+7	; 0x07
    3f72:	23 30       	cpi	r18, 0x03	; 3
    3f74:	31 05       	cpc	r19, r1
    3f76:	71 f1       	breq	.+92     	; 0x3fd4 <SET_State+0xb2>
    3f78:	8e 81       	ldd	r24, Y+6	; 0x06
    3f7a:	9f 81       	ldd	r25, Y+7	; 0x07
    3f7c:	84 30       	cpi	r24, 0x04	; 4
    3f7e:	91 05       	cpc	r25, r1
    3f80:	e9 f1       	breq	.+122    	; 0x3ffc <SET_State+0xda>
    3f82:	c8 c0       	rjmp	.+400    	; 0x4114 <SET_State+0x1f2>
		{
		case PORTA:
			SET_BIT(PORTA_REG, Copy_PIN);
    3f84:	ab e3       	ldi	r26, 0x3B	; 59
    3f86:	b0 e0       	ldi	r27, 0x00	; 0
    3f88:	eb e3       	ldi	r30, 0x3B	; 59
    3f8a:	f0 e0       	ldi	r31, 0x00	; 0
    3f8c:	80 81       	ld	r24, Z
    3f8e:	48 2f       	mov	r20, r24
    3f90:	8a 81       	ldd	r24, Y+2	; 0x02
    3f92:	28 2f       	mov	r18, r24
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	02 2e       	mov	r0, r18
    3f9c:	02 c0       	rjmp	.+4      	; 0x3fa2 <SET_State+0x80>
    3f9e:	88 0f       	add	r24, r24
    3fa0:	99 1f       	adc	r25, r25
    3fa2:	0a 94       	dec	r0
    3fa4:	e2 f7       	brpl	.-8      	; 0x3f9e <SET_State+0x7c>
    3fa6:	84 2b       	or	r24, r20
    3fa8:	8c 93       	st	X, r24
    3faa:	b4 c0       	rjmp	.+360    	; 0x4114 <SET_State+0x1f2>
			break;
		case PORTB:
			SET_BIT(PORTB_REG, Copy_PIN);
    3fac:	a8 e3       	ldi	r26, 0x38	; 56
    3fae:	b0 e0       	ldi	r27, 0x00	; 0
    3fb0:	e8 e3       	ldi	r30, 0x38	; 56
    3fb2:	f0 e0       	ldi	r31, 0x00	; 0
    3fb4:	80 81       	ld	r24, Z
    3fb6:	48 2f       	mov	r20, r24
    3fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fba:	28 2f       	mov	r18, r24
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	02 2e       	mov	r0, r18
    3fc4:	02 c0       	rjmp	.+4      	; 0x3fca <SET_State+0xa8>
    3fc6:	88 0f       	add	r24, r24
    3fc8:	99 1f       	adc	r25, r25
    3fca:	0a 94       	dec	r0
    3fcc:	e2 f7       	brpl	.-8      	; 0x3fc6 <SET_State+0xa4>
    3fce:	84 2b       	or	r24, r20
    3fd0:	8c 93       	st	X, r24
    3fd2:	a0 c0       	rjmp	.+320    	; 0x4114 <SET_State+0x1f2>
			break;
		case PORTC:
			SET_BIT(PORTC_REG, Copy_PIN);
    3fd4:	a5 e3       	ldi	r26, 0x35	; 53
    3fd6:	b0 e0       	ldi	r27, 0x00	; 0
    3fd8:	e5 e3       	ldi	r30, 0x35	; 53
    3fda:	f0 e0       	ldi	r31, 0x00	; 0
    3fdc:	80 81       	ld	r24, Z
    3fde:	48 2f       	mov	r20, r24
    3fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe2:	28 2f       	mov	r18, r24
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	02 2e       	mov	r0, r18
    3fec:	02 c0       	rjmp	.+4      	; 0x3ff2 <SET_State+0xd0>
    3fee:	88 0f       	add	r24, r24
    3ff0:	99 1f       	adc	r25, r25
    3ff2:	0a 94       	dec	r0
    3ff4:	e2 f7       	brpl	.-8      	; 0x3fee <SET_State+0xcc>
    3ff6:	84 2b       	or	r24, r20
    3ff8:	8c 93       	st	X, r24
    3ffa:	8c c0       	rjmp	.+280    	; 0x4114 <SET_State+0x1f2>
			break;
		case PORTD:
			SET_BIT(PORTD_REG, Copy_PIN);
    3ffc:	a2 e3       	ldi	r26, 0x32	; 50
    3ffe:	b0 e0       	ldi	r27, 0x00	; 0
    4000:	e2 e3       	ldi	r30, 0x32	; 50
    4002:	f0 e0       	ldi	r31, 0x00	; 0
    4004:	80 81       	ld	r24, Z
    4006:	48 2f       	mov	r20, r24
    4008:	8a 81       	ldd	r24, Y+2	; 0x02
    400a:	28 2f       	mov	r18, r24
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	02 2e       	mov	r0, r18
    4014:	02 c0       	rjmp	.+4      	; 0x401a <SET_State+0xf8>
    4016:	88 0f       	add	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	0a 94       	dec	r0
    401c:	e2 f7       	brpl	.-8      	; 0x4016 <SET_State+0xf4>
    401e:	84 2b       	or	r24, r20
    4020:	8c 93       	st	X, r24
    4022:	78 c0       	rjmp	.+240    	; 0x4114 <SET_State+0x1f2>
			break;
		}
	}
	else if(State == LOW)
    4024:	8b 81       	ldd	r24, Y+3	; 0x03
    4026:	88 23       	and	r24, r24
    4028:	09 f0       	breq	.+2      	; 0x402c <SET_State+0x10a>
    402a:	74 c0       	rjmp	.+232    	; 0x4114 <SET_State+0x1f2>
	{
		switch(Copy_PORT)
    402c:	89 81       	ldd	r24, Y+1	; 0x01
    402e:	28 2f       	mov	r18, r24
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	3d 83       	std	Y+5, r19	; 0x05
    4034:	2c 83       	std	Y+4, r18	; 0x04
    4036:	8c 81       	ldd	r24, Y+4	; 0x04
    4038:	9d 81       	ldd	r25, Y+5	; 0x05
    403a:	82 30       	cpi	r24, 0x02	; 2
    403c:	91 05       	cpc	r25, r1
    403e:	61 f1       	breq	.+88     	; 0x4098 <SET_State+0x176>
    4040:	2c 81       	ldd	r18, Y+4	; 0x04
    4042:	3d 81       	ldd	r19, Y+5	; 0x05
    4044:	23 30       	cpi	r18, 0x03	; 3
    4046:	31 05       	cpc	r19, r1
    4048:	34 f4       	brge	.+12     	; 0x4056 <SET_State+0x134>
    404a:	8c 81       	ldd	r24, Y+4	; 0x04
    404c:	9d 81       	ldd	r25, Y+5	; 0x05
    404e:	81 30       	cpi	r24, 0x01	; 1
    4050:	91 05       	cpc	r25, r1
    4052:	69 f0       	breq	.+26     	; 0x406e <SET_State+0x14c>
    4054:	5f c0       	rjmp	.+190    	; 0x4114 <SET_State+0x1f2>
    4056:	2c 81       	ldd	r18, Y+4	; 0x04
    4058:	3d 81       	ldd	r19, Y+5	; 0x05
    405a:	23 30       	cpi	r18, 0x03	; 3
    405c:	31 05       	cpc	r19, r1
    405e:	89 f1       	breq	.+98     	; 0x40c2 <SET_State+0x1a0>
    4060:	8c 81       	ldd	r24, Y+4	; 0x04
    4062:	9d 81       	ldd	r25, Y+5	; 0x05
    4064:	84 30       	cpi	r24, 0x04	; 4
    4066:	91 05       	cpc	r25, r1
    4068:	09 f4       	brne	.+2      	; 0x406c <SET_State+0x14a>
    406a:	40 c0       	rjmp	.+128    	; 0x40ec <SET_State+0x1ca>
    406c:	53 c0       	rjmp	.+166    	; 0x4114 <SET_State+0x1f2>
		{
		case PORTA:
			CLR_BIT(PORTA_REG, Copy_PIN);
    406e:	ab e3       	ldi	r26, 0x3B	; 59
    4070:	b0 e0       	ldi	r27, 0x00	; 0
    4072:	eb e3       	ldi	r30, 0x3B	; 59
    4074:	f0 e0       	ldi	r31, 0x00	; 0
    4076:	80 81       	ld	r24, Z
    4078:	48 2f       	mov	r20, r24
    407a:	8a 81       	ldd	r24, Y+2	; 0x02
    407c:	28 2f       	mov	r18, r24
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	02 2e       	mov	r0, r18
    4086:	02 c0       	rjmp	.+4      	; 0x408c <SET_State+0x16a>
    4088:	88 0f       	add	r24, r24
    408a:	99 1f       	adc	r25, r25
    408c:	0a 94       	dec	r0
    408e:	e2 f7       	brpl	.-8      	; 0x4088 <SET_State+0x166>
    4090:	80 95       	com	r24
    4092:	84 23       	and	r24, r20
    4094:	8c 93       	st	X, r24
    4096:	3e c0       	rjmp	.+124    	; 0x4114 <SET_State+0x1f2>
			break;
		case PORTB:
			CLR_BIT(PORTB_REG, Copy_PIN);
    4098:	a8 e3       	ldi	r26, 0x38	; 56
    409a:	b0 e0       	ldi	r27, 0x00	; 0
    409c:	e8 e3       	ldi	r30, 0x38	; 56
    409e:	f0 e0       	ldi	r31, 0x00	; 0
    40a0:	80 81       	ld	r24, Z
    40a2:	48 2f       	mov	r20, r24
    40a4:	8a 81       	ldd	r24, Y+2	; 0x02
    40a6:	28 2f       	mov	r18, r24
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	02 2e       	mov	r0, r18
    40b0:	02 c0       	rjmp	.+4      	; 0x40b6 <SET_State+0x194>
    40b2:	88 0f       	add	r24, r24
    40b4:	99 1f       	adc	r25, r25
    40b6:	0a 94       	dec	r0
    40b8:	e2 f7       	brpl	.-8      	; 0x40b2 <SET_State+0x190>
    40ba:	80 95       	com	r24
    40bc:	84 23       	and	r24, r20
    40be:	8c 93       	st	X, r24
    40c0:	29 c0       	rjmp	.+82     	; 0x4114 <SET_State+0x1f2>
			break;
		case PORTC:
			CLR_BIT(PORTC_REG, Copy_PIN);
    40c2:	a5 e3       	ldi	r26, 0x35	; 53
    40c4:	b0 e0       	ldi	r27, 0x00	; 0
    40c6:	e5 e3       	ldi	r30, 0x35	; 53
    40c8:	f0 e0       	ldi	r31, 0x00	; 0
    40ca:	80 81       	ld	r24, Z
    40cc:	48 2f       	mov	r20, r24
    40ce:	8a 81       	ldd	r24, Y+2	; 0x02
    40d0:	28 2f       	mov	r18, r24
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	02 2e       	mov	r0, r18
    40da:	02 c0       	rjmp	.+4      	; 0x40e0 <SET_State+0x1be>
    40dc:	88 0f       	add	r24, r24
    40de:	99 1f       	adc	r25, r25
    40e0:	0a 94       	dec	r0
    40e2:	e2 f7       	brpl	.-8      	; 0x40dc <SET_State+0x1ba>
    40e4:	80 95       	com	r24
    40e6:	84 23       	and	r24, r20
    40e8:	8c 93       	st	X, r24
    40ea:	14 c0       	rjmp	.+40     	; 0x4114 <SET_State+0x1f2>
			break;
		case PORTD:
			CLR_BIT(PORTD_REG, Copy_PIN);
    40ec:	a2 e3       	ldi	r26, 0x32	; 50
    40ee:	b0 e0       	ldi	r27, 0x00	; 0
    40f0:	e2 e3       	ldi	r30, 0x32	; 50
    40f2:	f0 e0       	ldi	r31, 0x00	; 0
    40f4:	80 81       	ld	r24, Z
    40f6:	48 2f       	mov	r20, r24
    40f8:	8a 81       	ldd	r24, Y+2	; 0x02
    40fa:	28 2f       	mov	r18, r24
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	02 2e       	mov	r0, r18
    4104:	02 c0       	rjmp	.+4      	; 0x410a <SET_State+0x1e8>
    4106:	88 0f       	add	r24, r24
    4108:	99 1f       	adc	r25, r25
    410a:	0a 94       	dec	r0
    410c:	e2 f7       	brpl	.-8      	; 0x4106 <SET_State+0x1e4>
    410e:	80 95       	com	r24
    4110:	84 23       	and	r24, r20
    4112:	8c 93       	st	X, r24
			break;
		}
	}
}
    4114:	27 96       	adiw	r28, 0x07	; 7
    4116:	0f b6       	in	r0, 0x3f	; 63
    4118:	f8 94       	cli
    411a:	de bf       	out	0x3e, r29	; 62
    411c:	0f be       	out	0x3f, r0	; 63
    411e:	cd bf       	out	0x3d, r28	; 61
    4120:	cf 91       	pop	r28
    4122:	df 91       	pop	r29
    4124:	08 95       	ret

00004126 <GET_State>:

u8 GET_State(u8 Copy_PORT, u8 Copy_PIN)//read data from input pin
{
    4126:	df 93       	push	r29
    4128:	cf 93       	push	r28
    412a:	00 d0       	rcall	.+0      	; 0x412c <GET_State+0x6>
    412c:	00 d0       	rcall	.+0      	; 0x412e <GET_State+0x8>
    412e:	00 d0       	rcall	.+0      	; 0x4130 <GET_State+0xa>
    4130:	cd b7       	in	r28, 0x3d	; 61
    4132:	de b7       	in	r29, 0x3e	; 62
    4134:	89 83       	std	Y+1, r24	; 0x01
    4136:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PORT)
    4138:	89 81       	ldd	r24, Y+1	; 0x01
    413a:	28 2f       	mov	r18, r24
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	3d 83       	std	Y+5, r19	; 0x05
    4140:	2c 83       	std	Y+4, r18	; 0x04
    4142:	4c 81       	ldd	r20, Y+4	; 0x04
    4144:	5d 81       	ldd	r21, Y+5	; 0x05
    4146:	42 30       	cpi	r20, 0x02	; 2
    4148:	51 05       	cpc	r21, r1
    414a:	49 f1       	breq	.+82     	; 0x419e <GET_State+0x78>
    414c:	8c 81       	ldd	r24, Y+4	; 0x04
    414e:	9d 81       	ldd	r25, Y+5	; 0x05
    4150:	83 30       	cpi	r24, 0x03	; 3
    4152:	91 05       	cpc	r25, r1
    4154:	34 f4       	brge	.+12     	; 0x4162 <GET_State+0x3c>
    4156:	2c 81       	ldd	r18, Y+4	; 0x04
    4158:	3d 81       	ldd	r19, Y+5	; 0x05
    415a:	21 30       	cpi	r18, 0x01	; 1
    415c:	31 05       	cpc	r19, r1
    415e:	61 f0       	breq	.+24     	; 0x4178 <GET_State+0x52>
    4160:	57 c0       	rjmp	.+174    	; 0x4210 <GET_State+0xea>
    4162:	4c 81       	ldd	r20, Y+4	; 0x04
    4164:	5d 81       	ldd	r21, Y+5	; 0x05
    4166:	43 30       	cpi	r20, 0x03	; 3
    4168:	51 05       	cpc	r21, r1
    416a:	61 f1       	breq	.+88     	; 0x41c4 <GET_State+0x9e>
    416c:	8c 81       	ldd	r24, Y+4	; 0x04
    416e:	9d 81       	ldd	r25, Y+5	; 0x05
    4170:	84 30       	cpi	r24, 0x04	; 4
    4172:	91 05       	cpc	r25, r1
    4174:	d1 f1       	breq	.+116    	; 0x41ea <GET_State+0xc4>
    4176:	4c c0       	rjmp	.+152    	; 0x4210 <GET_State+0xea>
	{
	case PORTA:
		return GET_BIT(PINA_REG, Copy_PIN);
    4178:	e9 e3       	ldi	r30, 0x39	; 57
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	80 81       	ld	r24, Z
    417e:	28 2f       	mov	r18, r24
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	8a 81       	ldd	r24, Y+2	; 0x02
    4184:	88 2f       	mov	r24, r24
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	a9 01       	movw	r20, r18
    418a:	02 c0       	rjmp	.+4      	; 0x4190 <GET_State+0x6a>
    418c:	55 95       	asr	r21
    418e:	47 95       	ror	r20
    4190:	8a 95       	dec	r24
    4192:	e2 f7       	brpl	.-8      	; 0x418c <GET_State+0x66>
    4194:	ca 01       	movw	r24, r20
    4196:	58 2f       	mov	r21, r24
    4198:	51 70       	andi	r21, 0x01	; 1
    419a:	5b 83       	std	Y+3, r21	; 0x03
    419c:	3a c0       	rjmp	.+116    	; 0x4212 <GET_State+0xec>
		break;
	case PORTB:
		return GET_BIT(PINB_REG, Copy_PIN);
    419e:	e6 e3       	ldi	r30, 0x36	; 54
    41a0:	f0 e0       	ldi	r31, 0x00	; 0
    41a2:	80 81       	ld	r24, Z
    41a4:	28 2f       	mov	r18, r24
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	8a 81       	ldd	r24, Y+2	; 0x02
    41aa:	88 2f       	mov	r24, r24
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	a9 01       	movw	r20, r18
    41b0:	02 c0       	rjmp	.+4      	; 0x41b6 <GET_State+0x90>
    41b2:	55 95       	asr	r21
    41b4:	47 95       	ror	r20
    41b6:	8a 95       	dec	r24
    41b8:	e2 f7       	brpl	.-8      	; 0x41b2 <GET_State+0x8c>
    41ba:	ca 01       	movw	r24, r20
    41bc:	58 2f       	mov	r21, r24
    41be:	51 70       	andi	r21, 0x01	; 1
    41c0:	5b 83       	std	Y+3, r21	; 0x03
    41c2:	27 c0       	rjmp	.+78     	; 0x4212 <GET_State+0xec>
		break;
	case PORTC:
		return GET_BIT(PINC_REG, Copy_PIN);
    41c4:	e3 e3       	ldi	r30, 0x33	; 51
    41c6:	f0 e0       	ldi	r31, 0x00	; 0
    41c8:	80 81       	ld	r24, Z
    41ca:	28 2f       	mov	r18, r24
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	8a 81       	ldd	r24, Y+2	; 0x02
    41d0:	88 2f       	mov	r24, r24
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	a9 01       	movw	r20, r18
    41d6:	02 c0       	rjmp	.+4      	; 0x41dc <GET_State+0xb6>
    41d8:	55 95       	asr	r21
    41da:	47 95       	ror	r20
    41dc:	8a 95       	dec	r24
    41de:	e2 f7       	brpl	.-8      	; 0x41d8 <GET_State+0xb2>
    41e0:	ca 01       	movw	r24, r20
    41e2:	58 2f       	mov	r21, r24
    41e4:	51 70       	andi	r21, 0x01	; 1
    41e6:	5b 83       	std	Y+3, r21	; 0x03
    41e8:	14 c0       	rjmp	.+40     	; 0x4212 <GET_State+0xec>
		break;
	case PORTD:
		return GET_BIT(PIND_REG, Copy_PIN);
    41ea:	e0 e3       	ldi	r30, 0x30	; 48
    41ec:	f0 e0       	ldi	r31, 0x00	; 0
    41ee:	80 81       	ld	r24, Z
    41f0:	28 2f       	mov	r18, r24
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	8a 81       	ldd	r24, Y+2	; 0x02
    41f6:	88 2f       	mov	r24, r24
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	a9 01       	movw	r20, r18
    41fc:	02 c0       	rjmp	.+4      	; 0x4202 <GET_State+0xdc>
    41fe:	55 95       	asr	r21
    4200:	47 95       	ror	r20
    4202:	8a 95       	dec	r24
    4204:	e2 f7       	brpl	.-8      	; 0x41fe <GET_State+0xd8>
    4206:	ca 01       	movw	r24, r20
    4208:	58 2f       	mov	r21, r24
    420a:	51 70       	andi	r21, 0x01	; 1
    420c:	5b 83       	std	Y+3, r21	; 0x03
    420e:	01 c0       	rjmp	.+2      	; 0x4212 <GET_State+0xec>
    4210:	02 c0       	rjmp	.+4      	; 0x4216 <GET_State+0xf0>
		break;
	}
}
    4212:	8b 81       	ldd	r24, Y+3	; 0x03
    4214:	8e 83       	std	Y+6, r24	; 0x06
    4216:	8e 81       	ldd	r24, Y+6	; 0x06
    4218:	26 96       	adiw	r28, 0x06	; 6
    421a:	0f b6       	in	r0, 0x3f	; 63
    421c:	f8 94       	cli
    421e:	de bf       	out	0x3e, r29	; 62
    4220:	0f be       	out	0x3f, r0	; 63
    4222:	cd bf       	out	0x3d, r28	; 61
    4224:	cf 91       	pop	r28
    4226:	df 91       	pop	r29
    4228:	08 95       	ret

0000422a <SET_Direction_4LSB>:

void SET_Direction_4LSB(u8 Copy_PORT, u8 Direction)//set 4 LSB as input or output
{
    422a:	df 93       	push	r29
    422c:	cf 93       	push	r28
    422e:	00 d0       	rcall	.+0      	; 0x4230 <SET_Direction_4LSB+0x6>
    4230:	00 d0       	rcall	.+0      	; 0x4232 <SET_Direction_4LSB+0x8>
    4232:	00 d0       	rcall	.+0      	; 0x4234 <SET_Direction_4LSB+0xa>
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    4238:	89 83       	std	Y+1, r24	; 0x01
    423a:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction == OUTPUT)
    423c:	8a 81       	ldd	r24, Y+2	; 0x02
    423e:	81 30       	cpi	r24, 0x01	; 1
    4240:	09 f0       	breq	.+2      	; 0x4244 <SET_Direction_4LSB+0x1a>
    4242:	3f c0       	rjmp	.+126    	; 0x42c2 <SET_Direction_4LSB+0x98>
	{
		switch(Copy_PORT)
    4244:	89 81       	ldd	r24, Y+1	; 0x01
    4246:	28 2f       	mov	r18, r24
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	3e 83       	std	Y+6, r19	; 0x06
    424c:	2d 83       	std	Y+5, r18	; 0x05
    424e:	8d 81       	ldd	r24, Y+5	; 0x05
    4250:	9e 81       	ldd	r25, Y+6	; 0x06
    4252:	82 30       	cpi	r24, 0x02	; 2
    4254:	91 05       	cpc	r25, r1
    4256:	f1 f0       	breq	.+60     	; 0x4294 <SET_Direction_4LSB+0x6a>
    4258:	2d 81       	ldd	r18, Y+5	; 0x05
    425a:	3e 81       	ldd	r19, Y+6	; 0x06
    425c:	23 30       	cpi	r18, 0x03	; 3
    425e:	31 05       	cpc	r19, r1
    4260:	34 f4       	brge	.+12     	; 0x426e <SET_Direction_4LSB+0x44>
    4262:	8d 81       	ldd	r24, Y+5	; 0x05
    4264:	9e 81       	ldd	r25, Y+6	; 0x06
    4266:	81 30       	cpi	r24, 0x01	; 1
    4268:	91 05       	cpc	r25, r1
    426a:	61 f0       	breq	.+24     	; 0x4284 <SET_Direction_4LSB+0x5a>
    426c:	2a c0       	rjmp	.+84     	; 0x42c2 <SET_Direction_4LSB+0x98>
    426e:	2d 81       	ldd	r18, Y+5	; 0x05
    4270:	3e 81       	ldd	r19, Y+6	; 0x06
    4272:	23 30       	cpi	r18, 0x03	; 3
    4274:	31 05       	cpc	r19, r1
    4276:	b1 f0       	breq	.+44     	; 0x42a4 <SET_Direction_4LSB+0x7a>
    4278:	8d 81       	ldd	r24, Y+5	; 0x05
    427a:	9e 81       	ldd	r25, Y+6	; 0x06
    427c:	84 30       	cpi	r24, 0x04	; 4
    427e:	91 05       	cpc	r25, r1
    4280:	c9 f0       	breq	.+50     	; 0x42b4 <SET_Direction_4LSB+0x8a>
    4282:	1f c0       	rjmp	.+62     	; 0x42c2 <SET_Direction_4LSB+0x98>
		{
		case PORTA:
			DDRA_REG |= 0x0F;
    4284:	aa e3       	ldi	r26, 0x3A	; 58
    4286:	b0 e0       	ldi	r27, 0x00	; 0
    4288:	ea e3       	ldi	r30, 0x3A	; 58
    428a:	f0 e0       	ldi	r31, 0x00	; 0
    428c:	80 81       	ld	r24, Z
    428e:	8f 60       	ori	r24, 0x0F	; 15
    4290:	8c 93       	st	X, r24
    4292:	17 c0       	rjmp	.+46     	; 0x42c2 <SET_Direction_4LSB+0x98>
			break;
		case PORTB:
			DDRB_REG |= 0x0F;
    4294:	a7 e3       	ldi	r26, 0x37	; 55
    4296:	b0 e0       	ldi	r27, 0x00	; 0
    4298:	e7 e3       	ldi	r30, 0x37	; 55
    429a:	f0 e0       	ldi	r31, 0x00	; 0
    429c:	80 81       	ld	r24, Z
    429e:	8f 60       	ori	r24, 0x0F	; 15
    42a0:	8c 93       	st	X, r24
    42a2:	0f c0       	rjmp	.+30     	; 0x42c2 <SET_Direction_4LSB+0x98>
			break;
		case PORTC:
			DDRC_REG |= 0x0F;
    42a4:	a4 e3       	ldi	r26, 0x34	; 52
    42a6:	b0 e0       	ldi	r27, 0x00	; 0
    42a8:	e4 e3       	ldi	r30, 0x34	; 52
    42aa:	f0 e0       	ldi	r31, 0x00	; 0
    42ac:	80 81       	ld	r24, Z
    42ae:	8f 60       	ori	r24, 0x0F	; 15
    42b0:	8c 93       	st	X, r24
    42b2:	07 c0       	rjmp	.+14     	; 0x42c2 <SET_Direction_4LSB+0x98>
			break;
		case PORTD:
			DDRD_REG |= 0x0F;
    42b4:	a1 e3       	ldi	r26, 0x31	; 49
    42b6:	b0 e0       	ldi	r27, 0x00	; 0
    42b8:	e1 e3       	ldi	r30, 0x31	; 49
    42ba:	f0 e0       	ldi	r31, 0x00	; 0
    42bc:	80 81       	ld	r24, Z
    42be:	8f 60       	ori	r24, 0x0F	; 15
    42c0:	8c 93       	st	X, r24
			break;
		}
	}
	if(Direction == INPUT)
    42c2:	8a 81       	ldd	r24, Y+2	; 0x02
    42c4:	88 23       	and	r24, r24
    42c6:	09 f0       	breq	.+2      	; 0x42ca <SET_Direction_4LSB+0xa0>
    42c8:	3f c0       	rjmp	.+126    	; 0x4348 <SET_Direction_4LSB+0x11e>
	{
		switch(Copy_PORT)
    42ca:	89 81       	ldd	r24, Y+1	; 0x01
    42cc:	28 2f       	mov	r18, r24
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	3c 83       	std	Y+4, r19	; 0x04
    42d2:	2b 83       	std	Y+3, r18	; 0x03
    42d4:	8b 81       	ldd	r24, Y+3	; 0x03
    42d6:	9c 81       	ldd	r25, Y+4	; 0x04
    42d8:	82 30       	cpi	r24, 0x02	; 2
    42da:	91 05       	cpc	r25, r1
    42dc:	f1 f0       	breq	.+60     	; 0x431a <SET_Direction_4LSB+0xf0>
    42de:	2b 81       	ldd	r18, Y+3	; 0x03
    42e0:	3c 81       	ldd	r19, Y+4	; 0x04
    42e2:	23 30       	cpi	r18, 0x03	; 3
    42e4:	31 05       	cpc	r19, r1
    42e6:	34 f4       	brge	.+12     	; 0x42f4 <SET_Direction_4LSB+0xca>
    42e8:	8b 81       	ldd	r24, Y+3	; 0x03
    42ea:	9c 81       	ldd	r25, Y+4	; 0x04
    42ec:	81 30       	cpi	r24, 0x01	; 1
    42ee:	91 05       	cpc	r25, r1
    42f0:	61 f0       	breq	.+24     	; 0x430a <SET_Direction_4LSB+0xe0>
    42f2:	2a c0       	rjmp	.+84     	; 0x4348 <SET_Direction_4LSB+0x11e>
    42f4:	2b 81       	ldd	r18, Y+3	; 0x03
    42f6:	3c 81       	ldd	r19, Y+4	; 0x04
    42f8:	23 30       	cpi	r18, 0x03	; 3
    42fa:	31 05       	cpc	r19, r1
    42fc:	b1 f0       	breq	.+44     	; 0x432a <SET_Direction_4LSB+0x100>
    42fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4300:	9c 81       	ldd	r25, Y+4	; 0x04
    4302:	84 30       	cpi	r24, 0x04	; 4
    4304:	91 05       	cpc	r25, r1
    4306:	c9 f0       	breq	.+50     	; 0x433a <SET_Direction_4LSB+0x110>
    4308:	1f c0       	rjmp	.+62     	; 0x4348 <SET_Direction_4LSB+0x11e>
		{
		case PORTA:
			DDRA_REG &= 0xF0;
    430a:	aa e3       	ldi	r26, 0x3A	; 58
    430c:	b0 e0       	ldi	r27, 0x00	; 0
    430e:	ea e3       	ldi	r30, 0x3A	; 58
    4310:	f0 e0       	ldi	r31, 0x00	; 0
    4312:	80 81       	ld	r24, Z
    4314:	80 7f       	andi	r24, 0xF0	; 240
    4316:	8c 93       	st	X, r24
    4318:	17 c0       	rjmp	.+46     	; 0x4348 <SET_Direction_4LSB+0x11e>
			break;
		case PORTB:
			DDRB_REG &= 0xF0;
    431a:	a7 e3       	ldi	r26, 0x37	; 55
    431c:	b0 e0       	ldi	r27, 0x00	; 0
    431e:	e7 e3       	ldi	r30, 0x37	; 55
    4320:	f0 e0       	ldi	r31, 0x00	; 0
    4322:	80 81       	ld	r24, Z
    4324:	80 7f       	andi	r24, 0xF0	; 240
    4326:	8c 93       	st	X, r24
    4328:	0f c0       	rjmp	.+30     	; 0x4348 <SET_Direction_4LSB+0x11e>
			break;
		case PORTC:
			DDRC_REG &= 0xF0;
    432a:	a4 e3       	ldi	r26, 0x34	; 52
    432c:	b0 e0       	ldi	r27, 0x00	; 0
    432e:	e4 e3       	ldi	r30, 0x34	; 52
    4330:	f0 e0       	ldi	r31, 0x00	; 0
    4332:	80 81       	ld	r24, Z
    4334:	80 7f       	andi	r24, 0xF0	; 240
    4336:	8c 93       	st	X, r24
    4338:	07 c0       	rjmp	.+14     	; 0x4348 <SET_Direction_4LSB+0x11e>
			break;
		case PORTD:
			DDRD_REG &= 0xF0;
    433a:	a1 e3       	ldi	r26, 0x31	; 49
    433c:	b0 e0       	ldi	r27, 0x00	; 0
    433e:	e1 e3       	ldi	r30, 0x31	; 49
    4340:	f0 e0       	ldi	r31, 0x00	; 0
    4342:	80 81       	ld	r24, Z
    4344:	80 7f       	andi	r24, 0xF0	; 240
    4346:	8c 93       	st	X, r24
			break;
		}
	}
}
    4348:	26 96       	adiw	r28, 0x06	; 6
    434a:	0f b6       	in	r0, 0x3f	; 63
    434c:	f8 94       	cli
    434e:	de bf       	out	0x3e, r29	; 62
    4350:	0f be       	out	0x3f, r0	; 63
    4352:	cd bf       	out	0x3d, r28	; 61
    4354:	cf 91       	pop	r28
    4356:	df 91       	pop	r29
    4358:	08 95       	ret

0000435a <SET_Direction_4MSB>:

void SET_Direction_4MSB(u8 Copy_PORT, u8 Direction)//set 4 MSB as input or output
{
    435a:	df 93       	push	r29
    435c:	cf 93       	push	r28
    435e:	00 d0       	rcall	.+0      	; 0x4360 <SET_Direction_4MSB+0x6>
    4360:	00 d0       	rcall	.+0      	; 0x4362 <SET_Direction_4MSB+0x8>
    4362:	00 d0       	rcall	.+0      	; 0x4364 <SET_Direction_4MSB+0xa>
    4364:	cd b7       	in	r28, 0x3d	; 61
    4366:	de b7       	in	r29, 0x3e	; 62
    4368:	89 83       	std	Y+1, r24	; 0x01
    436a:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction == OUTPUT)
    436c:	8a 81       	ldd	r24, Y+2	; 0x02
    436e:	81 30       	cpi	r24, 0x01	; 1
    4370:	09 f0       	breq	.+2      	; 0x4374 <SET_Direction_4MSB+0x1a>
    4372:	3f c0       	rjmp	.+126    	; 0x43f2 <SET_Direction_4MSB+0x98>
	{
		switch(Copy_PORT)
    4374:	89 81       	ldd	r24, Y+1	; 0x01
    4376:	28 2f       	mov	r18, r24
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	3e 83       	std	Y+6, r19	; 0x06
    437c:	2d 83       	std	Y+5, r18	; 0x05
    437e:	8d 81       	ldd	r24, Y+5	; 0x05
    4380:	9e 81       	ldd	r25, Y+6	; 0x06
    4382:	82 30       	cpi	r24, 0x02	; 2
    4384:	91 05       	cpc	r25, r1
    4386:	f1 f0       	breq	.+60     	; 0x43c4 <SET_Direction_4MSB+0x6a>
    4388:	2d 81       	ldd	r18, Y+5	; 0x05
    438a:	3e 81       	ldd	r19, Y+6	; 0x06
    438c:	23 30       	cpi	r18, 0x03	; 3
    438e:	31 05       	cpc	r19, r1
    4390:	34 f4       	brge	.+12     	; 0x439e <SET_Direction_4MSB+0x44>
    4392:	8d 81       	ldd	r24, Y+5	; 0x05
    4394:	9e 81       	ldd	r25, Y+6	; 0x06
    4396:	81 30       	cpi	r24, 0x01	; 1
    4398:	91 05       	cpc	r25, r1
    439a:	61 f0       	breq	.+24     	; 0x43b4 <SET_Direction_4MSB+0x5a>
    439c:	2a c0       	rjmp	.+84     	; 0x43f2 <SET_Direction_4MSB+0x98>
    439e:	2d 81       	ldd	r18, Y+5	; 0x05
    43a0:	3e 81       	ldd	r19, Y+6	; 0x06
    43a2:	23 30       	cpi	r18, 0x03	; 3
    43a4:	31 05       	cpc	r19, r1
    43a6:	b1 f0       	breq	.+44     	; 0x43d4 <SET_Direction_4MSB+0x7a>
    43a8:	8d 81       	ldd	r24, Y+5	; 0x05
    43aa:	9e 81       	ldd	r25, Y+6	; 0x06
    43ac:	84 30       	cpi	r24, 0x04	; 4
    43ae:	91 05       	cpc	r25, r1
    43b0:	c9 f0       	breq	.+50     	; 0x43e4 <SET_Direction_4MSB+0x8a>
    43b2:	1f c0       	rjmp	.+62     	; 0x43f2 <SET_Direction_4MSB+0x98>
		{
		case PORTA:
			DDRA_REG |= 0xF0;
    43b4:	aa e3       	ldi	r26, 0x3A	; 58
    43b6:	b0 e0       	ldi	r27, 0x00	; 0
    43b8:	ea e3       	ldi	r30, 0x3A	; 58
    43ba:	f0 e0       	ldi	r31, 0x00	; 0
    43bc:	80 81       	ld	r24, Z
    43be:	80 6f       	ori	r24, 0xF0	; 240
    43c0:	8c 93       	st	X, r24
    43c2:	17 c0       	rjmp	.+46     	; 0x43f2 <SET_Direction_4MSB+0x98>
			break;
		case PORTB:
			DDRB_REG |= 0xF0;
    43c4:	a7 e3       	ldi	r26, 0x37	; 55
    43c6:	b0 e0       	ldi	r27, 0x00	; 0
    43c8:	e7 e3       	ldi	r30, 0x37	; 55
    43ca:	f0 e0       	ldi	r31, 0x00	; 0
    43cc:	80 81       	ld	r24, Z
    43ce:	80 6f       	ori	r24, 0xF0	; 240
    43d0:	8c 93       	st	X, r24
    43d2:	0f c0       	rjmp	.+30     	; 0x43f2 <SET_Direction_4MSB+0x98>
			break;
		case PORTC:
			DDRC_REG |= 0xF0;
    43d4:	a4 e3       	ldi	r26, 0x34	; 52
    43d6:	b0 e0       	ldi	r27, 0x00	; 0
    43d8:	e4 e3       	ldi	r30, 0x34	; 52
    43da:	f0 e0       	ldi	r31, 0x00	; 0
    43dc:	80 81       	ld	r24, Z
    43de:	80 6f       	ori	r24, 0xF0	; 240
    43e0:	8c 93       	st	X, r24
    43e2:	07 c0       	rjmp	.+14     	; 0x43f2 <SET_Direction_4MSB+0x98>
			break;
		case PORTD:
			DDRD_REG |= 0xF0;
    43e4:	a1 e3       	ldi	r26, 0x31	; 49
    43e6:	b0 e0       	ldi	r27, 0x00	; 0
    43e8:	e1 e3       	ldi	r30, 0x31	; 49
    43ea:	f0 e0       	ldi	r31, 0x00	; 0
    43ec:	80 81       	ld	r24, Z
    43ee:	80 6f       	ori	r24, 0xF0	; 240
    43f0:	8c 93       	st	X, r24
			break;
		}
	}
	if(Direction == INPUT)
    43f2:	8a 81       	ldd	r24, Y+2	; 0x02
    43f4:	88 23       	and	r24, r24
    43f6:	09 f0       	breq	.+2      	; 0x43fa <SET_Direction_4MSB+0xa0>
    43f8:	3f c0       	rjmp	.+126    	; 0x4478 <SET_Direction_4MSB+0x11e>
	{
		switch(Copy_PORT)
    43fa:	89 81       	ldd	r24, Y+1	; 0x01
    43fc:	28 2f       	mov	r18, r24
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	3c 83       	std	Y+4, r19	; 0x04
    4402:	2b 83       	std	Y+3, r18	; 0x03
    4404:	8b 81       	ldd	r24, Y+3	; 0x03
    4406:	9c 81       	ldd	r25, Y+4	; 0x04
    4408:	82 30       	cpi	r24, 0x02	; 2
    440a:	91 05       	cpc	r25, r1
    440c:	f1 f0       	breq	.+60     	; 0x444a <SET_Direction_4MSB+0xf0>
    440e:	2b 81       	ldd	r18, Y+3	; 0x03
    4410:	3c 81       	ldd	r19, Y+4	; 0x04
    4412:	23 30       	cpi	r18, 0x03	; 3
    4414:	31 05       	cpc	r19, r1
    4416:	34 f4       	brge	.+12     	; 0x4424 <SET_Direction_4MSB+0xca>
    4418:	8b 81       	ldd	r24, Y+3	; 0x03
    441a:	9c 81       	ldd	r25, Y+4	; 0x04
    441c:	81 30       	cpi	r24, 0x01	; 1
    441e:	91 05       	cpc	r25, r1
    4420:	61 f0       	breq	.+24     	; 0x443a <SET_Direction_4MSB+0xe0>
    4422:	2a c0       	rjmp	.+84     	; 0x4478 <SET_Direction_4MSB+0x11e>
    4424:	2b 81       	ldd	r18, Y+3	; 0x03
    4426:	3c 81       	ldd	r19, Y+4	; 0x04
    4428:	23 30       	cpi	r18, 0x03	; 3
    442a:	31 05       	cpc	r19, r1
    442c:	b1 f0       	breq	.+44     	; 0x445a <SET_Direction_4MSB+0x100>
    442e:	8b 81       	ldd	r24, Y+3	; 0x03
    4430:	9c 81       	ldd	r25, Y+4	; 0x04
    4432:	84 30       	cpi	r24, 0x04	; 4
    4434:	91 05       	cpc	r25, r1
    4436:	c9 f0       	breq	.+50     	; 0x446a <SET_Direction_4MSB+0x110>
    4438:	1f c0       	rjmp	.+62     	; 0x4478 <SET_Direction_4MSB+0x11e>
		{
		case PORTA:
			DDRA_REG &= 0x0F;
    443a:	aa e3       	ldi	r26, 0x3A	; 58
    443c:	b0 e0       	ldi	r27, 0x00	; 0
    443e:	ea e3       	ldi	r30, 0x3A	; 58
    4440:	f0 e0       	ldi	r31, 0x00	; 0
    4442:	80 81       	ld	r24, Z
    4444:	8f 70       	andi	r24, 0x0F	; 15
    4446:	8c 93       	st	X, r24
    4448:	17 c0       	rjmp	.+46     	; 0x4478 <SET_Direction_4MSB+0x11e>
			break;
		case PORTB:
			DDRB_REG &= 0x0F;
    444a:	a7 e3       	ldi	r26, 0x37	; 55
    444c:	b0 e0       	ldi	r27, 0x00	; 0
    444e:	e7 e3       	ldi	r30, 0x37	; 55
    4450:	f0 e0       	ldi	r31, 0x00	; 0
    4452:	80 81       	ld	r24, Z
    4454:	8f 70       	andi	r24, 0x0F	; 15
    4456:	8c 93       	st	X, r24
    4458:	0f c0       	rjmp	.+30     	; 0x4478 <SET_Direction_4MSB+0x11e>
			break;
		case PORTC:
			DDRC_REG &= 0x0F;
    445a:	a4 e3       	ldi	r26, 0x34	; 52
    445c:	b0 e0       	ldi	r27, 0x00	; 0
    445e:	e4 e3       	ldi	r30, 0x34	; 52
    4460:	f0 e0       	ldi	r31, 0x00	; 0
    4462:	80 81       	ld	r24, Z
    4464:	8f 70       	andi	r24, 0x0F	; 15
    4466:	8c 93       	st	X, r24
    4468:	07 c0       	rjmp	.+14     	; 0x4478 <SET_Direction_4MSB+0x11e>
			break;
		case PORTD:
			DDRD_REG &= 0x0F;
    446a:	a1 e3       	ldi	r26, 0x31	; 49
    446c:	b0 e0       	ldi	r27, 0x00	; 0
    446e:	e1 e3       	ldi	r30, 0x31	; 49
    4470:	f0 e0       	ldi	r31, 0x00	; 0
    4472:	80 81       	ld	r24, Z
    4474:	8f 70       	andi	r24, 0x0F	; 15
    4476:	8c 93       	st	X, r24
			break;
		}
	}
}
    4478:	26 96       	adiw	r28, 0x06	; 6
    447a:	0f b6       	in	r0, 0x3f	; 63
    447c:	f8 94       	cli
    447e:	de bf       	out	0x3e, r29	; 62
    4480:	0f be       	out	0x3f, r0	; 63
    4482:	cd bf       	out	0x3d, r28	; 61
    4484:	cf 91       	pop	r28
    4486:	df 91       	pop	r29
    4488:	08 95       	ret

0000448a <SET_State_4LSB>:

void SET_State_4LSB(u8 Copy_PORT, u8 State)//set 4LSB output pins as high or low
{
    448a:	df 93       	push	r29
    448c:	cf 93       	push	r28
    448e:	00 d0       	rcall	.+0      	; 0x4490 <SET_State_4LSB+0x6>
    4490:	00 d0       	rcall	.+0      	; 0x4492 <SET_State_4LSB+0x8>
    4492:	00 d0       	rcall	.+0      	; 0x4494 <SET_State_4LSB+0xa>
    4494:	cd b7       	in	r28, 0x3d	; 61
    4496:	de b7       	in	r29, 0x3e	; 62
    4498:	89 83       	std	Y+1, r24	; 0x01
    449a:	6a 83       	std	Y+2, r22	; 0x02
	if(State == HIGH)
    449c:	8a 81       	ldd	r24, Y+2	; 0x02
    449e:	81 30       	cpi	r24, 0x01	; 1
    44a0:	09 f0       	breq	.+2      	; 0x44a4 <SET_State_4LSB+0x1a>
    44a2:	40 c0       	rjmp	.+128    	; 0x4524 <SET_State_4LSB+0x9a>
	{
		switch(Copy_PORT)
    44a4:	89 81       	ldd	r24, Y+1	; 0x01
    44a6:	28 2f       	mov	r18, r24
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	3e 83       	std	Y+6, r19	; 0x06
    44ac:	2d 83       	std	Y+5, r18	; 0x05
    44ae:	8d 81       	ldd	r24, Y+5	; 0x05
    44b0:	9e 81       	ldd	r25, Y+6	; 0x06
    44b2:	82 30       	cpi	r24, 0x02	; 2
    44b4:	91 05       	cpc	r25, r1
    44b6:	f1 f0       	breq	.+60     	; 0x44f4 <SET_State_4LSB+0x6a>
    44b8:	2d 81       	ldd	r18, Y+5	; 0x05
    44ba:	3e 81       	ldd	r19, Y+6	; 0x06
    44bc:	23 30       	cpi	r18, 0x03	; 3
    44be:	31 05       	cpc	r19, r1
    44c0:	34 f4       	brge	.+12     	; 0x44ce <SET_State_4LSB+0x44>
    44c2:	8d 81       	ldd	r24, Y+5	; 0x05
    44c4:	9e 81       	ldd	r25, Y+6	; 0x06
    44c6:	81 30       	cpi	r24, 0x01	; 1
    44c8:	91 05       	cpc	r25, r1
    44ca:	61 f0       	breq	.+24     	; 0x44e4 <SET_State_4LSB+0x5a>
    44cc:	6e c0       	rjmp	.+220    	; 0x45aa <SET_State_4LSB+0x120>
    44ce:	2d 81       	ldd	r18, Y+5	; 0x05
    44d0:	3e 81       	ldd	r19, Y+6	; 0x06
    44d2:	23 30       	cpi	r18, 0x03	; 3
    44d4:	31 05       	cpc	r19, r1
    44d6:	b1 f0       	breq	.+44     	; 0x4504 <SET_State_4LSB+0x7a>
    44d8:	8d 81       	ldd	r24, Y+5	; 0x05
    44da:	9e 81       	ldd	r25, Y+6	; 0x06
    44dc:	84 30       	cpi	r24, 0x04	; 4
    44de:	91 05       	cpc	r25, r1
    44e0:	c9 f0       	breq	.+50     	; 0x4514 <SET_State_4LSB+0x8a>
    44e2:	63 c0       	rjmp	.+198    	; 0x45aa <SET_State_4LSB+0x120>
		{
		case PORTA:
			PORTA_REG |= 0x0F;
    44e4:	ab e3       	ldi	r26, 0x3B	; 59
    44e6:	b0 e0       	ldi	r27, 0x00	; 0
    44e8:	eb e3       	ldi	r30, 0x3B	; 59
    44ea:	f0 e0       	ldi	r31, 0x00	; 0
    44ec:	80 81       	ld	r24, Z
    44ee:	8f 60       	ori	r24, 0x0F	; 15
    44f0:	8c 93       	st	X, r24
    44f2:	5b c0       	rjmp	.+182    	; 0x45aa <SET_State_4LSB+0x120>
			break;
		case PORTB:
			PORTB_REG |= 0x0F;
    44f4:	a8 e3       	ldi	r26, 0x38	; 56
    44f6:	b0 e0       	ldi	r27, 0x00	; 0
    44f8:	e8 e3       	ldi	r30, 0x38	; 56
    44fa:	f0 e0       	ldi	r31, 0x00	; 0
    44fc:	80 81       	ld	r24, Z
    44fe:	8f 60       	ori	r24, 0x0F	; 15
    4500:	8c 93       	st	X, r24
    4502:	53 c0       	rjmp	.+166    	; 0x45aa <SET_State_4LSB+0x120>
			break;
		case PORTC:
			PORTC_REG |= 0x0F;
    4504:	a5 e3       	ldi	r26, 0x35	; 53
    4506:	b0 e0       	ldi	r27, 0x00	; 0
    4508:	e5 e3       	ldi	r30, 0x35	; 53
    450a:	f0 e0       	ldi	r31, 0x00	; 0
    450c:	80 81       	ld	r24, Z
    450e:	8f 60       	ori	r24, 0x0F	; 15
    4510:	8c 93       	st	X, r24
    4512:	4b c0       	rjmp	.+150    	; 0x45aa <SET_State_4LSB+0x120>
			break;
		case PORTD:
			PORTD_REG |= 0x0F;
    4514:	a2 e3       	ldi	r26, 0x32	; 50
    4516:	b0 e0       	ldi	r27, 0x00	; 0
    4518:	e2 e3       	ldi	r30, 0x32	; 50
    451a:	f0 e0       	ldi	r31, 0x00	; 0
    451c:	80 81       	ld	r24, Z
    451e:	8f 60       	ori	r24, 0x0F	; 15
    4520:	8c 93       	st	X, r24
    4522:	43 c0       	rjmp	.+134    	; 0x45aa <SET_State_4LSB+0x120>
			break;
		}
	}
	else if(State == LOW)
    4524:	8a 81       	ldd	r24, Y+2	; 0x02
    4526:	88 23       	and	r24, r24
    4528:	09 f0       	breq	.+2      	; 0x452c <SET_State_4LSB+0xa2>
    452a:	3f c0       	rjmp	.+126    	; 0x45aa <SET_State_4LSB+0x120>
	{
		switch(Copy_PORT)
    452c:	89 81       	ldd	r24, Y+1	; 0x01
    452e:	28 2f       	mov	r18, r24
    4530:	30 e0       	ldi	r19, 0x00	; 0
    4532:	3c 83       	std	Y+4, r19	; 0x04
    4534:	2b 83       	std	Y+3, r18	; 0x03
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	9c 81       	ldd	r25, Y+4	; 0x04
    453a:	82 30       	cpi	r24, 0x02	; 2
    453c:	91 05       	cpc	r25, r1
    453e:	f1 f0       	breq	.+60     	; 0x457c <SET_State_4LSB+0xf2>
    4540:	2b 81       	ldd	r18, Y+3	; 0x03
    4542:	3c 81       	ldd	r19, Y+4	; 0x04
    4544:	23 30       	cpi	r18, 0x03	; 3
    4546:	31 05       	cpc	r19, r1
    4548:	34 f4       	brge	.+12     	; 0x4556 <SET_State_4LSB+0xcc>
    454a:	8b 81       	ldd	r24, Y+3	; 0x03
    454c:	9c 81       	ldd	r25, Y+4	; 0x04
    454e:	81 30       	cpi	r24, 0x01	; 1
    4550:	91 05       	cpc	r25, r1
    4552:	61 f0       	breq	.+24     	; 0x456c <SET_State_4LSB+0xe2>
    4554:	2a c0       	rjmp	.+84     	; 0x45aa <SET_State_4LSB+0x120>
    4556:	2b 81       	ldd	r18, Y+3	; 0x03
    4558:	3c 81       	ldd	r19, Y+4	; 0x04
    455a:	23 30       	cpi	r18, 0x03	; 3
    455c:	31 05       	cpc	r19, r1
    455e:	b1 f0       	breq	.+44     	; 0x458c <SET_State_4LSB+0x102>
    4560:	8b 81       	ldd	r24, Y+3	; 0x03
    4562:	9c 81       	ldd	r25, Y+4	; 0x04
    4564:	84 30       	cpi	r24, 0x04	; 4
    4566:	91 05       	cpc	r25, r1
    4568:	c9 f0       	breq	.+50     	; 0x459c <SET_State_4LSB+0x112>
    456a:	1f c0       	rjmp	.+62     	; 0x45aa <SET_State_4LSB+0x120>
		{
		case PORTA:
			PORTA_REG &= 0xF0;
    456c:	ab e3       	ldi	r26, 0x3B	; 59
    456e:	b0 e0       	ldi	r27, 0x00	; 0
    4570:	eb e3       	ldi	r30, 0x3B	; 59
    4572:	f0 e0       	ldi	r31, 0x00	; 0
    4574:	80 81       	ld	r24, Z
    4576:	80 7f       	andi	r24, 0xF0	; 240
    4578:	8c 93       	st	X, r24
    457a:	17 c0       	rjmp	.+46     	; 0x45aa <SET_State_4LSB+0x120>
			break;
		case PORTB:
			PORTB_REG &= 0xF0;
    457c:	a8 e3       	ldi	r26, 0x38	; 56
    457e:	b0 e0       	ldi	r27, 0x00	; 0
    4580:	e8 e3       	ldi	r30, 0x38	; 56
    4582:	f0 e0       	ldi	r31, 0x00	; 0
    4584:	80 81       	ld	r24, Z
    4586:	80 7f       	andi	r24, 0xF0	; 240
    4588:	8c 93       	st	X, r24
    458a:	0f c0       	rjmp	.+30     	; 0x45aa <SET_State_4LSB+0x120>
			break;
		case PORTC:
			PORTC_REG &= 0xF0;
    458c:	a5 e3       	ldi	r26, 0x35	; 53
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	e5 e3       	ldi	r30, 0x35	; 53
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	80 81       	ld	r24, Z
    4596:	80 7f       	andi	r24, 0xF0	; 240
    4598:	8c 93       	st	X, r24
    459a:	07 c0       	rjmp	.+14     	; 0x45aa <SET_State_4LSB+0x120>
			break;
		case PORTD:
			PORTD_REG &= 0xF0;
    459c:	a2 e3       	ldi	r26, 0x32	; 50
    459e:	b0 e0       	ldi	r27, 0x00	; 0
    45a0:	e2 e3       	ldi	r30, 0x32	; 50
    45a2:	f0 e0       	ldi	r31, 0x00	; 0
    45a4:	80 81       	ld	r24, Z
    45a6:	80 7f       	andi	r24, 0xF0	; 240
    45a8:	8c 93       	st	X, r24
			break;
		}
	}
}
    45aa:	26 96       	adiw	r28, 0x06	; 6
    45ac:	0f b6       	in	r0, 0x3f	; 63
    45ae:	f8 94       	cli
    45b0:	de bf       	out	0x3e, r29	; 62
    45b2:	0f be       	out	0x3f, r0	; 63
    45b4:	cd bf       	out	0x3d, r28	; 61
    45b6:	cf 91       	pop	r28
    45b8:	df 91       	pop	r29
    45ba:	08 95       	ret

000045bc <SET_State_4MSB>:

void SET_State_4MSB(u8 Copy_PORT, u8 State)//set 4MSB output pins as high or low
{
    45bc:	df 93       	push	r29
    45be:	cf 93       	push	r28
    45c0:	00 d0       	rcall	.+0      	; 0x45c2 <SET_State_4MSB+0x6>
    45c2:	00 d0       	rcall	.+0      	; 0x45c4 <SET_State_4MSB+0x8>
    45c4:	00 d0       	rcall	.+0      	; 0x45c6 <SET_State_4MSB+0xa>
    45c6:	cd b7       	in	r28, 0x3d	; 61
    45c8:	de b7       	in	r29, 0x3e	; 62
    45ca:	89 83       	std	Y+1, r24	; 0x01
    45cc:	6a 83       	std	Y+2, r22	; 0x02
	if(State == HIGH)
    45ce:	8a 81       	ldd	r24, Y+2	; 0x02
    45d0:	81 30       	cpi	r24, 0x01	; 1
    45d2:	09 f0       	breq	.+2      	; 0x45d6 <SET_State_4MSB+0x1a>
    45d4:	40 c0       	rjmp	.+128    	; 0x4656 <SET_State_4MSB+0x9a>
	{
		switch(Copy_PORT)
    45d6:	89 81       	ldd	r24, Y+1	; 0x01
    45d8:	28 2f       	mov	r18, r24
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	3e 83       	std	Y+6, r19	; 0x06
    45de:	2d 83       	std	Y+5, r18	; 0x05
    45e0:	8d 81       	ldd	r24, Y+5	; 0x05
    45e2:	9e 81       	ldd	r25, Y+6	; 0x06
    45e4:	82 30       	cpi	r24, 0x02	; 2
    45e6:	91 05       	cpc	r25, r1
    45e8:	f1 f0       	breq	.+60     	; 0x4626 <SET_State_4MSB+0x6a>
    45ea:	2d 81       	ldd	r18, Y+5	; 0x05
    45ec:	3e 81       	ldd	r19, Y+6	; 0x06
    45ee:	23 30       	cpi	r18, 0x03	; 3
    45f0:	31 05       	cpc	r19, r1
    45f2:	34 f4       	brge	.+12     	; 0x4600 <SET_State_4MSB+0x44>
    45f4:	8d 81       	ldd	r24, Y+5	; 0x05
    45f6:	9e 81       	ldd	r25, Y+6	; 0x06
    45f8:	81 30       	cpi	r24, 0x01	; 1
    45fa:	91 05       	cpc	r25, r1
    45fc:	61 f0       	breq	.+24     	; 0x4616 <SET_State_4MSB+0x5a>
    45fe:	6e c0       	rjmp	.+220    	; 0x46dc <SET_State_4MSB+0x120>
    4600:	2d 81       	ldd	r18, Y+5	; 0x05
    4602:	3e 81       	ldd	r19, Y+6	; 0x06
    4604:	23 30       	cpi	r18, 0x03	; 3
    4606:	31 05       	cpc	r19, r1
    4608:	b1 f0       	breq	.+44     	; 0x4636 <SET_State_4MSB+0x7a>
    460a:	8d 81       	ldd	r24, Y+5	; 0x05
    460c:	9e 81       	ldd	r25, Y+6	; 0x06
    460e:	84 30       	cpi	r24, 0x04	; 4
    4610:	91 05       	cpc	r25, r1
    4612:	c9 f0       	breq	.+50     	; 0x4646 <SET_State_4MSB+0x8a>
    4614:	63 c0       	rjmp	.+198    	; 0x46dc <SET_State_4MSB+0x120>
		{
		case PORTA:
			PORTA_REG |= 0xF0;
    4616:	ab e3       	ldi	r26, 0x3B	; 59
    4618:	b0 e0       	ldi	r27, 0x00	; 0
    461a:	eb e3       	ldi	r30, 0x3B	; 59
    461c:	f0 e0       	ldi	r31, 0x00	; 0
    461e:	80 81       	ld	r24, Z
    4620:	80 6f       	ori	r24, 0xF0	; 240
    4622:	8c 93       	st	X, r24
    4624:	5b c0       	rjmp	.+182    	; 0x46dc <SET_State_4MSB+0x120>
			break;
		case PORTB:
			PORTB_REG |= 0xF0;
    4626:	a8 e3       	ldi	r26, 0x38	; 56
    4628:	b0 e0       	ldi	r27, 0x00	; 0
    462a:	e8 e3       	ldi	r30, 0x38	; 56
    462c:	f0 e0       	ldi	r31, 0x00	; 0
    462e:	80 81       	ld	r24, Z
    4630:	80 6f       	ori	r24, 0xF0	; 240
    4632:	8c 93       	st	X, r24
    4634:	53 c0       	rjmp	.+166    	; 0x46dc <SET_State_4MSB+0x120>
			break;
		case PORTC:
			PORTC_REG |= 0xF0;
    4636:	a5 e3       	ldi	r26, 0x35	; 53
    4638:	b0 e0       	ldi	r27, 0x00	; 0
    463a:	e5 e3       	ldi	r30, 0x35	; 53
    463c:	f0 e0       	ldi	r31, 0x00	; 0
    463e:	80 81       	ld	r24, Z
    4640:	80 6f       	ori	r24, 0xF0	; 240
    4642:	8c 93       	st	X, r24
    4644:	4b c0       	rjmp	.+150    	; 0x46dc <SET_State_4MSB+0x120>
			break;
		case PORTD:
			PORTD_REG |= 0xF0;
    4646:	a2 e3       	ldi	r26, 0x32	; 50
    4648:	b0 e0       	ldi	r27, 0x00	; 0
    464a:	e2 e3       	ldi	r30, 0x32	; 50
    464c:	f0 e0       	ldi	r31, 0x00	; 0
    464e:	80 81       	ld	r24, Z
    4650:	80 6f       	ori	r24, 0xF0	; 240
    4652:	8c 93       	st	X, r24
    4654:	43 c0       	rjmp	.+134    	; 0x46dc <SET_State_4MSB+0x120>
			break;
		}
	}
	else if(State == LOW)
    4656:	8a 81       	ldd	r24, Y+2	; 0x02
    4658:	88 23       	and	r24, r24
    465a:	09 f0       	breq	.+2      	; 0x465e <SET_State_4MSB+0xa2>
    465c:	3f c0       	rjmp	.+126    	; 0x46dc <SET_State_4MSB+0x120>
	{
		switch(Copy_PORT)
    465e:	89 81       	ldd	r24, Y+1	; 0x01
    4660:	28 2f       	mov	r18, r24
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	3c 83       	std	Y+4, r19	; 0x04
    4666:	2b 83       	std	Y+3, r18	; 0x03
    4668:	8b 81       	ldd	r24, Y+3	; 0x03
    466a:	9c 81       	ldd	r25, Y+4	; 0x04
    466c:	82 30       	cpi	r24, 0x02	; 2
    466e:	91 05       	cpc	r25, r1
    4670:	f1 f0       	breq	.+60     	; 0x46ae <SET_State_4MSB+0xf2>
    4672:	2b 81       	ldd	r18, Y+3	; 0x03
    4674:	3c 81       	ldd	r19, Y+4	; 0x04
    4676:	23 30       	cpi	r18, 0x03	; 3
    4678:	31 05       	cpc	r19, r1
    467a:	34 f4       	brge	.+12     	; 0x4688 <SET_State_4MSB+0xcc>
    467c:	8b 81       	ldd	r24, Y+3	; 0x03
    467e:	9c 81       	ldd	r25, Y+4	; 0x04
    4680:	81 30       	cpi	r24, 0x01	; 1
    4682:	91 05       	cpc	r25, r1
    4684:	61 f0       	breq	.+24     	; 0x469e <SET_State_4MSB+0xe2>
    4686:	2a c0       	rjmp	.+84     	; 0x46dc <SET_State_4MSB+0x120>
    4688:	2b 81       	ldd	r18, Y+3	; 0x03
    468a:	3c 81       	ldd	r19, Y+4	; 0x04
    468c:	23 30       	cpi	r18, 0x03	; 3
    468e:	31 05       	cpc	r19, r1
    4690:	b1 f0       	breq	.+44     	; 0x46be <SET_State_4MSB+0x102>
    4692:	8b 81       	ldd	r24, Y+3	; 0x03
    4694:	9c 81       	ldd	r25, Y+4	; 0x04
    4696:	84 30       	cpi	r24, 0x04	; 4
    4698:	91 05       	cpc	r25, r1
    469a:	c9 f0       	breq	.+50     	; 0x46ce <SET_State_4MSB+0x112>
    469c:	1f c0       	rjmp	.+62     	; 0x46dc <SET_State_4MSB+0x120>
		{
		case PORTA:
			PORTA_REG &= 0x0F;
    469e:	ab e3       	ldi	r26, 0x3B	; 59
    46a0:	b0 e0       	ldi	r27, 0x00	; 0
    46a2:	eb e3       	ldi	r30, 0x3B	; 59
    46a4:	f0 e0       	ldi	r31, 0x00	; 0
    46a6:	80 81       	ld	r24, Z
    46a8:	8f 70       	andi	r24, 0x0F	; 15
    46aa:	8c 93       	st	X, r24
    46ac:	17 c0       	rjmp	.+46     	; 0x46dc <SET_State_4MSB+0x120>
			break;
		case PORTB:
			PORTB_REG &= 0x0F;
    46ae:	a8 e3       	ldi	r26, 0x38	; 56
    46b0:	b0 e0       	ldi	r27, 0x00	; 0
    46b2:	e8 e3       	ldi	r30, 0x38	; 56
    46b4:	f0 e0       	ldi	r31, 0x00	; 0
    46b6:	80 81       	ld	r24, Z
    46b8:	8f 70       	andi	r24, 0x0F	; 15
    46ba:	8c 93       	st	X, r24
    46bc:	0f c0       	rjmp	.+30     	; 0x46dc <SET_State_4MSB+0x120>
			break;
		case PORTC:
			PORTC_REG &= 0x0F;
    46be:	a5 e3       	ldi	r26, 0x35	; 53
    46c0:	b0 e0       	ldi	r27, 0x00	; 0
    46c2:	e5 e3       	ldi	r30, 0x35	; 53
    46c4:	f0 e0       	ldi	r31, 0x00	; 0
    46c6:	80 81       	ld	r24, Z
    46c8:	8f 70       	andi	r24, 0x0F	; 15
    46ca:	8c 93       	st	X, r24
    46cc:	07 c0       	rjmp	.+14     	; 0x46dc <SET_State_4MSB+0x120>
			break;
		case PORTD:
			PORTD_REG &= 0x0F;
    46ce:	a2 e3       	ldi	r26, 0x32	; 50
    46d0:	b0 e0       	ldi	r27, 0x00	; 0
    46d2:	e2 e3       	ldi	r30, 0x32	; 50
    46d4:	f0 e0       	ldi	r31, 0x00	; 0
    46d6:	80 81       	ld	r24, Z
    46d8:	8f 70       	andi	r24, 0x0F	; 15
    46da:	8c 93       	st	X, r24
			break;
		}
	}
}
    46dc:	26 96       	adiw	r28, 0x06	; 6
    46de:	0f b6       	in	r0, 0x3f	; 63
    46e0:	f8 94       	cli
    46e2:	de bf       	out	0x3e, r29	; 62
    46e4:	0f be       	out	0x3f, r0	; 63
    46e6:	cd bf       	out	0x3d, r28	; 61
    46e8:	cf 91       	pop	r28
    46ea:	df 91       	pop	r29
    46ec:	08 95       	ret

000046ee <__udivmodhi4>:
    46ee:	aa 1b       	sub	r26, r26
    46f0:	bb 1b       	sub	r27, r27
    46f2:	51 e1       	ldi	r21, 0x11	; 17
    46f4:	07 c0       	rjmp	.+14     	; 0x4704 <__udivmodhi4_ep>

000046f6 <__udivmodhi4_loop>:
    46f6:	aa 1f       	adc	r26, r26
    46f8:	bb 1f       	adc	r27, r27
    46fa:	a6 17       	cp	r26, r22
    46fc:	b7 07       	cpc	r27, r23
    46fe:	10 f0       	brcs	.+4      	; 0x4704 <__udivmodhi4_ep>
    4700:	a6 1b       	sub	r26, r22
    4702:	b7 0b       	sbc	r27, r23

00004704 <__udivmodhi4_ep>:
    4704:	88 1f       	adc	r24, r24
    4706:	99 1f       	adc	r25, r25
    4708:	5a 95       	dec	r21
    470a:	a9 f7       	brne	.-22     	; 0x46f6 <__udivmodhi4_loop>
    470c:	80 95       	com	r24
    470e:	90 95       	com	r25
    4710:	bc 01       	movw	r22, r24
    4712:	cd 01       	movw	r24, r26
    4714:	08 95       	ret

00004716 <__prologue_saves__>:
    4716:	2f 92       	push	r2
    4718:	3f 92       	push	r3
    471a:	4f 92       	push	r4
    471c:	5f 92       	push	r5
    471e:	6f 92       	push	r6
    4720:	7f 92       	push	r7
    4722:	8f 92       	push	r8
    4724:	9f 92       	push	r9
    4726:	af 92       	push	r10
    4728:	bf 92       	push	r11
    472a:	cf 92       	push	r12
    472c:	df 92       	push	r13
    472e:	ef 92       	push	r14
    4730:	ff 92       	push	r15
    4732:	0f 93       	push	r16
    4734:	1f 93       	push	r17
    4736:	cf 93       	push	r28
    4738:	df 93       	push	r29
    473a:	cd b7       	in	r28, 0x3d	; 61
    473c:	de b7       	in	r29, 0x3e	; 62
    473e:	ca 1b       	sub	r28, r26
    4740:	db 0b       	sbc	r29, r27
    4742:	0f b6       	in	r0, 0x3f	; 63
    4744:	f8 94       	cli
    4746:	de bf       	out	0x3e, r29	; 62
    4748:	0f be       	out	0x3f, r0	; 63
    474a:	cd bf       	out	0x3d, r28	; 61
    474c:	09 94       	ijmp

0000474e <__epilogue_restores__>:
    474e:	2a 88       	ldd	r2, Y+18	; 0x12
    4750:	39 88       	ldd	r3, Y+17	; 0x11
    4752:	48 88       	ldd	r4, Y+16	; 0x10
    4754:	5f 84       	ldd	r5, Y+15	; 0x0f
    4756:	6e 84       	ldd	r6, Y+14	; 0x0e
    4758:	7d 84       	ldd	r7, Y+13	; 0x0d
    475a:	8c 84       	ldd	r8, Y+12	; 0x0c
    475c:	9b 84       	ldd	r9, Y+11	; 0x0b
    475e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4760:	b9 84       	ldd	r11, Y+9	; 0x09
    4762:	c8 84       	ldd	r12, Y+8	; 0x08
    4764:	df 80       	ldd	r13, Y+7	; 0x07
    4766:	ee 80       	ldd	r14, Y+6	; 0x06
    4768:	fd 80       	ldd	r15, Y+5	; 0x05
    476a:	0c 81       	ldd	r16, Y+4	; 0x04
    476c:	1b 81       	ldd	r17, Y+3	; 0x03
    476e:	aa 81       	ldd	r26, Y+2	; 0x02
    4770:	b9 81       	ldd	r27, Y+1	; 0x01
    4772:	ce 0f       	add	r28, r30
    4774:	d1 1d       	adc	r29, r1
    4776:	0f b6       	in	r0, 0x3f	; 63
    4778:	f8 94       	cli
    477a:	de bf       	out	0x3e, r29	; 62
    477c:	0f be       	out	0x3f, r0	; 63
    477e:	cd bf       	out	0x3d, r28	; 61
    4780:	ed 01       	movw	r28, r26
    4782:	08 95       	ret

00004784 <_exit>:
    4784:	f8 94       	cli

00004786 <__stop_program>:
    4786:	ff cf       	rjmp	.-2      	; 0x4786 <__stop_program>
