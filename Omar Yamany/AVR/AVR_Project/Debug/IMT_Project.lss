
IMT_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000036da  0000374e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000034d4  00000000  00000000  00003770  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000175a  00000000  00000000  00006c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000839e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000084de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000864e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000a297  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000b182  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000bf30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000c31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000caeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <main>
      7a:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GIE_vEnableInterrupts>:
/*************************************************************************/

#include "GIE_interface.h"

// This function is responsible for enabling GIE for interrupts
void GIE_vEnableInterrupts(){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, 7);
     b3e:	af e5       	ldi	r26, 0x5F	; 95
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	ef e5       	ldi	r30, 0x5F	; 95
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 68       	ori	r24, 0x80	; 128
     b4a:	8c 93       	st	X, r24
}
     b4c:	cf 91       	pop	r28
     b4e:	df 91       	pop	r29
     b50:	08 95       	ret

00000b52 <GIE_vDisableInterrupts>:

// This function is responsible for disabling GIE for interrupts
void GIE_vDisableInterrupts(){
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, 7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	8f 77       	andi	r24, 0x7F	; 127
     b66:	8c 93       	st	X, r24
}
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <EXTI_vInit>:
/*************************************************************************/

#include "EXTI_interface.h"

// This function shall be responsible for initializing external interrupts
void EXTI_vInit(void){
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
/********************* SELECTING ACTIVATION SENSOR FOR EXTI0 *********************/
#if EXTI_INTERRUPT == EXTI0_PIN
#if EXTI_ACTIVATION_SENSE == EXTI0_LOW_ACTIVATION
	MCUCR_REG &= EXTI0_RESET_ACTIVATION;
     b76:	a5 e5       	ldi	r26, 0x55	; 85
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e5 e5       	ldi	r30, 0x55	; 85
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8c 7f       	andi	r24, 0xFC	; 252
     b82:	8c 93       	st	X, r24
	MCUCR_REG |= EXTI0_LOW_ACTIVATION;
     b84:	a5 e5       	ldi	r26, 0x55	; 85
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e5 e5       	ldi	r30, 0x55	; 85
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8c 93       	st	X, r24
	SET_BIT(GICR_REG, EXTI0_PIN);
     b90:	ab e5       	ldi	r26, 0x5B	; 91
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	eb e5       	ldi	r30, 0x5B	; 91
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	80 64       	ori	r24, 0x40	; 64
     b9c:	8c 93       	st	X, r24
	MCUCSR_REG &= EXTI2_RESET_ACTIVATION;
#elif EXTI_ACTIVATION_SENSE == EXTI2_RISING_ACTIVATION
	MCUCSR_REG |= EXTI2_RISING_ACTIVATION;
#endif
#endif
}
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <EXTI_vDisableInterrupt>:

// This function shall be responsible for disabling external interrupts
void EXTI_vDisableInterrupt(void){
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62

}
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <EXTI_vsEnablePin>:

// This function shall be responsible for enabling any interrupt pin with any activation sensing
void EXTI_vsEnablePin(u8 Copy_u8PinName){
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	0f 92       	push	r0
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PinName)
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	88 2f       	mov	r24, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	00 97       	sbiw	r24, 0x00	; 0
     bc6:	71 f4       	brne	.+28     	; 0xbe4 <EXTI_vsEnablePin+0x32>
		CLR_BIT(MCUCR_REG, 1);
#elif ActivationSense == FALLING_ACTIVATION
		CLR_BIT(MCUCR_REG, 0);
		SET_BIT(MCUCR_REG, 1);
#elif ActivationSense == RISING_ACTIVATION
		SET_BIT(MCUCR_REG, 0);
     bc8:	a5 e5       	ldi	r26, 0x55	; 85
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e5 e5       	ldi	r30, 0x55	; 85
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	81 60       	ori	r24, 0x01	; 1
     bd4:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG, 1);
     bd6:	a5 e5       	ldi	r26, 0x55	; 85
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e5 e5       	ldi	r30, 0x55	; 85
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	82 60       	ori	r24, 0x02	; 2
     be2:	8c 93       	st	X, r24
		break;
	case INT2_PIN:

		break;
	}
}
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <EXTI_vEnablePin>:


void EXTI_vEnablePin(u8 Copy_u8PinName){
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <EXTI_vEnablePin+0x6>
     bf2:	0f 92       	push	r0
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PinName)
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	3b 83       	std	Y+3, r19	; 0x03
     c02:	2a 83       	std	Y+2, r18	; 0x02
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	9b 81       	ldd	r25, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	91 05       	cpc	r25, r1
     c0c:	f9 f0       	breq	.+62     	; 0xc4c <EXTI_vEnablePin+0x60>
     c0e:	2a 81       	ldd	r18, Y+2	; 0x02
     c10:	3b 81       	ldd	r19, Y+3	; 0x03
     c12:	22 30       	cpi	r18, 0x02	; 2
     c14:	31 05       	cpc	r19, r1
     c16:	81 f1       	breq	.+96     	; 0xc78 <EXTI_vEnablePin+0x8c>
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	9b 81       	ldd	r25, Y+3	; 0x03
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	d1 f5       	brne	.+116    	; 0xc94 <EXTI_vEnablePin+0xa8>
#elif ActivationSense == LOGICAL_CHANGE_ACTIVATION
		SET_BIT(MCUCR_REG, 0); CLR_BIT(MCUCR_REG, 1); SET_BIT(GICR_REG, EXTI0_PIN);
#elif ActivationSense == FALLING_ACTIVATION
		CLR_BIT(MCUCR_REG, 0); SET_BIT(MCUCR_REG, 1); SET_BIT(GICR_REG, EXTI0_PIN);
#elif ActivationSense == RISING_ACTIVATION
		SET_BIT(MCUCR_REG, 0); SET_BIT(MCUCR_REG, 1); SET_BIT(GICR_REG, EXTI0_PIN);
     c20:	a5 e5       	ldi	r26, 0x55	; 85
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e5 e5       	ldi	r30, 0x55	; 85
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	81 60       	ori	r24, 0x01	; 1
     c2c:	8c 93       	st	X, r24
     c2e:	a5 e5       	ldi	r26, 0x55	; 85
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e5 e5       	ldi	r30, 0x55	; 85
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	82 60       	ori	r24, 0x02	; 2
     c3a:	8c 93       	st	X, r24
     c3c:	ab e5       	ldi	r26, 0x5B	; 91
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	eb e5       	ldi	r30, 0x5B	; 91
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	80 64       	ori	r24, 0x40	; 64
     c48:	8c 93       	st	X, r24
     c4a:	24 c0       	rjmp	.+72     	; 0xc94 <EXTI_vEnablePin+0xa8>
#elif ActivationSense == LOGICAL_CHANGE_ACTIVATION
		SET_BIT(MCUCR_REG, 2); CLR_BIT(MCUCR_REG, 3); SET_BIT(GICR_REG, EXTI1_PIN);
#elif ActivationSense == FALLING_ACTIVATION
		CLR_BIT(MCUCR_REG, 2); SET_BIT(MCUCR_REG, 3); SET_BIT(GICR_REG, EXTI1_PIN);
#elif ActivationSense == RISING_ACTIVATION
		SET_BIT(MCUCR_REG, 2); SET_BIT(MCUCR_REG, 3); SET_BIT(GICR_REG, EXTI1_PIN);
     c4c:	a5 e5       	ldi	r26, 0x55	; 85
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e5 e5       	ldi	r30, 0x55	; 85
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	84 60       	ori	r24, 0x04	; 4
     c58:	8c 93       	st	X, r24
     c5a:	a5 e5       	ldi	r26, 0x55	; 85
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e5 e5       	ldi	r30, 0x55	; 85
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	88 60       	ori	r24, 0x08	; 8
     c66:	8c 93       	st	X, r24
     c68:	ab e5       	ldi	r26, 0x5B	; 91
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	eb e5       	ldi	r30, 0x5B	; 91
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	80 68       	ori	r24, 0x80	; 128
     c74:	8c 93       	st	X, r24
     c76:	0e c0       	rjmp	.+28     	; 0xc94 <EXTI_vEnablePin+0xa8>

	case INT2_PIN:
#if ActivationSense == FALLING_ACTIVATION
		CLR_BIT(MCUCSR_REG, 6); SET_BIT(GICR_REG, EXTI2_PIN);
#elif ActivationSense == RISING_ACTIVATION
		SET_BIT(MCUCSR_REG, 6); SET_BIT(GICR_REG,EXTI2_PIN);
     c78:	a4 e5       	ldi	r26, 0x54	; 84
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e4 e5       	ldi	r30, 0x54	; 84
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	80 64       	ori	r24, 0x40	; 64
     c84:	8c 93       	st	X, r24
     c86:	ab e5       	ldi	r26, 0x5B	; 91
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	eb e5       	ldi	r30, 0x5B	; 91
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	80 62       	ori	r24, 0x20	; 32
     c92:	8c 93       	st	X, r24
#endif
		break;
	}
}
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <DIO_vSetPinDir>:

#include "DIO_interface.h"


//sets data direction of 1 pin in a port
void DIO_vSetPinDir(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinDir){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	27 97       	sbiw	r28, 0x07	; 7
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	89 83       	std	Y+1, r24	; 0x01
     cb6:	6a 83       	std	Y+2, r22	; 0x02
     cb8:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir == OUTPUT)
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <DIO_vSetPinDir+0x22>
     cc0:	6f c0       	rjmp	.+222    	; 0xda0 <DIO_vSetPinDir+0x100>
	{
		switch(Copy_u8PortName)
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3f 83       	std	Y+7, r19	; 0x07
     cca:	2e 83       	std	Y+6, r18	; 0x06
     ccc:	8e 81       	ldd	r24, Y+6	; 0x06
     cce:	9f 81       	ldd	r25, Y+7	; 0x07
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	91 05       	cpc	r25, r1
     cd4:	49 f1       	breq	.+82     	; 0xd28 <DIO_vSetPinDir+0x88>
     cd6:	2e 81       	ldd	r18, Y+6	; 0x06
     cd8:	3f 81       	ldd	r19, Y+7	; 0x07
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	2c f4       	brge	.+10     	; 0xcea <DIO_vSetPinDir+0x4a>
     ce0:	8e 81       	ldd	r24, Y+6	; 0x06
     ce2:	9f 81       	ldd	r25, Y+7	; 0x07
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	61 f0       	breq	.+24     	; 0xd00 <DIO_vSetPinDir+0x60>
     ce8:	d2 c0       	rjmp	.+420    	; 0xe8e <DIO_vSetPinDir+0x1ee>
     cea:	2e 81       	ldd	r18, Y+6	; 0x06
     cec:	3f 81       	ldd	r19, Y+7	; 0x07
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	31 05       	cpc	r19, r1
     cf2:	71 f1       	breq	.+92     	; 0xd50 <DIO_vSetPinDir+0xb0>
     cf4:	8e 81       	ldd	r24, Y+6	; 0x06
     cf6:	9f 81       	ldd	r25, Y+7	; 0x07
     cf8:	83 30       	cpi	r24, 0x03	; 3
     cfa:	91 05       	cpc	r25, r1
     cfc:	e9 f1       	breq	.+122    	; 0xd78 <DIO_vSetPinDir+0xd8>
     cfe:	c7 c0       	rjmp	.+398    	; 0xe8e <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: SET_BIT(DDRA_REG, Copy_u8PinNum); break;
     d00:	aa e3       	ldi	r26, 0x3A	; 58
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ea e3       	ldi	r30, 0x3A	; 58
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_vSetPinDir+0x7e>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_vSetPinDir+0x7a>
     d22:	84 2b       	or	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	b3 c0       	rjmp	.+358    	; 0xe8e <DIO_vSetPinDir+0x1ee>
		case PORTB: SET_BIT(DDRB_REG, Copy_u8PinNum); break;
     d28:	a7 e3       	ldi	r26, 0x37	; 55
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e7 e3       	ldi	r30, 0x37	; 55
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_vSetPinDir+0xa6>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_vSetPinDir+0xa2>
     d4a:	84 2b       	or	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	9f c0       	rjmp	.+318    	; 0xe8e <DIO_vSetPinDir+0x1ee>
		case PORTC: SET_BIT(DDRC_REG, Copy_u8PinNum); break;
     d50:	a4 e3       	ldi	r26, 0x34	; 52
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e4 e3       	ldi	r30, 0x34	; 52
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	48 2f       	mov	r20, r24
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	02 2e       	mov	r0, r18
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <DIO_vSetPinDir+0xce>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <DIO_vSetPinDir+0xca>
     d72:	84 2b       	or	r24, r20
     d74:	8c 93       	st	X, r24
     d76:	8b c0       	rjmp	.+278    	; 0xe8e <DIO_vSetPinDir+0x1ee>
		case PORTD: SET_BIT(DDRD_REG, Copy_u8PinNum); break;
     d78:	a1 e3       	ldi	r26, 0x31	; 49
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e1 e3       	ldi	r30, 0x31	; 49
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_vSetPinDir+0xf6>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_vSetPinDir+0xf2>
     d9a:	84 2b       	or	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	77 c0       	rjmp	.+238    	; 0xe8e <DIO_vSetPinDir+0x1ee>
		}
	}
	else if(Copy_u8PinDir == INPUT)
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	88 23       	and	r24, r24
     da4:	09 f0       	breq	.+2      	; 0xda8 <DIO_vSetPinDir+0x108>
     da6:	73 c0       	rjmp	.+230    	; 0xe8e <DIO_vSetPinDir+0x1ee>
	{
		switch(Copy_u8PortName)
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	3d 83       	std	Y+5, r19	; 0x05
     db0:	2c 83       	std	Y+4, r18	; 0x04
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	9d 81       	ldd	r25, Y+5	; 0x05
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	91 05       	cpc	r25, r1
     dba:	59 f1       	breq	.+86     	; 0xe12 <DIO_vSetPinDir+0x172>
     dbc:	2c 81       	ldd	r18, Y+4	; 0x04
     dbe:	3d 81       	ldd	r19, Y+5	; 0x05
     dc0:	22 30       	cpi	r18, 0x02	; 2
     dc2:	31 05       	cpc	r19, r1
     dc4:	2c f4       	brge	.+10     	; 0xdd0 <DIO_vSetPinDir+0x130>
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	69 f0       	breq	.+26     	; 0xde8 <DIO_vSetPinDir+0x148>
     dce:	5f c0       	rjmp	.+190    	; 0xe8e <DIO_vSetPinDir+0x1ee>
     dd0:	2c 81       	ldd	r18, Y+4	; 0x04
     dd2:	3d 81       	ldd	r19, Y+5	; 0x05
     dd4:	22 30       	cpi	r18, 0x02	; 2
     dd6:	31 05       	cpc	r19, r1
     dd8:	89 f1       	breq	.+98     	; 0xe3c <DIO_vSetPinDir+0x19c>
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	9d 81       	ldd	r25, Y+5	; 0x05
     dde:	83 30       	cpi	r24, 0x03	; 3
     de0:	91 05       	cpc	r25, r1
     de2:	09 f4       	brne	.+2      	; 0xde6 <DIO_vSetPinDir+0x146>
     de4:	40 c0       	rjmp	.+128    	; 0xe66 <DIO_vSetPinDir+0x1c6>
     de6:	53 c0       	rjmp	.+166    	; 0xe8e <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: CLR_BIT(DDRA_REG, Copy_u8PinNum); break;
     de8:	aa e3       	ldi	r26, 0x3A	; 58
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	ea e3       	ldi	r30, 0x3A	; 58
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_vSetPinDir+0x166>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_vSetPinDir+0x162>
     e0a:	80 95       	com	r24
     e0c:	84 23       	and	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	3e c0       	rjmp	.+124    	; 0xe8e <DIO_vSetPinDir+0x1ee>
		case PORTB: CLR_BIT(DDRB_REG, Copy_u8PinNum); break;
     e12:	a7 e3       	ldi	r26, 0x37	; 55
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e7 e3       	ldi	r30, 0x37	; 55
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_vSetPinDir+0x190>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_vSetPinDir+0x18c>
     e34:	80 95       	com	r24
     e36:	84 23       	and	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	29 c0       	rjmp	.+82     	; 0xe8e <DIO_vSetPinDir+0x1ee>
		case PORTC: CLR_BIT(DDRC_REG, Copy_u8PinNum); break;
     e3c:	a4 e3       	ldi	r26, 0x34	; 52
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e4 e3       	ldi	r30, 0x34	; 52
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_vSetPinDir+0x1ba>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_vSetPinDir+0x1b6>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
     e64:	14 c0       	rjmp	.+40     	; 0xe8e <DIO_vSetPinDir+0x1ee>
		case PORTD: CLR_BIT(DDRD_REG, Copy_u8PinNum); break;
     e66:	a1 e3       	ldi	r26, 0x31	; 49
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e1 e3       	ldi	r30, 0x31	; 49
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_vSetPinDir+0x1e4>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_vSetPinDir+0x1e0>
     e88:	80 95       	com	r24
     e8a:	84 23       	and	r24, r20
     e8c:	8c 93       	st	X, r24
		}
	}
}
     e8e:	27 96       	adiw	r28, 0x07	; 7
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <DIO_vSetPinValue>:

//sets value of 1 pin in a port
void DIO_vSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinVal){
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	27 97       	sbiw	r28, 0x07	; 7
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	6a 83       	std	Y+2, r22	; 0x02
     eb8:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinVal == HIGH)
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	09 f0       	breq	.+2      	; 0xec2 <DIO_vSetPinValue+0x22>
     ec0:	6f c0       	rjmp	.+222    	; 0xfa0 <DIO_vSetPinValue+0x100>
	{
		switch(Copy_u8PortName)
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	3f 83       	std	Y+7, r19	; 0x07
     eca:	2e 83       	std	Y+6, r18	; 0x06
     ecc:	8e 81       	ldd	r24, Y+6	; 0x06
     ece:	9f 81       	ldd	r25, Y+7	; 0x07
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 05       	cpc	r25, r1
     ed4:	49 f1       	breq	.+82     	; 0xf28 <DIO_vSetPinValue+0x88>
     ed6:	2e 81       	ldd	r18, Y+6	; 0x06
     ed8:	3f 81       	ldd	r19, Y+7	; 0x07
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	2c f4       	brge	.+10     	; 0xeea <DIO_vSetPinValue+0x4a>
     ee0:	8e 81       	ldd	r24, Y+6	; 0x06
     ee2:	9f 81       	ldd	r25, Y+7	; 0x07
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	61 f0       	breq	.+24     	; 0xf00 <DIO_vSetPinValue+0x60>
     ee8:	d2 c0       	rjmp	.+420    	; 0x108e <DIO_vSetPinValue+0x1ee>
     eea:	2e 81       	ldd	r18, Y+6	; 0x06
     eec:	3f 81       	ldd	r19, Y+7	; 0x07
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	71 f1       	breq	.+92     	; 0xf50 <DIO_vSetPinValue+0xb0>
     ef4:	8e 81       	ldd	r24, Y+6	; 0x06
     ef6:	9f 81       	ldd	r25, Y+7	; 0x07
     ef8:	83 30       	cpi	r24, 0x03	; 3
     efa:	91 05       	cpc	r25, r1
     efc:	e9 f1       	breq	.+122    	; 0xf78 <DIO_vSetPinValue+0xd8>
     efe:	c7 c0       	rjmp	.+398    	; 0x108e <DIO_vSetPinValue+0x1ee>
		{
		case PORTA: SET_BIT(PORTA_REG, Copy_u8PinNum); break;
     f00:	ab e3       	ldi	r26, 0x3B	; 59
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	eb e3       	ldi	r30, 0x3B	; 59
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_vSetPinValue+0x7e>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_vSetPinValue+0x7a>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	b3 c0       	rjmp	.+358    	; 0x108e <DIO_vSetPinValue+0x1ee>
		case PORTB: SET_BIT(PORTB_REG, Copy_u8PinNum); break;
     f28:	a8 e3       	ldi	r26, 0x38	; 56
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e8 e3       	ldi	r30, 0x38	; 56
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_vSetPinValue+0xa6>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_vSetPinValue+0xa2>
     f4a:	84 2b       	or	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	9f c0       	rjmp	.+318    	; 0x108e <DIO_vSetPinValue+0x1ee>
		case PORTC: SET_BIT(PORTC_REG, Copy_u8PinNum); break;
     f50:	a5 e3       	ldi	r26, 0x35	; 53
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e3       	ldi	r30, 0x35	; 53
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_vSetPinValue+0xce>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_vSetPinValue+0xca>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	8b c0       	rjmp	.+278    	; 0x108e <DIO_vSetPinValue+0x1ee>
		case PORTD: SET_BIT(PORTD_REG, Copy_u8PinNum); break;
     f78:	a2 e3       	ldi	r26, 0x32	; 50
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e2 e3       	ldi	r30, 0x32	; 50
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_vSetPinValue+0xf6>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_vSetPinValue+0xf2>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	77 c0       	rjmp	.+238    	; 0x108e <DIO_vSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinVal == LOW)
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	88 23       	and	r24, r24
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <DIO_vSetPinValue+0x108>
     fa6:	73 c0       	rjmp	.+230    	; 0x108e <DIO_vSetPinValue+0x1ee>
	{
		switch(Copy_u8PortName)
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	3d 83       	std	Y+5, r19	; 0x05
     fb0:	2c 83       	std	Y+4, r18	; 0x04
     fb2:	8c 81       	ldd	r24, Y+4	; 0x04
     fb4:	9d 81       	ldd	r25, Y+5	; 0x05
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	91 05       	cpc	r25, r1
     fba:	59 f1       	breq	.+86     	; 0x1012 <DIO_vSetPinValue+0x172>
     fbc:	2c 81       	ldd	r18, Y+4	; 0x04
     fbe:	3d 81       	ldd	r19, Y+5	; 0x05
     fc0:	22 30       	cpi	r18, 0x02	; 2
     fc2:	31 05       	cpc	r19, r1
     fc4:	2c f4       	brge	.+10     	; 0xfd0 <DIO_vSetPinValue+0x130>
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	9d 81       	ldd	r25, Y+5	; 0x05
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	69 f0       	breq	.+26     	; 0xfe8 <DIO_vSetPinValue+0x148>
     fce:	5f c0       	rjmp	.+190    	; 0x108e <DIO_vSetPinValue+0x1ee>
     fd0:	2c 81       	ldd	r18, Y+4	; 0x04
     fd2:	3d 81       	ldd	r19, Y+5	; 0x05
     fd4:	22 30       	cpi	r18, 0x02	; 2
     fd6:	31 05       	cpc	r19, r1
     fd8:	89 f1       	breq	.+98     	; 0x103c <DIO_vSetPinValue+0x19c>
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	9d 81       	ldd	r25, Y+5	; 0x05
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <DIO_vSetPinValue+0x146>
     fe4:	40 c0       	rjmp	.+128    	; 0x1066 <DIO_vSetPinValue+0x1c6>
     fe6:	53 c0       	rjmp	.+166    	; 0x108e <DIO_vSetPinValue+0x1ee>
		{
		case PORTA: CLR_BIT(PORTA_REG, Copy_u8PinNum); break;
     fe8:	ab e3       	ldi	r26, 0x3B	; 59
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	eb e3       	ldi	r30, 0x3B	; 59
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_vSetPinValue+0x166>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_vSetPinValue+0x162>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	3e c0       	rjmp	.+124    	; 0x108e <DIO_vSetPinValue+0x1ee>
		case PORTB: CLR_BIT(PORTB_REG, Copy_u8PinNum); break;
    1012:	a8 e3       	ldi	r26, 0x38	; 56
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e8 e3       	ldi	r30, 0x38	; 56
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_vSetPinValue+0x190>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_vSetPinValue+0x18c>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	29 c0       	rjmp	.+82     	; 0x108e <DIO_vSetPinValue+0x1ee>
		case PORTC: CLR_BIT(PORTC_REG, Copy_u8PinNum); break;
    103c:	a5 e3       	ldi	r26, 0x35	; 53
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e5 e3       	ldi	r30, 0x35	; 53
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_vSetPinValue+0x1ba>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_vSetPinValue+0x1b6>
    105e:	80 95       	com	r24
    1060:	84 23       	and	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	14 c0       	rjmp	.+40     	; 0x108e <DIO_vSetPinValue+0x1ee>
		case PORTD: CLR_BIT(PORTD_REG, Copy_u8PinNum); break;
    1066:	a2 e3       	ldi	r26, 0x32	; 50
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e2 e3       	ldi	r30, 0x32	; 50
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_vSetPinValue+0x1e4>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_vSetPinValue+0x1e0>
    1088:	80 95       	com	r24
    108a:	84 23       	and	r24, r20
    108c:	8c 93       	st	X, r24
		}
	}
}
    108e:	27 96       	adiw	r28, 0x07	; 7
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <DIO_u8ReadPinValue>:

//reads value on 1 pin in a port
u8 DIO_u8ReadPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum){
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <DIO_u8ReadPinValue+0x6>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <DIO_u8ReadPinValue+0x8>
    10a8:	0f 92       	push	r0
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReadValue = 0;
    10b2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	3d 83       	std	Y+5, r19	; 0x05
    10bc:	2c 83       	std	Y+4, r18	; 0x04
    10be:	4c 81       	ldd	r20, Y+4	; 0x04
    10c0:	5d 81       	ldd	r21, Y+5	; 0x05
    10c2:	41 30       	cpi	r20, 0x01	; 1
    10c4:	51 05       	cpc	r21, r1
    10c6:	41 f1       	breq	.+80     	; 0x1118 <DIO_u8ReadPinValue+0x78>
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	9d 81       	ldd	r25, Y+5	; 0x05
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	91 05       	cpc	r25, r1
    10d0:	34 f4       	brge	.+12     	; 0x10de <DIO_u8ReadPinValue+0x3e>
    10d2:	2c 81       	ldd	r18, Y+4	; 0x04
    10d4:	3d 81       	ldd	r19, Y+5	; 0x05
    10d6:	21 15       	cp	r18, r1
    10d8:	31 05       	cpc	r19, r1
    10da:	61 f0       	breq	.+24     	; 0x10f4 <DIO_u8ReadPinValue+0x54>
    10dc:	52 c0       	rjmp	.+164    	; 0x1182 <DIO_u8ReadPinValue+0xe2>
    10de:	4c 81       	ldd	r20, Y+4	; 0x04
    10e0:	5d 81       	ldd	r21, Y+5	; 0x05
    10e2:	42 30       	cpi	r20, 0x02	; 2
    10e4:	51 05       	cpc	r21, r1
    10e6:	51 f1       	breq	.+84     	; 0x113c <DIO_u8ReadPinValue+0x9c>
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	91 05       	cpc	r25, r1
    10f0:	b9 f1       	breq	.+110    	; 0x1160 <DIO_u8ReadPinValue+0xc0>
    10f2:	47 c0       	rjmp	.+142    	; 0x1182 <DIO_u8ReadPinValue+0xe2>
	{
	case PORTA: Local_u8ReadValue = GET_BIT(PINA_REG, Copy_u8PinNum); break;
    10f4:	e9 e3       	ldi	r30, 0x39	; 57
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a9 01       	movw	r20, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_u8ReadPinValue+0x6c>
    1108:	55 95       	asr	r21
    110a:	47 95       	ror	r20
    110c:	8a 95       	dec	r24
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_u8ReadPinValue+0x68>
    1110:	ca 01       	movw	r24, r20
    1112:	81 70       	andi	r24, 0x01	; 1
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	35 c0       	rjmp	.+106    	; 0x1182 <DIO_u8ReadPinValue+0xe2>
	case PORTB: Local_u8ReadValue = GET_BIT(PINB_REG, Copy_u8PinNum); break;
    1118:	e6 e3       	ldi	r30, 0x36	; 54
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_u8ReadPinValue+0x90>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_u8ReadPinValue+0x8c>
    1134:	ca 01       	movw	r24, r20
    1136:	81 70       	andi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	23 c0       	rjmp	.+70     	; 0x1182 <DIO_u8ReadPinValue+0xe2>
	case PORTC: Local_u8ReadValue = GET_BIT(PINC_REG, Copy_u8PinNum); break;
    113c:	e3 e3       	ldi	r30, 0x33	; 51
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a9 01       	movw	r20, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8ReadPinValue+0xb4>
    1150:	55 95       	asr	r21
    1152:	47 95       	ror	r20
    1154:	8a 95       	dec	r24
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_u8ReadPinValue+0xb0>
    1158:	ca 01       	movw	r24, r20
    115a:	81 70       	andi	r24, 0x01	; 1
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	11 c0       	rjmp	.+34     	; 0x1182 <DIO_u8ReadPinValue+0xe2>
	case PORTD: Local_u8ReadValue = GET_BIT(PIND_REG, Copy_u8PinNum); break;
    1160:	e0 e3       	ldi	r30, 0x30	; 48
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a9 01       	movw	r20, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_u8ReadPinValue+0xd8>
    1174:	55 95       	asr	r21
    1176:	47 95       	ror	r20
    1178:	8a 95       	dec	r24
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_u8ReadPinValue+0xd4>
    117c:	ca 01       	movw	r24, r20
    117e:	81 70       	andi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ReadValue;
    1182:	89 81       	ldd	r24, Y+1	; 0x01
}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <DIO_vSetGroupDir>:

//sets data direction of all 8 pins in a port
void DIO_vSetGroupDir(u8 Copy_u8PortName, u8 Copy_u8PortDir){
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <DIO_vSetGroupDir+0x6>
    119a:	00 d0       	rcall	.+0      	; 0x119c <DIO_vSetGroupDir+0x8>
    119c:	00 d0       	rcall	.+0      	; 0x119e <DIO_vSetGroupDir+0xa>
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortDir == OUTPUT)
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	99 f5       	brne	.+102    	; 0x1212 <DIO_vSetGroupDir+0x7e>
	{
		switch(Copy_u8PortName)
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3e 83       	std	Y+6, r19	; 0x06
    11b4:	2d 83       	std	Y+5, r18	; 0x05
    11b6:	8d 81       	ldd	r24, Y+5	; 0x05
    11b8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	91 05       	cpc	r25, r1
    11be:	d1 f0       	breq	.+52     	; 0x11f4 <DIO_vSetGroupDir+0x60>
    11c0:	2d 81       	ldd	r18, Y+5	; 0x05
    11c2:	3e 81       	ldd	r19, Y+6	; 0x06
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	31 05       	cpc	r19, r1
    11c8:	2c f4       	brge	.+10     	; 0x11d4 <DIO_vSetGroupDir+0x40>
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	61 f0       	breq	.+24     	; 0x11ea <DIO_vSetGroupDir+0x56>
    11d2:	50 c0       	rjmp	.+160    	; 0x1274 <DIO_vSetGroupDir+0xe0>
    11d4:	2d 81       	ldd	r18, Y+5	; 0x05
    11d6:	3e 81       	ldd	r19, Y+6	; 0x06
    11d8:	22 30       	cpi	r18, 0x02	; 2
    11da:	31 05       	cpc	r19, r1
    11dc:	81 f0       	breq	.+32     	; 0x11fe <DIO_vSetGroupDir+0x6a>
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	91 05       	cpc	r25, r1
    11e6:	81 f0       	breq	.+32     	; 0x1208 <DIO_vSetGroupDir+0x74>
    11e8:	45 c0       	rjmp	.+138    	; 0x1274 <DIO_vSetGroupDir+0xe0>
		{
		case PORTA: DDRA_REG = 0xFF; break;
    11ea:	ea e3       	ldi	r30, 0x3A	; 58
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	80 83       	st	Z, r24
    11f2:	40 c0       	rjmp	.+128    	; 0x1274 <DIO_vSetGroupDir+0xe0>
		case PORTB: DDRB_REG = 0xFF; break;
    11f4:	e7 e3       	ldi	r30, 0x37	; 55
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	80 83       	st	Z, r24
    11fc:	3b c0       	rjmp	.+118    	; 0x1274 <DIO_vSetGroupDir+0xe0>
		case PORTC: DDRC_REG = 0xFF; break;
    11fe:	e4 e3       	ldi	r30, 0x34	; 52
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	80 83       	st	Z, r24
    1206:	36 c0       	rjmp	.+108    	; 0x1274 <DIO_vSetGroupDir+0xe0>
		case PORTD: DDRD_REG = 0xFF; break;
    1208:	e1 e3       	ldi	r30, 0x31	; 49
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	80 83       	st	Z, r24
    1210:	31 c0       	rjmp	.+98     	; 0x1274 <DIO_vSetGroupDir+0xe0>
		}
	}
	else if(Copy_u8PortDir == INPUT)
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	88 23       	and	r24, r24
    1216:	71 f5       	brne	.+92     	; 0x1274 <DIO_vSetGroupDir+0xe0>
	{
		switch(Copy_u8PortName)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	3c 83       	std	Y+4, r19	; 0x04
    1220:	2b 83       	std	Y+3, r18	; 0x03
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 05       	cpc	r25, r1
    122a:	c9 f0       	breq	.+50     	; 0x125e <DIO_vSetGroupDir+0xca>
    122c:	2b 81       	ldd	r18, Y+3	; 0x03
    122e:	3c 81       	ldd	r19, Y+4	; 0x04
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	2c f4       	brge	.+10     	; 0x1240 <DIO_vSetGroupDir+0xac>
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	61 f0       	breq	.+24     	; 0x1256 <DIO_vSetGroupDir+0xc2>
    123e:	1a c0       	rjmp	.+52     	; 0x1274 <DIO_vSetGroupDir+0xe0>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	22 30       	cpi	r18, 0x02	; 2
    1246:	31 05       	cpc	r19, r1
    1248:	71 f0       	breq	.+28     	; 0x1266 <DIO_vSetGroupDir+0xd2>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	91 05       	cpc	r25, r1
    1252:	69 f0       	breq	.+26     	; 0x126e <DIO_vSetGroupDir+0xda>
    1254:	0f c0       	rjmp	.+30     	; 0x1274 <DIO_vSetGroupDir+0xe0>
		{
		case PORTA: DDRA_REG = 0x00; break;
    1256:	ea e3       	ldi	r30, 0x3A	; 58
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	10 82       	st	Z, r1
    125c:	0b c0       	rjmp	.+22     	; 0x1274 <DIO_vSetGroupDir+0xe0>
		case PORTB: DDRB_REG = 0x00; break;
    125e:	e7 e3       	ldi	r30, 0x37	; 55
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	10 82       	st	Z, r1
    1264:	07 c0       	rjmp	.+14     	; 0x1274 <DIO_vSetGroupDir+0xe0>
		case PORTC: DDRC_REG = 0x00; break;
    1266:	e4 e3       	ldi	r30, 0x34	; 52
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	10 82       	st	Z, r1
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <DIO_vSetGroupDir+0xe0>
		case PORTD: DDRD_REG = 0x00; break;
    126e:	e1 e3       	ldi	r30, 0x31	; 49
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	10 82       	st	Z, r1
		}
	}
}
    1274:	26 96       	adiw	r28, 0x06	; 6
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <DIO_vSetGroupValue>:

//sets value of all 8 pins in a port
void DIO_vSetGroupValue(u8 Copy_u8PortName, u8 Copy_u8PortValue){
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <DIO_vSetGroupValue+0x6>
    128c:	00 d0       	rcall	.+0      	; 0x128e <DIO_vSetGroupValue+0x8>
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	3c 83       	std	Y+4, r19	; 0x04
    129e:	2b 83       	std	Y+3, r18	; 0x03
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	91 05       	cpc	r25, r1
    12a8:	d1 f0       	breq	.+52     	; 0x12de <DIO_vSetGroupValue+0x58>
    12aa:	2b 81       	ldd	r18, Y+3	; 0x03
    12ac:	3c 81       	ldd	r19, Y+4	; 0x04
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	2c f4       	brge	.+10     	; 0x12be <DIO_vSetGroupValue+0x38>
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	61 f0       	breq	.+24     	; 0x12d4 <DIO_vSetGroupValue+0x4e>
    12bc:	1e c0       	rjmp	.+60     	; 0x12fa <DIO_vSetGroupValue+0x74>
    12be:	2b 81       	ldd	r18, Y+3	; 0x03
    12c0:	3c 81       	ldd	r19, Y+4	; 0x04
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	81 f0       	breq	.+32     	; 0x12e8 <DIO_vSetGroupValue+0x62>
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	83 30       	cpi	r24, 0x03	; 3
    12ce:	91 05       	cpc	r25, r1
    12d0:	81 f0       	breq	.+32     	; 0x12f2 <DIO_vSetGroupValue+0x6c>
    12d2:	13 c0       	rjmp	.+38     	; 0x12fa <DIO_vSetGroupValue+0x74>
	{
	case PORTA: PORTA_REG = Copy_u8PortValue; break;
    12d4:	eb e3       	ldi	r30, 0x3B	; 59
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	80 83       	st	Z, r24
    12dc:	0e c0       	rjmp	.+28     	; 0x12fa <DIO_vSetGroupValue+0x74>
	case PORTB: PORTB_REG = Copy_u8PortValue; break;
    12de:	e8 e3       	ldi	r30, 0x38	; 56
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	80 83       	st	Z, r24
    12e6:	09 c0       	rjmp	.+18     	; 0x12fa <DIO_vSetGroupValue+0x74>
	case PORTC: PORTC_REG = Copy_u8PortValue; break;
    12e8:	e5 e3       	ldi	r30, 0x35	; 53
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	80 83       	st	Z, r24
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <DIO_vSetGroupValue+0x74>
	case PORTD: PORTD_REG = Copy_u8PortValue; break;
    12f2:	e2 e3       	ldi	r30, 0x32	; 50
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	80 83       	st	Z, r24
	}
}
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <DIO_u8ReadGroupValue>:

//reads value on all 8 pins of a port
u8 DIO_u8ReadGroupValue(u8 Copy_u8PortName){
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <DIO_u8ReadGroupValue+0x6>
    130e:	00 d0       	rcall	.+0      	; 0x1310 <DIO_u8ReadGroupValue+0x8>
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReadValue = 0;
    1316:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3c 83       	std	Y+4, r19	; 0x04
    1320:	2b 83       	std	Y+3, r18	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	91 05       	cpc	r25, r1
    132a:	d1 f0       	breq	.+52     	; 0x1360 <DIO_u8ReadGroupValue+0x58>
    132c:	2b 81       	ldd	r18, Y+3	; 0x03
    132e:	3c 81       	ldd	r19, Y+4	; 0x04
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	2c f4       	brge	.+10     	; 0x1340 <DIO_u8ReadGroupValue+0x38>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	61 f0       	breq	.+24     	; 0x1356 <DIO_u8ReadGroupValue+0x4e>
    133e:	1e c0       	rjmp	.+60     	; 0x137c <DIO_u8ReadGroupValue+0x74>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <DIO_u8ReadGroupValue+0x62>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	81 f0       	breq	.+32     	; 0x1374 <DIO_u8ReadGroupValue+0x6c>
    1354:	13 c0       	rjmp	.+38     	; 0x137c <DIO_u8ReadGroupValue+0x74>
	{
	case PORTA: Local_u8ReadValue = PINA_REG; break;
    1356:	e9 e3       	ldi	r30, 0x39	; 57
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	0e c0       	rjmp	.+28     	; 0x137c <DIO_u8ReadGroupValue+0x74>
	case PORTB: Local_u8ReadValue = PINB_REG; break;
    1360:	e6 e3       	ldi	r30, 0x36	; 54
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	09 c0       	rjmp	.+18     	; 0x137c <DIO_u8ReadGroupValue+0x74>
	case PORTC: Local_u8ReadValue = PINC_REG; break;
    136a:	e3 e3       	ldi	r30, 0x33	; 51
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	04 c0       	rjmp	.+8      	; 0x137c <DIO_u8ReadGroupValue+0x74>
	case PORTD: Local_u8ReadValue = PIND_REG; break;
    1374:	e0 e3       	ldi	r30, 0x30	; 48
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ReadValue;
    137c:	89 81       	ldd	r24, Y+1	; 0x01
}
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <DIO_vSet4LSBDir>:

//sets data direction of 4 LSB pins of a port
void DIO_vSet4LSBDir(u8 Copy_u8PortName, u8 Copy_u8PinDir){
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <DIO_vSet4LSBDir+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <DIO_vSet4LSBDir+0x8>
    1394:	00 d0       	rcall	.+0      	; 0x1396 <DIO_vSet4LSBDir+0xa>
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinDir == OUTPUT)
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <DIO_vSet4LSBDir+0x1a>
    13a4:	3f c0       	rjmp	.+126    	; 0x1424 <DIO_vSet4LSBDir+0x98>
	{
		switch(Copy_u8PortName)
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3e 83       	std	Y+6, r19	; 0x06
    13ae:	2d 83       	std	Y+5, r18	; 0x05
    13b0:	8d 81       	ldd	r24, Y+5	; 0x05
    13b2:	9e 81       	ldd	r25, Y+6	; 0x06
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	e9 f0       	breq	.+58     	; 0x13f4 <DIO_vSet4LSBDir+0x68>
    13ba:	2d 81       	ldd	r18, Y+5	; 0x05
    13bc:	3e 81       	ldd	r19, Y+6	; 0x06
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	2c f4       	brge	.+10     	; 0x13ce <DIO_vSet4LSBDir+0x42>
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	61 f0       	breq	.+24     	; 0x13e4 <DIO_vSet4LSBDir+0x58>
    13cc:	6d c0       	rjmp	.+218    	; 0x14a8 <DIO_vSet4LSBDir+0x11c>
    13ce:	2d 81       	ldd	r18, Y+5	; 0x05
    13d0:	3e 81       	ldd	r19, Y+6	; 0x06
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	b1 f0       	breq	.+44     	; 0x1404 <DIO_vSet4LSBDir+0x78>
    13d8:	8d 81       	ldd	r24, Y+5	; 0x05
    13da:	9e 81       	ldd	r25, Y+6	; 0x06
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	c9 f0       	breq	.+50     	; 0x1414 <DIO_vSet4LSBDir+0x88>
    13e2:	62 c0       	rjmp	.+196    	; 0x14a8 <DIO_vSet4LSBDir+0x11c>
		{
		case PORTA: DDRA_REG |= 0x0F; break;
    13e4:	aa e3       	ldi	r26, 0x3A	; 58
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ea e3       	ldi	r30, 0x3A	; 58
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8f 60       	ori	r24, 0x0F	; 15
    13f0:	8c 93       	st	X, r24
    13f2:	5a c0       	rjmp	.+180    	; 0x14a8 <DIO_vSet4LSBDir+0x11c>
		case PORTB: DDRB_REG |= 0x0F; break;
    13f4:	a7 e3       	ldi	r26, 0x37	; 55
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e7 e3       	ldi	r30, 0x37	; 55
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	8f 60       	ori	r24, 0x0F	; 15
    1400:	8c 93       	st	X, r24
    1402:	52 c0       	rjmp	.+164    	; 0x14a8 <DIO_vSet4LSBDir+0x11c>
		case PORTC: DDRC_REG |= 0x0F; break;
    1404:	a4 e3       	ldi	r26, 0x34	; 52
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e4 e3       	ldi	r30, 0x34	; 52
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	8f 60       	ori	r24, 0x0F	; 15
    1410:	8c 93       	st	X, r24
    1412:	4a c0       	rjmp	.+148    	; 0x14a8 <DIO_vSet4LSBDir+0x11c>
		case PORTD: DDRD_REG |= 0x0F; break;
    1414:	a1 e3       	ldi	r26, 0x31	; 49
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e1 e3       	ldi	r30, 0x31	; 49
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	8f 60       	ori	r24, 0x0F	; 15
    1420:	8c 93       	st	X, r24
    1422:	42 c0       	rjmp	.+132    	; 0x14a8 <DIO_vSet4LSBDir+0x11c>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	88 23       	and	r24, r24
    1428:	09 f0       	breq	.+2      	; 0x142c <DIO_vSet4LSBDir+0xa0>
    142a:	3e c0       	rjmp	.+124    	; 0x14a8 <DIO_vSet4LSBDir+0x11c>
	{
		switch(Copy_u8PortName)
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	3c 83       	std	Y+4, r19	; 0x04
    1434:	2b 83       	std	Y+3, r18	; 0x03
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	91 05       	cpc	r25, r1
    143e:	e9 f0       	breq	.+58     	; 0x147a <DIO_vSet4LSBDir+0xee>
    1440:	2b 81       	ldd	r18, Y+3	; 0x03
    1442:	3c 81       	ldd	r19, Y+4	; 0x04
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	31 05       	cpc	r19, r1
    1448:	2c f4       	brge	.+10     	; 0x1454 <DIO_vSet4LSBDir+0xc8>
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	61 f0       	breq	.+24     	; 0x146a <DIO_vSet4LSBDir+0xde>
    1452:	2a c0       	rjmp	.+84     	; 0x14a8 <DIO_vSet4LSBDir+0x11c>
    1454:	2b 81       	ldd	r18, Y+3	; 0x03
    1456:	3c 81       	ldd	r19, Y+4	; 0x04
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	b1 f0       	breq	.+44     	; 0x148a <DIO_vSet4LSBDir+0xfe>
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	91 05       	cpc	r25, r1
    1466:	c9 f0       	breq	.+50     	; 0x149a <DIO_vSet4LSBDir+0x10e>
    1468:	1f c0       	rjmp	.+62     	; 0x14a8 <DIO_vSet4LSBDir+0x11c>
		{
		case PORTA: DDRA_REG &= 0xF0; break;
    146a:	aa e3       	ldi	r26, 0x3A	; 58
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	ea e3       	ldi	r30, 0x3A	; 58
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 7f       	andi	r24, 0xF0	; 240
    1476:	8c 93       	st	X, r24
    1478:	17 c0       	rjmp	.+46     	; 0x14a8 <DIO_vSet4LSBDir+0x11c>
		case PORTB: DDRB_REG &= 0xF0; break;
    147a:	a7 e3       	ldi	r26, 0x37	; 55
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e7 e3       	ldi	r30, 0x37	; 55
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	80 7f       	andi	r24, 0xF0	; 240
    1486:	8c 93       	st	X, r24
    1488:	0f c0       	rjmp	.+30     	; 0x14a8 <DIO_vSet4LSBDir+0x11c>
		case PORTC: DDRC_REG &= 0xF0; break;
    148a:	a4 e3       	ldi	r26, 0x34	; 52
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e4 e3       	ldi	r30, 0x34	; 52
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	80 7f       	andi	r24, 0xF0	; 240
    1496:	8c 93       	st	X, r24
    1498:	07 c0       	rjmp	.+14     	; 0x14a8 <DIO_vSet4LSBDir+0x11c>
		case PORTD: DDRD_REG &= 0xF0; break;
    149a:	a1 e3       	ldi	r26, 0x31	; 49
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e1 e3       	ldi	r30, 0x31	; 49
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	80 7f       	andi	r24, 0xF0	; 240
    14a6:	8c 93       	st	X, r24
		}
	}
}
    14a8:	26 96       	adiw	r28, 0x06	; 6
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <DIO_vSet4MSBDir>:

//sets data direction of 4 MSB pins of a port
void DIO_vSet4MSBDir(u8 Copy_u8PortName, u8 Copy_u8PinDir){
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_vSet4MSBDir+0x6>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DIO_vSet4MSBDir+0x8>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <DIO_vSet4MSBDir+0xa>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinDir == OUTPUT)
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <DIO_vSet4MSBDir+0x1a>
    14d2:	3f c0       	rjmp	.+126    	; 0x1552 <DIO_vSet4MSBDir+0x98>
	{
		switch(Copy_u8PortName)
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	3e 83       	std	Y+6, r19	; 0x06
    14dc:	2d 83       	std	Y+5, r18	; 0x05
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	91 05       	cpc	r25, r1
    14e6:	e9 f0       	breq	.+58     	; 0x1522 <DIO_vSet4MSBDir+0x68>
    14e8:	2d 81       	ldd	r18, Y+5	; 0x05
    14ea:	3e 81       	ldd	r19, Y+6	; 0x06
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	2c f4       	brge	.+10     	; 0x14fc <DIO_vSet4MSBDir+0x42>
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	61 f0       	breq	.+24     	; 0x1512 <DIO_vSet4MSBDir+0x58>
    14fa:	6d c0       	rjmp	.+218    	; 0x15d6 <DIO_vSet4MSBDir+0x11c>
    14fc:	2d 81       	ldd	r18, Y+5	; 0x05
    14fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	b1 f0       	breq	.+44     	; 0x1532 <DIO_vSet4MSBDir+0x78>
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	83 30       	cpi	r24, 0x03	; 3
    150c:	91 05       	cpc	r25, r1
    150e:	c9 f0       	breq	.+50     	; 0x1542 <DIO_vSet4MSBDir+0x88>
    1510:	62 c0       	rjmp	.+196    	; 0x15d6 <DIO_vSet4MSBDir+0x11c>
		{
		case PORTA: DDRA_REG |= 0xF0; break;
    1512:	aa e3       	ldi	r26, 0x3A	; 58
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ea e3       	ldi	r30, 0x3A	; 58
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	80 6f       	ori	r24, 0xF0	; 240
    151e:	8c 93       	st	X, r24
    1520:	5a c0       	rjmp	.+180    	; 0x15d6 <DIO_vSet4MSBDir+0x11c>
		case PORTB: DDRB_REG |= 0xF0; break;
    1522:	a7 e3       	ldi	r26, 0x37	; 55
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e7 e3       	ldi	r30, 0x37	; 55
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	80 6f       	ori	r24, 0xF0	; 240
    152e:	8c 93       	st	X, r24
    1530:	52 c0       	rjmp	.+164    	; 0x15d6 <DIO_vSet4MSBDir+0x11c>
		case PORTC: DDRC_REG |= 0xF0; break;
    1532:	a4 e3       	ldi	r26, 0x34	; 52
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e4 e3       	ldi	r30, 0x34	; 52
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	80 6f       	ori	r24, 0xF0	; 240
    153e:	8c 93       	st	X, r24
    1540:	4a c0       	rjmp	.+148    	; 0x15d6 <DIO_vSet4MSBDir+0x11c>
		case PORTD: DDRD_REG |= 0xF0; break;
    1542:	a1 e3       	ldi	r26, 0x31	; 49
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e1 e3       	ldi	r30, 0x31	; 49
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	80 6f       	ori	r24, 0xF0	; 240
    154e:	8c 93       	st	X, r24
    1550:	42 c0       	rjmp	.+132    	; 0x15d6 <DIO_vSet4MSBDir+0x11c>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	88 23       	and	r24, r24
    1556:	09 f0       	breq	.+2      	; 0x155a <DIO_vSet4MSBDir+0xa0>
    1558:	3e c0       	rjmp	.+124    	; 0x15d6 <DIO_vSet4MSBDir+0x11c>
	{
		switch(Copy_u8PortName)
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	3c 83       	std	Y+4, r19	; 0x04
    1562:	2b 83       	std	Y+3, r18	; 0x03
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	91 05       	cpc	r25, r1
    156c:	e9 f0       	breq	.+58     	; 0x15a8 <DIO_vSet4MSBDir+0xee>
    156e:	2b 81       	ldd	r18, Y+3	; 0x03
    1570:	3c 81       	ldd	r19, Y+4	; 0x04
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	2c f4       	brge	.+10     	; 0x1582 <DIO_vSet4MSBDir+0xc8>
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	61 f0       	breq	.+24     	; 0x1598 <DIO_vSet4MSBDir+0xde>
    1580:	2a c0       	rjmp	.+84     	; 0x15d6 <DIO_vSet4MSBDir+0x11c>
    1582:	2b 81       	ldd	r18, Y+3	; 0x03
    1584:	3c 81       	ldd	r19, Y+4	; 0x04
    1586:	22 30       	cpi	r18, 0x02	; 2
    1588:	31 05       	cpc	r19, r1
    158a:	b1 f0       	breq	.+44     	; 0x15b8 <DIO_vSet4MSBDir+0xfe>
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	83 30       	cpi	r24, 0x03	; 3
    1592:	91 05       	cpc	r25, r1
    1594:	c9 f0       	breq	.+50     	; 0x15c8 <DIO_vSet4MSBDir+0x10e>
    1596:	1f c0       	rjmp	.+62     	; 0x15d6 <DIO_vSet4MSBDir+0x11c>
		{
		case PORTA: DDRA_REG &= 0x0F; break;
    1598:	aa e3       	ldi	r26, 0x3A	; 58
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	ea e3       	ldi	r30, 0x3A	; 58
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	8f 70       	andi	r24, 0x0F	; 15
    15a4:	8c 93       	st	X, r24
    15a6:	17 c0       	rjmp	.+46     	; 0x15d6 <DIO_vSet4MSBDir+0x11c>
		case PORTB: DDRB_REG &= 0x0F; break;
    15a8:	a7 e3       	ldi	r26, 0x37	; 55
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e7 e3       	ldi	r30, 0x37	; 55
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	8f 70       	andi	r24, 0x0F	; 15
    15b4:	8c 93       	st	X, r24
    15b6:	0f c0       	rjmp	.+30     	; 0x15d6 <DIO_vSet4MSBDir+0x11c>
		case PORTC: DDRC_REG &= 0x0F; break;
    15b8:	a4 e3       	ldi	r26, 0x34	; 52
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e4 e3       	ldi	r30, 0x34	; 52
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8f 70       	andi	r24, 0x0F	; 15
    15c4:	8c 93       	st	X, r24
    15c6:	07 c0       	rjmp	.+14     	; 0x15d6 <DIO_vSet4MSBDir+0x11c>
		case PORTD: DDRD_REG &= 0x0F; break;
    15c8:	a1 e3       	ldi	r26, 0x31	; 49
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e1 e3       	ldi	r30, 0x31	; 49
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 70       	andi	r24, 0x0F	; 15
    15d4:	8c 93       	st	X, r24
		}
	}
}
    15d6:	26 96       	adiw	r28, 0x06	; 6
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <DIO_vSet4LSBValue>:

//sets value of 4LSB pins of a port
void DIO_vSet4LSBValue(u8 Copy_u8PortName, u8 Copy_u8PinVal){
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <DIO_vSet4LSBValue+0x6>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <DIO_vSet4LSBValue+0x8>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <DIO_vSet4LSBValue+0xa>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinVal == HIGH)
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	09 f0       	breq	.+2      	; 0x1602 <DIO_vSet4LSBValue+0x1a>
    1600:	3f c0       	rjmp	.+126    	; 0x1680 <DIO_vSet4LSBValue+0x98>
	{
		switch(Copy_u8PortName)
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	3e 83       	std	Y+6, r19	; 0x06
    160a:	2d 83       	std	Y+5, r18	; 0x05
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	91 05       	cpc	r25, r1
    1614:	e9 f0       	breq	.+58     	; 0x1650 <DIO_vSet4LSBValue+0x68>
    1616:	2d 81       	ldd	r18, Y+5	; 0x05
    1618:	3e 81       	ldd	r19, Y+6	; 0x06
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	2c f4       	brge	.+10     	; 0x162a <DIO_vSet4LSBValue+0x42>
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	61 f0       	breq	.+24     	; 0x1640 <DIO_vSet4LSBValue+0x58>
    1628:	6d c0       	rjmp	.+218    	; 0x1704 <DIO_vSet4LSBValue+0x11c>
    162a:	2d 81       	ldd	r18, Y+5	; 0x05
    162c:	3e 81       	ldd	r19, Y+6	; 0x06
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	b1 f0       	breq	.+44     	; 0x1660 <DIO_vSet4LSBValue+0x78>
    1634:	8d 81       	ldd	r24, Y+5	; 0x05
    1636:	9e 81       	ldd	r25, Y+6	; 0x06
    1638:	83 30       	cpi	r24, 0x03	; 3
    163a:	91 05       	cpc	r25, r1
    163c:	c9 f0       	breq	.+50     	; 0x1670 <DIO_vSet4LSBValue+0x88>
    163e:	62 c0       	rjmp	.+196    	; 0x1704 <DIO_vSet4LSBValue+0x11c>
		{
		case PORTA: PORTA_REG |= 0x0F; break;
    1640:	ab e3       	ldi	r26, 0x3B	; 59
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	eb e3       	ldi	r30, 0x3B	; 59
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	8f 60       	ori	r24, 0x0F	; 15
    164c:	8c 93       	st	X, r24
    164e:	5a c0       	rjmp	.+180    	; 0x1704 <DIO_vSet4LSBValue+0x11c>
		case PORTB: PORTB_REG |= 0x0F; break;
    1650:	a8 e3       	ldi	r26, 0x38	; 56
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e8 e3       	ldi	r30, 0x38	; 56
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8f 60       	ori	r24, 0x0F	; 15
    165c:	8c 93       	st	X, r24
    165e:	52 c0       	rjmp	.+164    	; 0x1704 <DIO_vSet4LSBValue+0x11c>
		case PORTC: PORTC_REG |= 0x0F; break;
    1660:	a5 e3       	ldi	r26, 0x35	; 53
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e5 e3       	ldi	r30, 0x35	; 53
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8f 60       	ori	r24, 0x0F	; 15
    166c:	8c 93       	st	X, r24
    166e:	4a c0       	rjmp	.+148    	; 0x1704 <DIO_vSet4LSBValue+0x11c>
		case PORTD: PORTD_REG |= 0x0F; break;
    1670:	a2 e3       	ldi	r26, 0x32	; 50
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e2 e3       	ldi	r30, 0x32	; 50
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	8f 60       	ori	r24, 0x0F	; 15
    167c:	8c 93       	st	X, r24
    167e:	42 c0       	rjmp	.+132    	; 0x1704 <DIO_vSet4LSBValue+0x11c>
		}
	}
	else if(Copy_u8PinVal == LOW)
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	88 23       	and	r24, r24
    1684:	09 f0       	breq	.+2      	; 0x1688 <DIO_vSet4LSBValue+0xa0>
    1686:	3e c0       	rjmp	.+124    	; 0x1704 <DIO_vSet4LSBValue+0x11c>
	{
		switch(Copy_u8PortName)
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	3c 83       	std	Y+4, r19	; 0x04
    1690:	2b 83       	std	Y+3, r18	; 0x03
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 05       	cpc	r25, r1
    169a:	e9 f0       	breq	.+58     	; 0x16d6 <DIO_vSet4LSBValue+0xee>
    169c:	2b 81       	ldd	r18, Y+3	; 0x03
    169e:	3c 81       	ldd	r19, Y+4	; 0x04
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	2c f4       	brge	.+10     	; 0x16b0 <DIO_vSet4LSBValue+0xc8>
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	9c 81       	ldd	r25, Y+4	; 0x04
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	61 f0       	breq	.+24     	; 0x16c6 <DIO_vSet4LSBValue+0xde>
    16ae:	2a c0       	rjmp	.+84     	; 0x1704 <DIO_vSet4LSBValue+0x11c>
    16b0:	2b 81       	ldd	r18, Y+3	; 0x03
    16b2:	3c 81       	ldd	r19, Y+4	; 0x04
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	b1 f0       	breq	.+44     	; 0x16e6 <DIO_vSet4LSBValue+0xfe>
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	83 30       	cpi	r24, 0x03	; 3
    16c0:	91 05       	cpc	r25, r1
    16c2:	c9 f0       	breq	.+50     	; 0x16f6 <DIO_vSet4LSBValue+0x10e>
    16c4:	1f c0       	rjmp	.+62     	; 0x1704 <DIO_vSet4LSBValue+0x11c>
		{
		case PORTA: PORTA_REG &= 0xF0; break;
    16c6:	ab e3       	ldi	r26, 0x3B	; 59
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	eb e3       	ldi	r30, 0x3B	; 59
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	80 7f       	andi	r24, 0xF0	; 240
    16d2:	8c 93       	st	X, r24
    16d4:	17 c0       	rjmp	.+46     	; 0x1704 <DIO_vSet4LSBValue+0x11c>
		case PORTB: PORTB_REG &= 0xF0; break;
    16d6:	a8 e3       	ldi	r26, 0x38	; 56
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e8 e3       	ldi	r30, 0x38	; 56
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	80 7f       	andi	r24, 0xF0	; 240
    16e2:	8c 93       	st	X, r24
    16e4:	0f c0       	rjmp	.+30     	; 0x1704 <DIO_vSet4LSBValue+0x11c>
		case PORTC: PORTC_REG &= 0xF0; break;
    16e6:	a5 e3       	ldi	r26, 0x35	; 53
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e5 e3       	ldi	r30, 0x35	; 53
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	80 7f       	andi	r24, 0xF0	; 240
    16f2:	8c 93       	st	X, r24
    16f4:	07 c0       	rjmp	.+14     	; 0x1704 <DIO_vSet4LSBValue+0x11c>
		case PORTD: PORTD_REG &= 0xF0; break;
    16f6:	a2 e3       	ldi	r26, 0x32	; 50
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e2 e3       	ldi	r30, 0x32	; 50
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	80 7f       	andi	r24, 0xF0	; 240
    1702:	8c 93       	st	X, r24
		}
	}
}
    1704:	26 96       	adiw	r28, 0x06	; 6
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <DIO_vSet4MSBValue>:

//sets value of 4MSB pins of a port
void DIO_vSet4MSBValue(u8 Copy_u8PortName, u8 Copy_u8PinVal){
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	00 d0       	rcall	.+0      	; 0x171c <DIO_vSet4MSBValue+0x6>
    171c:	00 d0       	rcall	.+0      	; 0x171e <DIO_vSet4MSBValue+0x8>
    171e:	00 d0       	rcall	.+0      	; 0x1720 <DIO_vSet4MSBValue+0xa>
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinVal == HIGH)
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	09 f0       	breq	.+2      	; 0x1730 <DIO_vSet4MSBValue+0x1a>
    172e:	3f c0       	rjmp	.+126    	; 0x17ae <DIO_vSet4MSBValue+0x98>
	{
		switch(Copy_u8PortName)
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3e 83       	std	Y+6, r19	; 0x06
    1738:	2d 83       	std	Y+5, r18	; 0x05
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	91 05       	cpc	r25, r1
    1742:	e9 f0       	breq	.+58     	; 0x177e <DIO_vSet4MSBValue+0x68>
    1744:	2d 81       	ldd	r18, Y+5	; 0x05
    1746:	3e 81       	ldd	r19, Y+6	; 0x06
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	2c f4       	brge	.+10     	; 0x1758 <DIO_vSet4MSBValue+0x42>
    174e:	8d 81       	ldd	r24, Y+5	; 0x05
    1750:	9e 81       	ldd	r25, Y+6	; 0x06
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	61 f0       	breq	.+24     	; 0x176e <DIO_vSet4MSBValue+0x58>
    1756:	6d c0       	rjmp	.+218    	; 0x1832 <DIO_vSet4MSBValue+0x11c>
    1758:	2d 81       	ldd	r18, Y+5	; 0x05
    175a:	3e 81       	ldd	r19, Y+6	; 0x06
    175c:	22 30       	cpi	r18, 0x02	; 2
    175e:	31 05       	cpc	r19, r1
    1760:	b1 f0       	breq	.+44     	; 0x178e <DIO_vSet4MSBValue+0x78>
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	83 30       	cpi	r24, 0x03	; 3
    1768:	91 05       	cpc	r25, r1
    176a:	c9 f0       	breq	.+50     	; 0x179e <DIO_vSet4MSBValue+0x88>
    176c:	62 c0       	rjmp	.+196    	; 0x1832 <DIO_vSet4MSBValue+0x11c>
		{
		case PORTA: PORTA_REG |= 0xF0; break;
    176e:	ab e3       	ldi	r26, 0x3B	; 59
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	eb e3       	ldi	r30, 0x3B	; 59
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	80 6f       	ori	r24, 0xF0	; 240
    177a:	8c 93       	st	X, r24
    177c:	5a c0       	rjmp	.+180    	; 0x1832 <DIO_vSet4MSBValue+0x11c>
		case PORTB: PORTB_REG |= 0xF0; break;
    177e:	a8 e3       	ldi	r26, 0x38	; 56
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e8 e3       	ldi	r30, 0x38	; 56
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	80 6f       	ori	r24, 0xF0	; 240
    178a:	8c 93       	st	X, r24
    178c:	52 c0       	rjmp	.+164    	; 0x1832 <DIO_vSet4MSBValue+0x11c>
		case PORTC: PORTC_REG |= 0xF0; break;
    178e:	a5 e3       	ldi	r26, 0x35	; 53
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e5 e3       	ldi	r30, 0x35	; 53
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	80 6f       	ori	r24, 0xF0	; 240
    179a:	8c 93       	st	X, r24
    179c:	4a c0       	rjmp	.+148    	; 0x1832 <DIO_vSet4MSBValue+0x11c>
		case PORTD: PORTD_REG |= 0xF0; break;
    179e:	a2 e3       	ldi	r26, 0x32	; 50
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e2 e3       	ldi	r30, 0x32	; 50
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	80 6f       	ori	r24, 0xF0	; 240
    17aa:	8c 93       	st	X, r24
    17ac:	42 c0       	rjmp	.+132    	; 0x1832 <DIO_vSet4MSBValue+0x11c>
		}
	}
	else if(Copy_u8PinVal == LOW)
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	88 23       	and	r24, r24
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <DIO_vSet4MSBValue+0xa0>
    17b4:	3e c0       	rjmp	.+124    	; 0x1832 <DIO_vSet4MSBValue+0x11c>
	{
		switch(Copy_u8PortName)
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3c 83       	std	Y+4, r19	; 0x04
    17be:	2b 83       	std	Y+3, r18	; 0x03
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	e9 f0       	breq	.+58     	; 0x1804 <DIO_vSet4MSBValue+0xee>
    17ca:	2b 81       	ldd	r18, Y+3	; 0x03
    17cc:	3c 81       	ldd	r19, Y+4	; 0x04
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	2c f4       	brge	.+10     	; 0x17de <DIO_vSet4MSBValue+0xc8>
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	61 f0       	breq	.+24     	; 0x17f4 <DIO_vSet4MSBValue+0xde>
    17dc:	2a c0       	rjmp	.+84     	; 0x1832 <DIO_vSet4MSBValue+0x11c>
    17de:	2b 81       	ldd	r18, Y+3	; 0x03
    17e0:	3c 81       	ldd	r19, Y+4	; 0x04
    17e2:	22 30       	cpi	r18, 0x02	; 2
    17e4:	31 05       	cpc	r19, r1
    17e6:	b1 f0       	breq	.+44     	; 0x1814 <DIO_vSet4MSBValue+0xfe>
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	9c 81       	ldd	r25, Y+4	; 0x04
    17ec:	83 30       	cpi	r24, 0x03	; 3
    17ee:	91 05       	cpc	r25, r1
    17f0:	c9 f0       	breq	.+50     	; 0x1824 <DIO_vSet4MSBValue+0x10e>
    17f2:	1f c0       	rjmp	.+62     	; 0x1832 <DIO_vSet4MSBValue+0x11c>
		{
		case PORTA: PORTA_REG &= 0x0F; break;
    17f4:	ab e3       	ldi	r26, 0x3B	; 59
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	eb e3       	ldi	r30, 0x3B	; 59
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8f 70       	andi	r24, 0x0F	; 15
    1800:	8c 93       	st	X, r24
    1802:	17 c0       	rjmp	.+46     	; 0x1832 <DIO_vSet4MSBValue+0x11c>
		case PORTB: PORTB_REG &= 0x0F; break;
    1804:	a8 e3       	ldi	r26, 0x38	; 56
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e8 e3       	ldi	r30, 0x38	; 56
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	8f 70       	andi	r24, 0x0F	; 15
    1810:	8c 93       	st	X, r24
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <DIO_vSet4MSBValue+0x11c>
		case PORTC: PORTC_REG &= 0x0F; break;
    1814:	a5 e3       	ldi	r26, 0x35	; 53
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e5 e3       	ldi	r30, 0x35	; 53
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8f 70       	andi	r24, 0x0F	; 15
    1820:	8c 93       	st	X, r24
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <DIO_vSet4MSBValue+0x11c>
		case PORTD: PORTD_REG &= 0x0F; break;
    1824:	a2 e3       	ldi	r26, 0x32	; 50
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e2 e3       	ldi	r30, 0x32	; 50
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	8f 70       	andi	r24, 0x0F	; 15
    1830:	8c 93       	st	X, r24
		}
	}
}
    1832:	26 96       	adiw	r28, 0x06	; 6
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <LCD_vInit>:
#include "LCD_interface.h"
#define F_CPU 8000000UL //CPU Frequency is 8MHZ
#include <util/delay.h>

//Function to initialize LCD
void LCD_vInit(void){
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	c6 54       	subi	r28, 0x46	; 70
    1852:	d0 40       	sbci	r29, 0x00	; 0
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetGroupDir(LCD_DATA_PORT, OUTPUT);
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	0e 94 ca 08 	call	0x1194	; 0x1194 <DIO_vSetGroupDir>
	DIO_vSetPinDir(LCD_CTRL_PORT, RS_PIN, OUTPUT);
    1866:	82 e0       	ldi	r24, 0x02	; 2
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	41 e0       	ldi	r20, 0x01	; 1
    186c:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_CTRL_PORT, RW_PIN, OUTPUT);
    1870:	82 e0       	ldi	r24, 0x02	; 2
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_CTRL_PORT, EN_PIN, OUTPUT);
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	62 e0       	ldi	r22, 0x02	; 2
    187e:	41 e0       	ldi	r20, 0x01	; 1
    1880:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vSetPinDir>
    1884:	fe 01       	movw	r30, r28
    1886:	ed 5b       	subi	r30, 0xBD	; 189
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e2       	ldi	r26, 0x20	; 32
    1890:	b1 e4       	ldi	r27, 0x41	; 65
    1892:	80 83       	st	Z, r24
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	a2 83       	std	Z+2, r26	; 0x02
    1898:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	8e 01       	movw	r16, r28
    189c:	01 5c       	subi	r16, 0xC1	; 193
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	fe 01       	movw	r30, r28
    18a2:	ed 5b       	subi	r30, 0xBD	; 189
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a ef       	ldi	r20, 0xFA	; 250
    18b4:	54 e4       	ldi	r21, 0x44	; 68
    18b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	f8 01       	movw	r30, r16
    18c0:	80 83       	st	Z, r24
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	a2 83       	std	Z+2, r26	; 0x02
    18c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18c8:	fe 01       	movw	r30, r28
    18ca:	ff 96       	adiw	r30, 0x3f	; 63
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e8       	ldi	r20, 0x80	; 128
    18da:	5f e3       	ldi	r21, 0x3F	; 63
    18dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18e0:	88 23       	and	r24, r24
    18e2:	2c f4       	brge	.+10     	; 0x18ee <LCD_vInit+0xaa>
		__ticks = 1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9e af       	std	Y+62, r25	; 0x3e
    18ea:	8d af       	std	Y+61, r24	; 0x3d
    18ec:	46 c0       	rjmp	.+140    	; 0x197a <LCD_vInit+0x136>
	else if (__tmp > 65535)
    18ee:	fe 01       	movw	r30, r28
    18f0:	ff 96       	adiw	r30, 0x3f	; 63
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	3f ef       	ldi	r19, 0xFF	; 255
    18fe:	4f e7       	ldi	r20, 0x7F	; 127
    1900:	57 e4       	ldi	r21, 0x47	; 71
    1902:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1906:	18 16       	cp	r1, r24
    1908:	64 f5       	brge	.+88     	; 0x1962 <LCD_vInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190a:	fe 01       	movw	r30, r28
    190c:	ed 5b       	subi	r30, 0xBD	; 189
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e2       	ldi	r20, 0x20	; 32
    191e:	51 e4       	ldi	r21, 0x41	; 65
    1920:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9e af       	std	Y+62, r25	; 0x3e
    1936:	8d af       	std	Y+61, r24	; 0x3d
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <LCD_vInit+0x114>
    193a:	88 ec       	ldi	r24, 0xC8	; 200
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9c af       	std	Y+60, r25	; 0x3c
    1940:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1942:	8b ad       	ldd	r24, Y+59	; 0x3b
    1944:	9c ad       	ldd	r25, Y+60	; 0x3c
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <LCD_vInit+0x102>
    194a:	9c af       	std	Y+60, r25	; 0x3c
    194c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1950:	9e ad       	ldd	r25, Y+62	; 0x3e
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	9e af       	std	Y+62, r25	; 0x3e
    1956:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1958:	8d ad       	ldd	r24, Y+61	; 0x3d
    195a:	9e ad       	ldd	r25, Y+62	; 0x3e
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	69 f7       	brne	.-38     	; 0x193a <LCD_vInit+0xf6>
    1960:	16 c0       	rjmp	.+44     	; 0x198e <LCD_vInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1962:	fe 01       	movw	r30, r28
    1964:	ff 96       	adiw	r30, 0x3f	; 63
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	9e af       	std	Y+62, r25	; 0x3e
    1978:	8d af       	std	Y+61, r24	; 0x3d
    197a:	8d ad       	ldd	r24, Y+61	; 0x3d
    197c:	9e ad       	ldd	r25, Y+62	; 0x3e
    197e:	9a af       	std	Y+58, r25	; 0x3a
    1980:	89 af       	std	Y+57, r24	; 0x39
    1982:	89 ad       	ldd	r24, Y+57	; 0x39
    1984:	9a ad       	ldd	r25, Y+58	; 0x3a
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <LCD_vInit+0x142>
    198a:	9a af       	std	Y+58, r25	; 0x3a
    198c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_vSendCmd(TWO_LINE_EIGHT_BITS_BIG_FONT);
    198e:	8c e3       	ldi	r24, 0x3C	; 60
    1990:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vSendCmd>
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a0 e2       	ldi	r26, 0x20	; 32
    199a:	b1 e4       	ldi	r27, 0x41	; 65
    199c:	8d ab       	std	Y+53, r24	; 0x35
    199e:	9e ab       	std	Y+54, r25	; 0x36
    19a0:	af ab       	std	Y+55, r26	; 0x37
    19a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a4:	6d a9       	ldd	r22, Y+53	; 0x35
    19a6:	7e a9       	ldd	r23, Y+54	; 0x36
    19a8:	8f a9       	ldd	r24, Y+55	; 0x37
    19aa:	98 ad       	ldd	r25, Y+56	; 0x38
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	4a ef       	ldi	r20, 0xFA	; 250
    19b2:	54 e4       	ldi	r21, 0x44	; 68
    19b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	89 ab       	std	Y+49, r24	; 0x31
    19be:	9a ab       	std	Y+50, r25	; 0x32
    19c0:	ab ab       	std	Y+51, r26	; 0x33
    19c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19c4:	69 a9       	ldd	r22, Y+49	; 0x31
    19c6:	7a a9       	ldd	r23, Y+50	; 0x32
    19c8:	8b a9       	ldd	r24, Y+51	; 0x33
    19ca:	9c a9       	ldd	r25, Y+52	; 0x34
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e8       	ldi	r20, 0x80	; 128
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19d8:	88 23       	and	r24, r24
    19da:	2c f4       	brge	.+10     	; 0x19e6 <LCD_vInit+0x1a2>
		__ticks = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	98 ab       	std	Y+48, r25	; 0x30
    19e2:	8f a7       	std	Y+47, r24	; 0x2f
    19e4:	3f c0       	rjmp	.+126    	; 0x1a64 <LCD_vInit+0x220>
	else if (__tmp > 65535)
    19e6:	69 a9       	ldd	r22, Y+49	; 0x31
    19e8:	7a a9       	ldd	r23, Y+50	; 0x32
    19ea:	8b a9       	ldd	r24, Y+51	; 0x33
    19ec:	9c a9       	ldd	r25, Y+52	; 0x34
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	4c f5       	brge	.+82     	; 0x1a50 <LCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1a00:	7e a9       	ldd	r23, Y+54	; 0x36
    1a02:	8f a9       	ldd	r24, Y+55	; 0x37
    1a04:	98 ad       	ldd	r25, Y+56	; 0x38
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e2       	ldi	r20, 0x20	; 32
    1a0c:	51 e4       	ldi	r21, 0x41	; 65
    1a0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	98 ab       	std	Y+48, r25	; 0x30
    1a24:	8f a7       	std	Y+47, r24	; 0x2f
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <LCD_vInit+0x202>
    1a28:	88 ec       	ldi	r24, 0xC8	; 200
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	9e a7       	std	Y+46, r25	; 0x2e
    1a2e:	8d a7       	std	Y+45, r24	; 0x2d
    1a30:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a32:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_vInit+0x1f0>
    1a38:	9e a7       	std	Y+46, r25	; 0x2e
    1a3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	98 ab       	std	Y+48, r25	; 0x30
    1a44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a48:	98 a9       	ldd	r25, Y+48	; 0x30
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	69 f7       	brne	.-38     	; 0x1a28 <LCD_vInit+0x1e4>
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <LCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a50:	69 a9       	ldd	r22, Y+49	; 0x31
    1a52:	7a a9       	ldd	r23, Y+50	; 0x32
    1a54:	8b a9       	ldd	r24, Y+51	; 0x33
    1a56:	9c a9       	ldd	r25, Y+52	; 0x34
    1a58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	98 ab       	std	Y+48, r25	; 0x30
    1a62:	8f a7       	std	Y+47, r24	; 0x2f
    1a64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a66:	98 a9       	ldd	r25, Y+48	; 0x30
    1a68:	9c a7       	std	Y+44, r25	; 0x2c
    1a6a:	8b a7       	std	Y+43, r24	; 0x2b
    1a6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_vInit+0x22c>
    1a74:	9c a7       	std	Y+44, r25	; 0x2c
    1a76:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_vSendCmd(CURSOR_ON);
    1a78:	8f e0       	ldi	r24, 0x0F	; 15
    1a7a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vSendCmd>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a0 e2       	ldi	r26, 0x20	; 32
    1a84:	b1 e4       	ldi	r27, 0x41	; 65
    1a86:	8f a3       	std	Y+39, r24	; 0x27
    1a88:	98 a7       	std	Y+40, r25	; 0x28
    1a8a:	a9 a7       	std	Y+41, r26	; 0x29
    1a8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a90:	78 a5       	ldd	r23, Y+40	; 0x28
    1a92:	89 a5       	ldd	r24, Y+41	; 0x29
    1a94:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4a ef       	ldi	r20, 0xFA	; 250
    1a9c:	54 e4       	ldi	r21, 0x44	; 68
    1a9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8b a3       	std	Y+35, r24	; 0x23
    1aa8:	9c a3       	std	Y+36, r25	; 0x24
    1aaa:	ad a3       	std	Y+37, r26	; 0x25
    1aac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1aae:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e8       	ldi	r20, 0x80	; 128
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ac2:	88 23       	and	r24, r24
    1ac4:	2c f4       	brge	.+10     	; 0x1ad0 <LCD_vInit+0x28c>
		__ticks = 1;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9a a3       	std	Y+34, r25	; 0x22
    1acc:	89 a3       	std	Y+33, r24	; 0x21
    1ace:	3f c0       	rjmp	.+126    	; 0x1b4e <LCD_vInit+0x30a>
	else if (__tmp > 65535)
    1ad0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	57 e4       	ldi	r21, 0x47	; 71
    1ae0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ae4:	18 16       	cp	r1, r24
    1ae6:	4c f5       	brge	.+82     	; 0x1b3a <LCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aea:	78 a5       	ldd	r23, Y+40	; 0x28
    1aec:	89 a5       	ldd	r24, Y+41	; 0x29
    1aee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9a a3       	std	Y+34, r25	; 0x22
    1b0e:	89 a3       	std	Y+33, r24	; 0x21
    1b10:	0f c0       	rjmp	.+30     	; 0x1b30 <LCD_vInit+0x2ec>
    1b12:	88 ec       	ldi	r24, 0xC8	; 200
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	98 a3       	std	Y+32, r25	; 0x20
    1b18:	8f 8f       	std	Y+31, r24	; 0x1f
    1b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <LCD_vInit+0x2da>
    1b22:	98 a3       	std	Y+32, r25	; 0x20
    1b24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b26:	89 a1       	ldd	r24, Y+33	; 0x21
    1b28:	9a a1       	ldd	r25, Y+34	; 0x22
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	9a a3       	std	Y+34, r25	; 0x22
    1b2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b30:	89 a1       	ldd	r24, Y+33	; 0x21
    1b32:	9a a1       	ldd	r25, Y+34	; 0x22
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	69 f7       	brne	.-38     	; 0x1b12 <LCD_vInit+0x2ce>
    1b38:	14 c0       	rjmp	.+40     	; 0x1b62 <LCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b40:	9e a1       	ldd	r25, Y+38	; 0x26
    1b42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9a a3       	std	Y+34, r25	; 0x22
    1b4c:	89 a3       	std	Y+33, r24	; 0x21
    1b4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b50:	9a a1       	ldd	r25, Y+34	; 0x22
    1b52:	9e 8f       	std	Y+30, r25	; 0x1e
    1b54:	8d 8f       	std	Y+29, r24	; 0x1d
    1b56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <LCD_vInit+0x316>
    1b5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b60:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	LCD_vSendCmd(CLEAR_COMMAND);
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vSendCmd>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a0 e2       	ldi	r26, 0x20	; 32
    1b6e:	b1 e4       	ldi	r27, 0x41	; 65
    1b70:	89 8f       	std	Y+25, r24	; 0x19
    1b72:	9a 8f       	std	Y+26, r25	; 0x1a
    1b74:	ab 8f       	std	Y+27, r26	; 0x1b
    1b76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b78:	69 8d       	ldd	r22, Y+25	; 0x19
    1b7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	4a ef       	ldi	r20, 0xFA	; 250
    1b86:	54 e4       	ldi	r21, 0x44	; 68
    1b88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	8d 8b       	std	Y+21, r24	; 0x15
    1b92:	9e 8b       	std	Y+22, r25	; 0x16
    1b94:	af 8b       	std	Y+23, r26	; 0x17
    1b96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b98:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	2c f4       	brge	.+10     	; 0x1bba <LCD_vInit+0x376>
		__ticks = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c 8b       	std	Y+20, r25	; 0x14
    1bb6:	8b 8b       	std	Y+19, r24	; 0x13
    1bb8:	3f c0       	rjmp	.+126    	; 0x1c38 <LCD_vInit+0x3f4>
	else if (__tmp > 65535)
    1bba:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	57 e4       	ldi	r21, 0x47	; 71
    1bca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bce:	18 16       	cp	r1, r24
    1bd0:	4c f5       	brge	.+82     	; 0x1c24 <LCD_vInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e2       	ldi	r20, 0x20	; 32
    1be0:	51 e4       	ldi	r21, 0x41	; 65
    1be2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	9c 8b       	std	Y+20, r25	; 0x14
    1bf8:	8b 8b       	std	Y+19, r24	; 0x13
    1bfa:	0f c0       	rjmp	.+30     	; 0x1c1a <LCD_vInit+0x3d6>
    1bfc:	88 ec       	ldi	r24, 0xC8	; 200
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9a 8b       	std	Y+18, r25	; 0x12
    1c02:	89 8b       	std	Y+17, r24	; 0x11
    1c04:	89 89       	ldd	r24, Y+17	; 0x11
    1c06:	9a 89       	ldd	r25, Y+18	; 0x12
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_vInit+0x3c4>
    1c0c:	9a 8b       	std	Y+18, r25	; 0x12
    1c0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c10:	8b 89       	ldd	r24, Y+19	; 0x13
    1c12:	9c 89       	ldd	r25, Y+20	; 0x14
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	9c 8b       	std	Y+20, r25	; 0x14
    1c18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	69 f7       	brne	.-38     	; 0x1bfc <LCD_vInit+0x3b8>
    1c22:	14 c0       	rjmp	.+40     	; 0x1c4c <LCD_vInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c24:	6d 89       	ldd	r22, Y+21	; 0x15
    1c26:	7e 89       	ldd	r23, Y+22	; 0x16
    1c28:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	9c 8b       	std	Y+20, r25	; 0x14
    1c36:	8b 8b       	std	Y+19, r24	; 0x13
    1c38:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3c:	98 8b       	std	Y+16, r25	; 0x10
    1c3e:	8f 87       	std	Y+15, r24	; 0x0f
    1c40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c42:	98 89       	ldd	r25, Y+16	; 0x10
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_vInit+0x400>
    1c48:	98 8b       	std	Y+16, r25	; 0x10
    1c4a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSendCmd(START_FROM_LEFT_NO_SHIFT);
    1c4c:	86 e0       	ldi	r24, 0x06	; 6
    1c4e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vSendCmd>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 e2       	ldi	r26, 0x20	; 32
    1c58:	b1 e4       	ldi	r27, 0x41	; 65
    1c5a:	8b 87       	std	Y+11, r24	; 0x0b
    1c5c:	9c 87       	std	Y+12, r25	; 0x0c
    1c5e:	ad 87       	std	Y+13, r26	; 0x0d
    1c60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a ef       	ldi	r20, 0xFA	; 250
    1c70:	54 e4       	ldi	r21, 0x44	; 68
    1c72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	8f 83       	std	Y+7, r24	; 0x07
    1c7c:	98 87       	std	Y+8, r25	; 0x08
    1c7e:	a9 87       	std	Y+9, r26	; 0x09
    1c80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c82:	6f 81       	ldd	r22, Y+7	; 0x07
    1c84:	78 85       	ldd	r23, Y+8	; 0x08
    1c86:	89 85       	ldd	r24, Y+9	; 0x09
    1c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <LCD_vInit+0x460>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <LCD_vInit+0x4de>
	else if (__tmp > 65535)
    1ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca6:	78 85       	ldd	r23, Y+8	; 0x08
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <LCD_vInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <LCD_vInit+0x4c0>
    1ce6:	88 ec       	ldi	r24, 0xC8	; 200
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9c 83       	std	Y+4, r25	; 0x04
    1cec:	8b 83       	std	Y+3, r24	; 0x03
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_vInit+0x4ae>
    1cf6:	9c 83       	std	Y+4, r25	; 0x04
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9e 83       	std	Y+6, r25	; 0x06
    1d02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	9e 81       	ldd	r25, Y+6	; 0x06
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <LCD_vInit+0x4a2>
    1d0c:	14 c0       	rjmp	.+40     	; 0x1d36 <LCD_vInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_vInit+0x4ea>
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1d36:	ca 5b       	subi	r28, 0xBA	; 186
    1d38:	df 4f       	sbci	r29, 0xFF	; 255
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	08 95       	ret

00001d4e <LCD_vSendCmd>:

//Function to send a command to the LCD
void LCD_vSendCmd(u8 Copy_u8Command){
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	e9 97       	sbiw	r28, 0x39	; 57
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	89 af       	std	Y+57, r24	; 0x39
	DIO_vSetPinValue(LCD_CTRL_PORT, RS_PIN, LOW);
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vSetPinValue>
	DIO_vSetPinValue(LCD_CTRL_PORT, RW_PIN, LOW);
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	61 e0       	ldi	r22, 0x01	; 1
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vSetPinValue>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a0 e2       	ldi	r26, 0x20	; 32
    1d7e:	b1 e4       	ldi	r27, 0x41	; 65
    1d80:	8d ab       	std	Y+53, r24	; 0x35
    1d82:	9e ab       	std	Y+54, r25	; 0x36
    1d84:	af ab       	std	Y+55, r26	; 0x37
    1d86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	6d a9       	ldd	r22, Y+53	; 0x35
    1d8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4a ef       	ldi	r20, 0xFA	; 250
    1d96:	54 e4       	ldi	r21, 0x44	; 68
    1d98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	89 ab       	std	Y+49, r24	; 0x31
    1da2:	9a ab       	std	Y+50, r25	; 0x32
    1da4:	ab ab       	std	Y+51, r26	; 0x33
    1da6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1da8:	69 a9       	ldd	r22, Y+49	; 0x31
    1daa:	7a a9       	ldd	r23, Y+50	; 0x32
    1dac:	8b a9       	ldd	r24, Y+51	; 0x33
    1dae:	9c a9       	ldd	r25, Y+52	; 0x34
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <LCD_vSendCmd+0x7c>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	98 ab       	std	Y+48, r25	; 0x30
    1dc6:	8f a7       	std	Y+47, r24	; 0x2f
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <LCD_vSendCmd+0xfa>
	else if (__tmp > 65535)
    1dca:	69 a9       	ldd	r22, Y+49	; 0x31
    1dcc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dce:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	4c f5       	brge	.+82     	; 0x1e34 <LCD_vSendCmd+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de2:	6d a9       	ldd	r22, Y+53	; 0x35
    1de4:	7e a9       	ldd	r23, Y+54	; 0x36
    1de6:	8f a9       	ldd	r24, Y+55	; 0x37
    1de8:	98 ad       	ldd	r25, Y+56	; 0x38
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	98 ab       	std	Y+48, r25	; 0x30
    1e08:	8f a7       	std	Y+47, r24	; 0x2f
    1e0a:	0f c0       	rjmp	.+30     	; 0x1e2a <LCD_vSendCmd+0xdc>
    1e0c:	88 ec       	ldi	r24, 0xC8	; 200
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9e a7       	std	Y+46, r25	; 0x2e
    1e12:	8d a7       	std	Y+45, r24	; 0x2d
    1e14:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e16:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_vSendCmd+0xca>
    1e1c:	9e a7       	std	Y+46, r25	; 0x2e
    1e1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e22:	98 a9       	ldd	r25, Y+48	; 0x30
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	98 ab       	std	Y+48, r25	; 0x30
    1e28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	69 f7       	brne	.-38     	; 0x1e0c <LCD_vSendCmd+0xbe>
    1e32:	14 c0       	rjmp	.+40     	; 0x1e5c <LCD_vSendCmd+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	69 a9       	ldd	r22, Y+49	; 0x31
    1e36:	7a a9       	ldd	r23, Y+50	; 0x32
    1e38:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	98 ab       	std	Y+48, r25	; 0x30
    1e46:	8f a7       	std	Y+47, r24	; 0x2f
    1e48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4c:	9c a7       	std	Y+44, r25	; 0x2c
    1e4e:	8b a7       	std	Y+43, r24	; 0x2b
    1e50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <LCD_vSendCmd+0x106>
    1e58:	9c a7       	std	Y+44, r25	; 0x2c
    1e5a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CTRL_PORT, EN_PIN, HIGH);
    1e5c:	82 e0       	ldi	r24, 0x02	; 2
    1e5e:	62 e0       	ldi	r22, 0x02	; 2
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vSetPinValue>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a0 e2       	ldi	r26, 0x20	; 32
    1e6c:	b1 e4       	ldi	r27, 0x41	; 65
    1e6e:	8f a3       	std	Y+39, r24	; 0x27
    1e70:	98 a7       	std	Y+40, r25	; 0x28
    1e72:	a9 a7       	std	Y+41, r26	; 0x29
    1e74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e76:	6f a1       	ldd	r22, Y+39	; 0x27
    1e78:	78 a5       	ldd	r23, Y+40	; 0x28
    1e7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	4a ef       	ldi	r20, 0xFA	; 250
    1e84:	54 e4       	ldi	r21, 0x44	; 68
    1e86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	8b a3       	std	Y+35, r24	; 0x23
    1e90:	9c a3       	std	Y+36, r25	; 0x24
    1e92:	ad a3       	std	Y+37, r26	; 0x25
    1e94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e96:	6b a1       	ldd	r22, Y+35	; 0x23
    1e98:	7c a1       	ldd	r23, Y+36	; 0x24
    1e9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eaa:	88 23       	and	r24, r24
    1eac:	2c f4       	brge	.+10     	; 0x1eb8 <LCD_vSendCmd+0x16a>
		__ticks = 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9a a3       	std	Y+34, r25	; 0x22
    1eb4:	89 a3       	std	Y+33, r24	; 0x21
    1eb6:	3f c0       	rjmp	.+126    	; 0x1f36 <LCD_vSendCmd+0x1e8>
	else if (__tmp > 65535)
    1eb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eba:	7c a1       	ldd	r23, Y+36	; 0x24
    1ebc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ebe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	3f ef       	ldi	r19, 0xFF	; 255
    1ec4:	4f e7       	ldi	r20, 0x7F	; 127
    1ec6:	57 e4       	ldi	r21, 0x47	; 71
    1ec8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ecc:	18 16       	cp	r1, r24
    1ece:	4c f5       	brge	.+82     	; 0x1f22 <LCD_vSendCmd+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e2       	ldi	r20, 0x20	; 32
    1ede:	51 e4       	ldi	r21, 0x41	; 65
    1ee0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	89 a3       	std	Y+33, r24	; 0x21
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <LCD_vSendCmd+0x1ca>
    1efa:	88 ec       	ldi	r24, 0xC8	; 200
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	98 a3       	std	Y+32, r25	; 0x20
    1f00:	8f 8f       	std	Y+31, r24	; 0x1f
    1f02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f04:	98 a1       	ldd	r25, Y+32	; 0x20
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <LCD_vSendCmd+0x1b8>
    1f0a:	98 a3       	std	Y+32, r25	; 0x20
    1f0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f10:	9a a1       	ldd	r25, Y+34	; 0x22
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	9a a3       	std	Y+34, r25	; 0x22
    1f16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f18:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	69 f7       	brne	.-38     	; 0x1efa <LCD_vSendCmd+0x1ac>
    1f20:	14 c0       	rjmp	.+40     	; 0x1f4a <LCD_vSendCmd+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f22:	6b a1       	ldd	r22, Y+35	; 0x23
    1f24:	7c a1       	ldd	r23, Y+36	; 0x24
    1f26:	8d a1       	ldd	r24, Y+37	; 0x25
    1f28:	9e a1       	ldd	r25, Y+38	; 0x26
    1f2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9a a3       	std	Y+34, r25	; 0x22
    1f34:	89 a3       	std	Y+33, r24	; 0x21
    1f36:	89 a1       	ldd	r24, Y+33	; 0x21
    1f38:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_vSendCmd+0x1f4>
    1f46:	9e 8f       	std	Y+30, r25	; 0x1e
    1f48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	DIO_vSetGroupValue(LCD_DATA_PORT, Copy_u8Command);
    1f4a:	83 e0       	ldi	r24, 0x03	; 3
    1f4c:	69 ad       	ldd	r22, Y+57	; 0x39
    1f4e:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_vSetGroupValue>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a0 e2       	ldi	r26, 0x20	; 32
    1f58:	b1 e4       	ldi	r27, 0x41	; 65
    1f5a:	89 8f       	std	Y+25, r24	; 0x19
    1f5c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f5e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f62:	69 8d       	ldd	r22, Y+25	; 0x19
    1f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	4a ef       	ldi	r20, 0xFA	; 250
    1f70:	54 e4       	ldi	r21, 0x44	; 68
    1f72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	8d 8b       	std	Y+21, r24	; 0x15
    1f7c:	9e 8b       	std	Y+22, r25	; 0x16
    1f7e:	af 8b       	std	Y+23, r26	; 0x17
    1f80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f82:	6d 89       	ldd	r22, Y+21	; 0x15
    1f84:	7e 89       	ldd	r23, Y+22	; 0x16
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e8       	ldi	r20, 0x80	; 128
    1f90:	5f e3       	ldi	r21, 0x3F	; 63
    1f92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f96:	88 23       	and	r24, r24
    1f98:	2c f4       	brge	.+10     	; 0x1fa4 <LCD_vSendCmd+0x256>
		__ticks = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
    1fa2:	3f c0       	rjmp	.+126    	; 0x2022 <LCD_vSendCmd+0x2d4>
	else if (__tmp > 65535)
    1fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	3f ef       	ldi	r19, 0xFF	; 255
    1fb0:	4f e7       	ldi	r20, 0x7F	; 127
    1fb2:	57 e4       	ldi	r21, 0x47	; 71
    1fb4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fb8:	18 16       	cp	r1, r24
    1fba:	4c f5       	brge	.+82     	; 0x200e <LCD_vSendCmd+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e2       	ldi	r20, 0x20	; 32
    1fca:	51 e4       	ldi	r21, 0x41	; 65
    1fcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	0f c0       	rjmp	.+30     	; 0x2004 <LCD_vSendCmd+0x2b6>
    1fe6:	88 ec       	ldi	r24, 0xC8	; 200
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9a 8b       	std	Y+18, r25	; 0x12
    1fec:	89 8b       	std	Y+17, r24	; 0x11
    1fee:	89 89       	ldd	r24, Y+17	; 0x11
    1ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <LCD_vSendCmd+0x2a4>
    1ff6:	9a 8b       	std	Y+18, r25	; 0x12
    1ff8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	9c 8b       	std	Y+20, r25	; 0x14
    2002:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2004:	8b 89       	ldd	r24, Y+19	; 0x13
    2006:	9c 89       	ldd	r25, Y+20	; 0x14
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	69 f7       	brne	.-38     	; 0x1fe6 <LCD_vSendCmd+0x298>
    200c:	14 c0       	rjmp	.+40     	; 0x2036 <LCD_vSendCmd+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200e:	6d 89       	ldd	r22, Y+21	; 0x15
    2010:	7e 89       	ldd	r23, Y+22	; 0x16
    2012:	8f 89       	ldd	r24, Y+23	; 0x17
    2014:	98 8d       	ldd	r25, Y+24	; 0x18
    2016:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	9c 8b       	std	Y+20, r25	; 0x14
    2020:	8b 8b       	std	Y+19, r24	; 0x13
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	98 8b       	std	Y+16, r25	; 0x10
    2028:	8f 87       	std	Y+15, r24	; 0x0f
    202a:	8f 85       	ldd	r24, Y+15	; 0x0f
    202c:	98 89       	ldd	r25, Y+16	; 0x10
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <LCD_vSendCmd+0x2e0>
    2032:	98 8b       	std	Y+16, r25	; 0x10
    2034:	8f 87       	std	Y+15, r24	; 0x0f
	//PORTD_REG = Copy_u8Command;
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CTRL_PORT, EN_PIN, LOW);
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	62 e0       	ldi	r22, 0x02	; 2
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vSetPinValue>
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a0 e2       	ldi	r26, 0x20	; 32
    2046:	b1 e4       	ldi	r27, 0x41	; 65
    2048:	8b 87       	std	Y+11, r24	; 0x0b
    204a:	9c 87       	std	Y+12, r25	; 0x0c
    204c:	ad 87       	std	Y+13, r26	; 0x0d
    204e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2050:	6b 85       	ldd	r22, Y+11	; 0x0b
    2052:	7c 85       	ldd	r23, Y+12	; 0x0c
    2054:	8d 85       	ldd	r24, Y+13	; 0x0d
    2056:	9e 85       	ldd	r25, Y+14	; 0x0e
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a ef       	ldi	r20, 0xFA	; 250
    205e:	54 e4       	ldi	r21, 0x44	; 68
    2060:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	8f 83       	std	Y+7, r24	; 0x07
    206a:	98 87       	std	Y+8, r25	; 0x08
    206c:	a9 87       	std	Y+9, r26	; 0x09
    206e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2070:	6f 81       	ldd	r22, Y+7	; 0x07
    2072:	78 85       	ldd	r23, Y+8	; 0x08
    2074:	89 85       	ldd	r24, Y+9	; 0x09
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	2c f4       	brge	.+10     	; 0x2092 <LCD_vSendCmd+0x344>
		__ticks = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <LCD_vSendCmd+0x3c2>
	else if (__tmp > 65535)
    2092:	6f 81       	ldd	r22, Y+7	; 0x07
    2094:	78 85       	ldd	r23, Y+8	; 0x08
    2096:	89 85       	ldd	r24, Y+9	; 0x09
    2098:	9a 85       	ldd	r25, Y+10	; 0x0a
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	4c f5       	brge	.+82     	; 0x20fc <LCD_vSendCmd+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <LCD_vSendCmd+0x3a4>
    20d4:	88 ec       	ldi	r24, 0xC8	; 200
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9c 83       	std	Y+4, r25	; 0x04
    20da:	8b 83       	std	Y+3, r24	; 0x03
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <LCD_vSendCmd+0x392>
    20e4:	9c 83       	std	Y+4, r25	; 0x04
    20e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	69 f7       	brne	.-38     	; 0x20d4 <LCD_vSendCmd+0x386>
    20fa:	14 c0       	rjmp	.+40     	; 0x2124 <LCD_vSendCmd+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	9a 81       	ldd	r25, Y+2	; 0x02
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_vSendCmd+0x3ce>
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2124:	e9 96       	adiw	r28, 0x39	; 57
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <LCD_vDisplayChar>:

//Function to display a character on the LCD
void LCD_vDisplayChar(u8 Copy_u8Character){
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	e9 97       	sbiw	r28, 0x39	; 57
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	89 af       	std	Y+57, r24	; 0x39
	DIO_vSetPinValue(LCD_CTRL_PORT, RS_PIN, HIGH);
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vSetPinValue>
	DIO_vSetPinValue(LCD_CTRL_PORT, RW_PIN, LOW);
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	61 e0       	ldi	r22, 0x01	; 1
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vSetPinValue>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a0 e2       	ldi	r26, 0x20	; 32
    2166:	b1 e4       	ldi	r27, 0x41	; 65
    2168:	8d ab       	std	Y+53, r24	; 0x35
    216a:	9e ab       	std	Y+54, r25	; 0x36
    216c:	af ab       	std	Y+55, r26	; 0x37
    216e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2170:	6d a9       	ldd	r22, Y+53	; 0x35
    2172:	7e a9       	ldd	r23, Y+54	; 0x36
    2174:	8f a9       	ldd	r24, Y+55	; 0x37
    2176:	98 ad       	ldd	r25, Y+56	; 0x38
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	4a ef       	ldi	r20, 0xFA	; 250
    217e:	54 e4       	ldi	r21, 0x44	; 68
    2180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	89 ab       	std	Y+49, r24	; 0x31
    218a:	9a ab       	std	Y+50, r25	; 0x32
    218c:	ab ab       	std	Y+51, r26	; 0x33
    218e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2190:	69 a9       	ldd	r22, Y+49	; 0x31
    2192:	7a a9       	ldd	r23, Y+50	; 0x32
    2194:	8b a9       	ldd	r24, Y+51	; 0x33
    2196:	9c a9       	ldd	r25, Y+52	; 0x34
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	2c f4       	brge	.+10     	; 0x21b2 <LCD_vDisplayChar+0x7c>
		__ticks = 1;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	98 ab       	std	Y+48, r25	; 0x30
    21ae:	8f a7       	std	Y+47, r24	; 0x2f
    21b0:	3f c0       	rjmp	.+126    	; 0x2230 <LCD_vDisplayChar+0xfa>
	else if (__tmp > 65535)
    21b2:	69 a9       	ldd	r22, Y+49	; 0x31
    21b4:	7a a9       	ldd	r23, Y+50	; 0x32
    21b6:	8b a9       	ldd	r24, Y+51	; 0x33
    21b8:	9c a9       	ldd	r25, Y+52	; 0x34
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	3f ef       	ldi	r19, 0xFF	; 255
    21be:	4f e7       	ldi	r20, 0x7F	; 127
    21c0:	57 e4       	ldi	r21, 0x47	; 71
    21c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21c6:	18 16       	cp	r1, r24
    21c8:	4c f5       	brge	.+82     	; 0x221c <LCD_vDisplayChar+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ca:	6d a9       	ldd	r22, Y+53	; 0x35
    21cc:	7e a9       	ldd	r23, Y+54	; 0x36
    21ce:	8f a9       	ldd	r24, Y+55	; 0x37
    21d0:	98 ad       	ldd	r25, Y+56	; 0x38
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e2       	ldi	r20, 0x20	; 32
    21d8:	51 e4       	ldi	r21, 0x41	; 65
    21da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	bc 01       	movw	r22, r24
    21e4:	cd 01       	movw	r24, r26
    21e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	98 ab       	std	Y+48, r25	; 0x30
    21f0:	8f a7       	std	Y+47, r24	; 0x2f
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <LCD_vDisplayChar+0xdc>
    21f4:	88 ec       	ldi	r24, 0xC8	; 200
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9e a7       	std	Y+46, r25	; 0x2e
    21fa:	8d a7       	std	Y+45, r24	; 0x2d
    21fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    21fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <LCD_vDisplayChar+0xca>
    2204:	9e a7       	std	Y+46, r25	; 0x2e
    2206:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2208:	8f a5       	ldd	r24, Y+47	; 0x2f
    220a:	98 a9       	ldd	r25, Y+48	; 0x30
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	98 ab       	std	Y+48, r25	; 0x30
    2210:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2212:	8f a5       	ldd	r24, Y+47	; 0x2f
    2214:	98 a9       	ldd	r25, Y+48	; 0x30
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	69 f7       	brne	.-38     	; 0x21f4 <LCD_vDisplayChar+0xbe>
    221a:	14 c0       	rjmp	.+40     	; 0x2244 <LCD_vDisplayChar+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221c:	69 a9       	ldd	r22, Y+49	; 0x31
    221e:	7a a9       	ldd	r23, Y+50	; 0x32
    2220:	8b a9       	ldd	r24, Y+51	; 0x33
    2222:	9c a9       	ldd	r25, Y+52	; 0x34
    2224:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	98 ab       	std	Y+48, r25	; 0x30
    222e:	8f a7       	std	Y+47, r24	; 0x2f
    2230:	8f a5       	ldd	r24, Y+47	; 0x2f
    2232:	98 a9       	ldd	r25, Y+48	; 0x30
    2234:	9c a7       	std	Y+44, r25	; 0x2c
    2236:	8b a7       	std	Y+43, r24	; 0x2b
    2238:	8b a5       	ldd	r24, Y+43	; 0x2b
    223a:	9c a5       	ldd	r25, Y+44	; 0x2c
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <LCD_vDisplayChar+0x106>
    2240:	9c a7       	std	Y+44, r25	; 0x2c
    2242:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CTRL_PORT, EN_PIN, HIGH);
    2244:	82 e0       	ldi	r24, 0x02	; 2
    2246:	62 e0       	ldi	r22, 0x02	; 2
    2248:	41 e0       	ldi	r20, 0x01	; 1
    224a:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vSetPinValue>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 e2       	ldi	r26, 0x20	; 32
    2254:	b1 e4       	ldi	r27, 0x41	; 65
    2256:	8f a3       	std	Y+39, r24	; 0x27
    2258:	98 a7       	std	Y+40, r25	; 0x28
    225a:	a9 a7       	std	Y+41, r26	; 0x29
    225c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225e:	6f a1       	ldd	r22, Y+39	; 0x27
    2260:	78 a5       	ldd	r23, Y+40	; 0x28
    2262:	89 a5       	ldd	r24, Y+41	; 0x29
    2264:	9a a5       	ldd	r25, Y+42	; 0x2a
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	4a ef       	ldi	r20, 0xFA	; 250
    226c:	54 e4       	ldi	r21, 0x44	; 68
    226e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8b a3       	std	Y+35, r24	; 0x23
    2278:	9c a3       	std	Y+36, r25	; 0x24
    227a:	ad a3       	std	Y+37, r26	; 0x25
    227c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    227e:	6b a1       	ldd	r22, Y+35	; 0x23
    2280:	7c a1       	ldd	r23, Y+36	; 0x24
    2282:	8d a1       	ldd	r24, Y+37	; 0x25
    2284:	9e a1       	ldd	r25, Y+38	; 0x26
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e8       	ldi	r20, 0x80	; 128
    228c:	5f e3       	ldi	r21, 0x3F	; 63
    228e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2292:	88 23       	and	r24, r24
    2294:	2c f4       	brge	.+10     	; 0x22a0 <LCD_vDisplayChar+0x16a>
		__ticks = 1;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	9a a3       	std	Y+34, r25	; 0x22
    229c:	89 a3       	std	Y+33, r24	; 0x21
    229e:	3f c0       	rjmp	.+126    	; 0x231e <LCD_vDisplayChar+0x1e8>
	else if (__tmp > 65535)
    22a0:	6b a1       	ldd	r22, Y+35	; 0x23
    22a2:	7c a1       	ldd	r23, Y+36	; 0x24
    22a4:	8d a1       	ldd	r24, Y+37	; 0x25
    22a6:	9e a1       	ldd	r25, Y+38	; 0x26
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	3f ef       	ldi	r19, 0xFF	; 255
    22ac:	4f e7       	ldi	r20, 0x7F	; 127
    22ae:	57 e4       	ldi	r21, 0x47	; 71
    22b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22b4:	18 16       	cp	r1, r24
    22b6:	4c f5       	brge	.+82     	; 0x230a <LCD_vDisplayChar+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b8:	6f a1       	ldd	r22, Y+39	; 0x27
    22ba:	78 a5       	ldd	r23, Y+40	; 0x28
    22bc:	89 a5       	ldd	r24, Y+41	; 0x29
    22be:	9a a5       	ldd	r25, Y+42	; 0x2a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e2       	ldi	r20, 0x20	; 32
    22c6:	51 e4       	ldi	r21, 0x41	; 65
    22c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	bc 01       	movw	r22, r24
    22d2:	cd 01       	movw	r24, r26
    22d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9a a3       	std	Y+34, r25	; 0x22
    22de:	89 a3       	std	Y+33, r24	; 0x21
    22e0:	0f c0       	rjmp	.+30     	; 0x2300 <LCD_vDisplayChar+0x1ca>
    22e2:	88 ec       	ldi	r24, 0xC8	; 200
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	98 a3       	std	Y+32, r25	; 0x20
    22e8:	8f 8f       	std	Y+31, r24	; 0x1f
    22ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ec:	98 a1       	ldd	r25, Y+32	; 0x20
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_vDisplayChar+0x1b8>
    22f2:	98 a3       	std	Y+32, r25	; 0x20
    22f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f6:	89 a1       	ldd	r24, Y+33	; 0x21
    22f8:	9a a1       	ldd	r25, Y+34	; 0x22
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	9a a3       	std	Y+34, r25	; 0x22
    22fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2300:	89 a1       	ldd	r24, Y+33	; 0x21
    2302:	9a a1       	ldd	r25, Y+34	; 0x22
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	69 f7       	brne	.-38     	; 0x22e2 <LCD_vDisplayChar+0x1ac>
    2308:	14 c0       	rjmp	.+40     	; 0x2332 <LCD_vDisplayChar+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230a:	6b a1       	ldd	r22, Y+35	; 0x23
    230c:	7c a1       	ldd	r23, Y+36	; 0x24
    230e:	8d a1       	ldd	r24, Y+37	; 0x25
    2310:	9e a1       	ldd	r25, Y+38	; 0x26
    2312:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9a a3       	std	Y+34, r25	; 0x22
    231c:	89 a3       	std	Y+33, r24	; 0x21
    231e:	89 a1       	ldd	r24, Y+33	; 0x21
    2320:	9a a1       	ldd	r25, Y+34	; 0x22
    2322:	9e 8f       	std	Y+30, r25	; 0x1e
    2324:	8d 8f       	std	Y+29, r24	; 0x1d
    2326:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2328:	9e 8d       	ldd	r25, Y+30	; 0x1e
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <LCD_vDisplayChar+0x1f4>
    232e:	9e 8f       	std	Y+30, r25	; 0x1e
    2330:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	DIO_vSetGroupValue(LCD_DATA_PORT, Copy_u8Character);
    2332:	83 e0       	ldi	r24, 0x03	; 3
    2334:	69 ad       	ldd	r22, Y+57	; 0x39
    2336:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_vSetGroupValue>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a0 e2       	ldi	r26, 0x20	; 32
    2340:	b1 e4       	ldi	r27, 0x41	; 65
    2342:	89 8f       	std	Y+25, r24	; 0x19
    2344:	9a 8f       	std	Y+26, r25	; 0x1a
    2346:	ab 8f       	std	Y+27, r26	; 0x1b
    2348:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234a:	69 8d       	ldd	r22, Y+25	; 0x19
    234c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    234e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2350:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	4a ef       	ldi	r20, 0xFA	; 250
    2358:	54 e4       	ldi	r21, 0x44	; 68
    235a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	8d 8b       	std	Y+21, r24	; 0x15
    2364:	9e 8b       	std	Y+22, r25	; 0x16
    2366:	af 8b       	std	Y+23, r26	; 0x17
    2368:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    236a:	6d 89       	ldd	r22, Y+21	; 0x15
    236c:	7e 89       	ldd	r23, Y+22	; 0x16
    236e:	8f 89       	ldd	r24, Y+23	; 0x17
    2370:	98 8d       	ldd	r25, Y+24	; 0x18
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e8       	ldi	r20, 0x80	; 128
    2378:	5f e3       	ldi	r21, 0x3F	; 63
    237a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    237e:	88 23       	and	r24, r24
    2380:	2c f4       	brge	.+10     	; 0x238c <LCD_vDisplayChar+0x256>
		__ticks = 1;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9c 8b       	std	Y+20, r25	; 0x14
    2388:	8b 8b       	std	Y+19, r24	; 0x13
    238a:	3f c0       	rjmp	.+126    	; 0x240a <LCD_vDisplayChar+0x2d4>
	else if (__tmp > 65535)
    238c:	6d 89       	ldd	r22, Y+21	; 0x15
    238e:	7e 89       	ldd	r23, Y+22	; 0x16
    2390:	8f 89       	ldd	r24, Y+23	; 0x17
    2392:	98 8d       	ldd	r25, Y+24	; 0x18
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	3f ef       	ldi	r19, 0xFF	; 255
    2398:	4f e7       	ldi	r20, 0x7F	; 127
    239a:	57 e4       	ldi	r21, 0x47	; 71
    239c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23a0:	18 16       	cp	r1, r24
    23a2:	4c f5       	brge	.+82     	; 0x23f6 <LCD_vDisplayChar+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a4:	69 8d       	ldd	r22, Y+25	; 0x19
    23a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e2       	ldi	r20, 0x20	; 32
    23b2:	51 e4       	ldi	r21, 0x41	; 65
    23b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	bc 01       	movw	r22, r24
    23be:	cd 01       	movw	r24, r26
    23c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	9c 8b       	std	Y+20, r25	; 0x14
    23ca:	8b 8b       	std	Y+19, r24	; 0x13
    23cc:	0f c0       	rjmp	.+30     	; 0x23ec <LCD_vDisplayChar+0x2b6>
    23ce:	88 ec       	ldi	r24, 0xC8	; 200
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	9a 8b       	std	Y+18, r25	; 0x12
    23d4:	89 8b       	std	Y+17, r24	; 0x11
    23d6:	89 89       	ldd	r24, Y+17	; 0x11
    23d8:	9a 89       	ldd	r25, Y+18	; 0x12
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <LCD_vDisplayChar+0x2a4>
    23de:	9a 8b       	std	Y+18, r25	; 0x12
    23e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e2:	8b 89       	ldd	r24, Y+19	; 0x13
    23e4:	9c 89       	ldd	r25, Y+20	; 0x14
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	9c 8b       	std	Y+20, r25	; 0x14
    23ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ec:	8b 89       	ldd	r24, Y+19	; 0x13
    23ee:	9c 89       	ldd	r25, Y+20	; 0x14
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	69 f7       	brne	.-38     	; 0x23ce <LCD_vDisplayChar+0x298>
    23f4:	14 c0       	rjmp	.+40     	; 0x241e <LCD_vDisplayChar+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f6:	6d 89       	ldd	r22, Y+21	; 0x15
    23f8:	7e 89       	ldd	r23, Y+22	; 0x16
    23fa:	8f 89       	ldd	r24, Y+23	; 0x17
    23fc:	98 8d       	ldd	r25, Y+24	; 0x18
    23fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	9c 8b       	std	Y+20, r25	; 0x14
    2408:	8b 8b       	std	Y+19, r24	; 0x13
    240a:	8b 89       	ldd	r24, Y+19	; 0x13
    240c:	9c 89       	ldd	r25, Y+20	; 0x14
    240e:	98 8b       	std	Y+16, r25	; 0x10
    2410:	8f 87       	std	Y+15, r24	; 0x0f
    2412:	8f 85       	ldd	r24, Y+15	; 0x0f
    2414:	98 89       	ldd	r25, Y+16	; 0x10
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <LCD_vDisplayChar+0x2e0>
    241a:	98 8b       	std	Y+16, r25	; 0x10
    241c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_vSetPinValue(LCD_CTRL_PORT, EN_PIN, LOW);
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	62 e0       	ldi	r22, 0x02	; 2
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vSetPinValue>
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	a0 e2       	ldi	r26, 0x20	; 32
    242e:	b1 e4       	ldi	r27, 0x41	; 65
    2430:	8b 87       	std	Y+11, r24	; 0x0b
    2432:	9c 87       	std	Y+12, r25	; 0x0c
    2434:	ad 87       	std	Y+13, r26	; 0x0d
    2436:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2438:	6b 85       	ldd	r22, Y+11	; 0x0b
    243a:	7c 85       	ldd	r23, Y+12	; 0x0c
    243c:	8d 85       	ldd	r24, Y+13	; 0x0d
    243e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	4a ef       	ldi	r20, 0xFA	; 250
    2446:	54 e4       	ldi	r21, 0x44	; 68
    2448:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	8f 83       	std	Y+7, r24	; 0x07
    2452:	98 87       	std	Y+8, r25	; 0x08
    2454:	a9 87       	std	Y+9, r26	; 0x09
    2456:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2458:	6f 81       	ldd	r22, Y+7	; 0x07
    245a:	78 85       	ldd	r23, Y+8	; 0x08
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e8       	ldi	r20, 0x80	; 128
    2466:	5f e3       	ldi	r21, 0x3F	; 63
    2468:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    246c:	88 23       	and	r24, r24
    246e:	2c f4       	brge	.+10     	; 0x247a <LCD_vDisplayChar+0x344>
		__ticks = 1;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	9e 83       	std	Y+6, r25	; 0x06
    2476:	8d 83       	std	Y+5, r24	; 0x05
    2478:	3f c0       	rjmp	.+126    	; 0x24f8 <LCD_vDisplayChar+0x3c2>
	else if (__tmp > 65535)
    247a:	6f 81       	ldd	r22, Y+7	; 0x07
    247c:	78 85       	ldd	r23, Y+8	; 0x08
    247e:	89 85       	ldd	r24, Y+9	; 0x09
    2480:	9a 85       	ldd	r25, Y+10	; 0x0a
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	3f ef       	ldi	r19, 0xFF	; 255
    2486:	4f e7       	ldi	r20, 0x7F	; 127
    2488:	57 e4       	ldi	r21, 0x47	; 71
    248a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    248e:	18 16       	cp	r1, r24
    2490:	4c f5       	brge	.+82     	; 0x24e4 <LCD_vDisplayChar+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2492:	6b 85       	ldd	r22, Y+11	; 0x0b
    2494:	7c 85       	ldd	r23, Y+12	; 0x0c
    2496:	8d 85       	ldd	r24, Y+13	; 0x0d
    2498:	9e 85       	ldd	r25, Y+14	; 0x0e
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e2       	ldi	r20, 0x20	; 32
    24a0:	51 e4       	ldi	r21, 0x41	; 65
    24a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	bc 01       	movw	r22, r24
    24ac:	cd 01       	movw	r24, r26
    24ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	8d 83       	std	Y+5, r24	; 0x05
    24ba:	0f c0       	rjmp	.+30     	; 0x24da <LCD_vDisplayChar+0x3a4>
    24bc:	88 ec       	ldi	r24, 0xC8	; 200
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	8b 83       	std	Y+3, r24	; 0x03
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	9c 81       	ldd	r25, Y+4	; 0x04
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <LCD_vDisplayChar+0x392>
    24cc:	9c 83       	std	Y+4, r25	; 0x04
    24ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	9e 81       	ldd	r25, Y+6	; 0x06
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	69 f7       	brne	.-38     	; 0x24bc <LCD_vDisplayChar+0x386>
    24e2:	14 c0       	rjmp	.+40     	; 0x250c <LCD_vDisplayChar+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e4:	6f 81       	ldd	r22, Y+7	; 0x07
    24e6:	78 85       	ldd	r23, Y+8	; 0x08
    24e8:	89 85       	ldd	r24, Y+9	; 0x09
    24ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9e 83       	std	Y+6, r25	; 0x06
    24f6:	8d 83       	std	Y+5, r24	; 0x05
    24f8:	8d 81       	ldd	r24, Y+5	; 0x05
    24fa:	9e 81       	ldd	r25, Y+6	; 0x06
    24fc:	9a 83       	std	Y+2, r25	; 0x02
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <LCD_vDisplayChar+0x3ce>
    2508:	9a 83       	std	Y+2, r25	; 0x02
    250a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    250c:	e9 96       	adiw	r28, 0x39	; 57
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <LCD_vDisplayString>:

//Function to display a string on the LCD
void LCD_vDisplayString(u8 *Copy_u8String){
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	00 d0       	rcall	.+0      	; 0x2524 <LCD_vDisplayString+0x6>
    2524:	00 d0       	rcall	.+0      	; 0x2526 <LCD_vDisplayString+0x8>
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	9c 83       	std	Y+4, r25	; 0x04
    252c:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;Copy_u8String[i]!='\0';i++)
    252e:	1a 82       	std	Y+2, r1	; 0x02
    2530:	19 82       	std	Y+1, r1	; 0x01
    2532:	0f c0       	rjmp	.+30     	; 0x2552 <LCD_vDisplayString+0x34>
	{
		LCD_vDisplayChar(Copy_u8String[i]);
    2534:	29 81       	ldd	r18, Y+1	; 0x01
    2536:	3a 81       	ldd	r19, Y+2	; 0x02
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	fc 01       	movw	r30, r24
    253e:	e2 0f       	add	r30, r18
    2540:	f3 1f       	adc	r31, r19
    2542:	80 81       	ld	r24, Z
    2544:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vDisplayChar>
	_delay_ms(10);
}

//Function to display a string on the LCD
void LCD_vDisplayString(u8 *Copy_u8String){
	for(int i=0;Copy_u8String[i]!='\0';i++)
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
    254c:	01 96       	adiw	r24, 0x01	; 1
    254e:	9a 83       	std	Y+2, r25	; 0x02
    2550:	89 83       	std	Y+1, r24	; 0x01
    2552:	29 81       	ldd	r18, Y+1	; 0x01
    2554:	3a 81       	ldd	r19, Y+2	; 0x02
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	9c 81       	ldd	r25, Y+4	; 0x04
    255a:	fc 01       	movw	r30, r24
    255c:	e2 0f       	add	r30, r18
    255e:	f3 1f       	adc	r31, r19
    2560:	80 81       	ld	r24, Z
    2562:	88 23       	and	r24, r24
    2564:	39 f7       	brne	.-50     	; 0x2534 <LCD_vDisplayString+0x16>
	{
		LCD_vDisplayChar(Copy_u8String[i]);
	}
}
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <LCD_vDisplayNumber>:

//Function to display a number on the LCD
void LCD_vDisplayNumber(u16 Copy_u8Number){
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	2b 97       	sbiw	r28, 0x0b	; 11
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	9b 87       	std	Y+11, r25	; 0x0b
    258a:	8a 87       	std	Y+10, r24	; 0x0a
	if(Copy_u8Number == 0)
    258c:	8a 85       	ldd	r24, Y+10	; 0x0a
    258e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	21 f4       	brne	.+8      	; 0x259c <LCD_vDisplayNumber+0x28>
	{
		LCD_vDisplayChar('0');
    2594:	80 e3       	ldi	r24, 0x30	; 48
    2596:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vDisplayChar>
    259a:	40 c0       	rjmp	.+128    	; 0x261c <LCD_vDisplayNumber+0xa8>
	}
	else
	{
		u8 Local_u8TempNumber;
		u8 Array[5];
		u8 j=0;
    259c:	1b 82       	std	Y+3, r1	; 0x03
    259e:	1f c0       	rjmp	.+62     	; 0x25de <LCD_vDisplayNumber+0x6a>
		while(Copy_u8Number != 0)
		{
			Local_u8TempNumber = Copy_u8Number%10;
    25a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25a4:	2a e0       	ldi	r18, 0x0A	; 10
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	b9 01       	movw	r22, r18
    25aa:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodhi4>
    25ae:	8c 83       	std	Y+4, r24	; 0x04
			Copy_u8Number /= 10;
    25b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25b4:	2a e0       	ldi	r18, 0x0A	; 10
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	b9 01       	movw	r22, r18
    25ba:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodhi4>
    25be:	cb 01       	movw	r24, r22
    25c0:	9b 87       	std	Y+11, r25	; 0x0b
    25c2:	8a 87       	std	Y+10, r24	; 0x0a
			Array[j] = Local_u8TempNumber;
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	ce 01       	movw	r24, r28
    25cc:	05 96       	adiw	r24, 0x05	; 5
    25ce:	fc 01       	movw	r30, r24
    25d0:	e2 0f       	add	r30, r18
    25d2:	f3 1f       	adc	r31, r19
    25d4:	8c 81       	ldd	r24, Y+4	; 0x04
    25d6:	80 83       	st	Z, r24
			j++;
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	8b 83       	std	Y+3, r24	; 0x03
	else
	{
		u8 Local_u8TempNumber;
		u8 Array[5];
		u8 j=0;
		while(Copy_u8Number != 0)
    25de:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	e9 f6       	brne	.-70     	; 0x25a0 <LCD_vDisplayNumber+0x2c>
			Local_u8TempNumber = Copy_u8Number%10;
			Copy_u8Number /= 10;
			Array[j] = Local_u8TempNumber;
			j++;
		}
		for(int i=j-1;i>=0;i--)
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	88 2f       	mov	r24, r24
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	9a 83       	std	Y+2, r25	; 0x02
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	10 c0       	rjmp	.+32     	; 0x2614 <LCD_vDisplayNumber+0xa0>
		{
			LCD_vDisplayChar(Array[i]+48);
    25f4:	29 81       	ldd	r18, Y+1	; 0x01
    25f6:	3a 81       	ldd	r19, Y+2	; 0x02
    25f8:	ce 01       	movw	r24, r28
    25fa:	05 96       	adiw	r24, 0x05	; 5
    25fc:	fc 01       	movw	r30, r24
    25fe:	e2 0f       	add	r30, r18
    2600:	f3 1f       	adc	r31, r19
    2602:	80 81       	ld	r24, Z
    2604:	80 5d       	subi	r24, 0xD0	; 208
    2606:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vDisplayChar>
			Local_u8TempNumber = Copy_u8Number%10;
			Copy_u8Number /= 10;
			Array[j] = Local_u8TempNumber;
			j++;
		}
		for(int i=j-1;i>=0;i--)
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	9a 81       	ldd	r25, Y+2	; 0x02
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	99 23       	and	r25, r25
    261a:	64 f7       	brge	.-40     	; 0x25f4 <LCD_vDisplayNumber+0x80>
		{
			LCD_vDisplayChar(Array[i]+48);
		}
	}
}
    261c:	2b 96       	adiw	r28, 0x0b	; 11
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <LCD_vGoToRowCol>:

//Function to change cursor location
void LCD_vGoToRowCol(u8 Copy_u8RowNumber, u8 Copy_u8ColNumber){
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	00 d0       	rcall	.+0      	; 0x2634 <LCD_vGoToRowCol+0x6>
    2634:	00 d0       	rcall	.+0      	; 0x2636 <LCD_vGoToRowCol+0x8>
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8ColNumber >= 0) || (Copy_u8ColNumber <= 0))
	{
		switch(Copy_u8RowNumber)
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	28 2f       	mov	r18, r24
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	3c 83       	std	Y+4, r19	; 0x04
    2646:	2b 83       	std	Y+3, r18	; 0x03
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	91 05       	cpc	r25, r1
    2650:	31 f0       	breq	.+12     	; 0x265e <LCD_vGoToRowCol+0x30>
    2652:	2b 81       	ldd	r18, Y+3	; 0x03
    2654:	3c 81       	ldd	r19, Y+4	; 0x04
    2656:	22 30       	cpi	r18, 0x02	; 2
    2658:	31 05       	cpc	r19, r1
    265a:	31 f0       	breq	.+12     	; 0x2668 <LCD_vGoToRowCol+0x3a>
    265c:	09 c0       	rjmp	.+18     	; 0x2670 <LCD_vGoToRowCol+0x42>
		{
		case ROW_ONE: LCD_vSendCmd(SET_CURSOR_LOCATION | (ROW_ONE_ADD | Copy_u8ColNumber)); break;
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	80 68       	ori	r24, 0x80	; 128
    2662:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vSendCmd>
    2666:	04 c0       	rjmp	.+8      	; 0x2670 <LCD_vGoToRowCol+0x42>
		case ROW_TWO: LCD_vSendCmd(SET_CURSOR_LOCATION | (ROW_TWO_ADD | Copy_u8ColNumber)); break;
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	80 6c       	ori	r24, 0xC0	; 192
    266c:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vSendCmd>
	}
	else
	{
		LCD_vDisplayString("Error, column number exceeded 15");
	}
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <LCD_vShiftDisplay>:

//Function to shift display right or left
void LCD_vShiftDisplay(u8 Copy_u8ShiftDirection, u8 Copy_u8ShiftIterations){
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	a4 97       	sbiw	r28, 0x24	; 36
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	89 a3       	std	Y+33, r24	; 0x21
    2694:	6a a3       	std	Y+34, r22	; 0x22
	switch(Copy_u8ShiftDirection)
    2696:	89 a1       	ldd	r24, Y+33	; 0x21
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	3c a3       	std	Y+36, r19	; 0x24
    269e:	2b a3       	std	Y+35, r18	; 0x23
    26a0:	8b a1       	ldd	r24, Y+35	; 0x23
    26a2:	9c a1       	ldd	r25, Y+36	; 0x24
    26a4:	81 30       	cpi	r24, 0x01	; 1
    26a6:	91 05       	cpc	r25, r1
    26a8:	09 f4       	brne	.+2      	; 0x26ac <LCD_vShiftDisplay+0x2e>
    26aa:	8d c0       	rjmp	.+282    	; 0x27c6 <LCD_vShiftDisplay+0x148>
    26ac:	2b a1       	ldd	r18, Y+35	; 0x23
    26ae:	3c a1       	ldd	r19, Y+36	; 0x24
    26b0:	22 30       	cpi	r18, 0x02	; 2
    26b2:	31 05       	cpc	r19, r1
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <LCD_vShiftDisplay+0x3a>
    26b6:	0d c1       	rjmp	.+538    	; 0x28d2 <LCD_vShiftDisplay+0x254>
	{
	case LEFT:
	for(int i=0;i<Copy_u8ShiftIterations;i++)
    26b8:	18 a2       	std	Y+32, r1	; 0x20
    26ba:	1f 8e       	std	Y+31, r1	; 0x1f
    26bc:	7a c0       	rjmp	.+244    	; 0x27b2 <LCD_vShiftDisplay+0x134>
	{
		LCD_vSendCmd(SHIFT_LEFT);
    26be:	88 e1       	ldi	r24, 0x18	; 24
    26c0:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vSendCmd>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a8 ec       	ldi	r26, 0xC8	; 200
    26ca:	b2 e4       	ldi	r27, 0x42	; 66
    26cc:	89 8f       	std	Y+25, r24	; 0x19
    26ce:	9a 8f       	std	Y+26, r25	; 0x1a
    26d0:	ab 8f       	std	Y+27, r26	; 0x1b
    26d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d4:	69 8d       	ldd	r22, Y+25	; 0x19
    26d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a ef       	ldi	r20, 0xFA	; 250
    26e2:	54 e4       	ldi	r21, 0x44	; 68
    26e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8d 8b       	std	Y+21, r24	; 0x15
    26ee:	9e 8b       	std	Y+22, r25	; 0x16
    26f0:	af 8b       	std	Y+23, r26	; 0x17
    26f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26f4:	6d 89       	ldd	r22, Y+21	; 0x15
    26f6:	7e 89       	ldd	r23, Y+22	; 0x16
    26f8:	8f 89       	ldd	r24, Y+23	; 0x17
    26fa:	98 8d       	ldd	r25, Y+24	; 0x18
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	2c f4       	brge	.+10     	; 0x2716 <LCD_vShiftDisplay+0x98>
		__ticks = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9c 8b       	std	Y+20, r25	; 0x14
    2712:	8b 8b       	std	Y+19, r24	; 0x13
    2714:	3f c0       	rjmp	.+126    	; 0x2794 <LCD_vShiftDisplay+0x116>
	else if (__tmp > 65535)
    2716:	6d 89       	ldd	r22, Y+21	; 0x15
    2718:	7e 89       	ldd	r23, Y+22	; 0x16
    271a:	8f 89       	ldd	r24, Y+23	; 0x17
    271c:	98 8d       	ldd	r25, Y+24	; 0x18
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	3f ef       	ldi	r19, 0xFF	; 255
    2722:	4f e7       	ldi	r20, 0x7F	; 127
    2724:	57 e4       	ldi	r21, 0x47	; 71
    2726:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    272a:	18 16       	cp	r1, r24
    272c:	4c f5       	brge	.+82     	; 0x2780 <LCD_vShiftDisplay+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272e:	69 8d       	ldd	r22, Y+25	; 0x19
    2730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e2       	ldi	r20, 0x20	; 32
    273c:	51 e4       	ldi	r21, 0x41	; 65
    273e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9c 8b       	std	Y+20, r25	; 0x14
    2754:	8b 8b       	std	Y+19, r24	; 0x13
    2756:	0f c0       	rjmp	.+30     	; 0x2776 <LCD_vShiftDisplay+0xf8>
    2758:	88 ec       	ldi	r24, 0xC8	; 200
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9a 8b       	std	Y+18, r25	; 0x12
    275e:	89 8b       	std	Y+17, r24	; 0x11
    2760:	89 89       	ldd	r24, Y+17	; 0x11
    2762:	9a 89       	ldd	r25, Y+18	; 0x12
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <LCD_vShiftDisplay+0xe6>
    2768:	9a 8b       	std	Y+18, r25	; 0x12
    276a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276c:	8b 89       	ldd	r24, Y+19	; 0x13
    276e:	9c 89       	ldd	r25, Y+20	; 0x14
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	9c 8b       	std	Y+20, r25	; 0x14
    2774:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2776:	8b 89       	ldd	r24, Y+19	; 0x13
    2778:	9c 89       	ldd	r25, Y+20	; 0x14
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	69 f7       	brne	.-38     	; 0x2758 <LCD_vShiftDisplay+0xda>
    277e:	14 c0       	rjmp	.+40     	; 0x27a8 <LCD_vShiftDisplay+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2780:	6d 89       	ldd	r22, Y+21	; 0x15
    2782:	7e 89       	ldd	r23, Y+22	; 0x16
    2784:	8f 89       	ldd	r24, Y+23	; 0x17
    2786:	98 8d       	ldd	r25, Y+24	; 0x18
    2788:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9c 8b       	std	Y+20, r25	; 0x14
    2792:	8b 8b       	std	Y+19, r24	; 0x13
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	98 8b       	std	Y+16, r25	; 0x10
    279a:	8f 87       	std	Y+15, r24	; 0x0f
    279c:	8f 85       	ldd	r24, Y+15	; 0x0f
    279e:	98 89       	ldd	r25, Y+16	; 0x10
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <LCD_vShiftDisplay+0x122>
    27a4:	98 8b       	std	Y+16, r25	; 0x10
    27a6:	8f 87       	std	Y+15, r24	; 0x0f
//Function to shift display right or left
void LCD_vShiftDisplay(u8 Copy_u8ShiftDirection, u8 Copy_u8ShiftIterations){
	switch(Copy_u8ShiftDirection)
	{
	case LEFT:
	for(int i=0;i<Copy_u8ShiftIterations;i++)
    27a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27aa:	98 a1       	ldd	r25, Y+32	; 0x20
    27ac:	01 96       	adiw	r24, 0x01	; 1
    27ae:	98 a3       	std	Y+32, r25	; 0x20
    27b0:	8f 8f       	std	Y+31, r24	; 0x1f
    27b2:	8a a1       	ldd	r24, Y+34	; 0x22
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27ba:	98 a1       	ldd	r25, Y+32	; 0x20
    27bc:	82 17       	cp	r24, r18
    27be:	93 07       	cpc	r25, r19
    27c0:	0c f4       	brge	.+2      	; 0x27c4 <LCD_vShiftDisplay+0x146>
    27c2:	7d cf       	rjmp	.-262    	; 0x26be <LCD_vShiftDisplay+0x40>
    27c4:	86 c0       	rjmp	.+268    	; 0x28d2 <LCD_vShiftDisplay+0x254>
		LCD_vSendCmd(SHIFT_LEFT);
		_delay_ms(100);
	}
	break;
	case RIGHT:
	for(int i=0;i<Copy_u8ShiftIterations;i++)
    27c6:	1e 8e       	std	Y+30, r1	; 0x1e
    27c8:	1d 8e       	std	Y+29, r1	; 0x1d
    27ca:	7a c0       	rjmp	.+244    	; 0x28c0 <LCD_vShiftDisplay+0x242>
	{
		LCD_vSendCmd(SHIFT_RIGHT);
    27cc:	8c e1       	ldi	r24, 0x1C	; 28
    27ce:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vSendCmd>
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	a8 ec       	ldi	r26, 0xC8	; 200
    27d8:	b2 e4       	ldi	r27, 0x42	; 66
    27da:	8b 87       	std	Y+11, r24	; 0x0b
    27dc:	9c 87       	std	Y+12, r25	; 0x0c
    27de:	ad 87       	std	Y+13, r26	; 0x0d
    27e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4a ef       	ldi	r20, 0xFA	; 250
    27f0:	54 e4       	ldi	r21, 0x44	; 68
    27f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	8f 83       	std	Y+7, r24	; 0x07
    27fc:	98 87       	std	Y+8, r25	; 0x08
    27fe:	a9 87       	std	Y+9, r26	; 0x09
    2800:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2802:	6f 81       	ldd	r22, Y+7	; 0x07
    2804:	78 85       	ldd	r23, Y+8	; 0x08
    2806:	89 85       	ldd	r24, Y+9	; 0x09
    2808:	9a 85       	ldd	r25, Y+10	; 0x0a
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e8       	ldi	r20, 0x80	; 128
    2810:	5f e3       	ldi	r21, 0x3F	; 63
    2812:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2816:	88 23       	and	r24, r24
    2818:	2c f4       	brge	.+10     	; 0x2824 <LCD_vShiftDisplay+0x1a6>
		__ticks = 1;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
    2822:	3f c0       	rjmp	.+126    	; 0x28a2 <LCD_vShiftDisplay+0x224>
	else if (__tmp > 65535)
    2824:	6f 81       	ldd	r22, Y+7	; 0x07
    2826:	78 85       	ldd	r23, Y+8	; 0x08
    2828:	89 85       	ldd	r24, Y+9	; 0x09
    282a:	9a 85       	ldd	r25, Y+10	; 0x0a
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	3f ef       	ldi	r19, 0xFF	; 255
    2830:	4f e7       	ldi	r20, 0x7F	; 127
    2832:	57 e4       	ldi	r21, 0x47	; 71
    2834:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2838:	18 16       	cp	r1, r24
    283a:	4c f5       	brge	.+82     	; 0x288e <LCD_vShiftDisplay+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283c:	6b 85       	ldd	r22, Y+11	; 0x0b
    283e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2840:	8d 85       	ldd	r24, Y+13	; 0x0d
    2842:	9e 85       	ldd	r25, Y+14	; 0x0e
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e2       	ldi	r20, 0x20	; 32
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
    2864:	0f c0       	rjmp	.+30     	; 0x2884 <LCD_vShiftDisplay+0x206>
    2866:	88 ec       	ldi	r24, 0xC8	; 200
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	9c 83       	std	Y+4, r25	; 0x04
    286c:	8b 83       	std	Y+3, r24	; 0x03
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	9c 81       	ldd	r25, Y+4	; 0x04
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <LCD_vShiftDisplay+0x1f4>
    2876:	9c 83       	std	Y+4, r25	; 0x04
    2878:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    287a:	8d 81       	ldd	r24, Y+5	; 0x05
    287c:	9e 81       	ldd	r25, Y+6	; 0x06
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	9e 81       	ldd	r25, Y+6	; 0x06
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	69 f7       	brne	.-38     	; 0x2866 <LCD_vShiftDisplay+0x1e8>
    288c:	14 c0       	rjmp	.+40     	; 0x28b6 <LCD_vShiftDisplay+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288e:	6f 81       	ldd	r22, Y+7	; 0x07
    2890:	78 85       	ldd	r23, Y+8	; 0x08
    2892:	89 85       	ldd	r24, Y+9	; 0x09
    2894:	9a 85       	ldd	r25, Y+10	; 0x0a
    2896:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
    28a2:	8d 81       	ldd	r24, Y+5	; 0x05
    28a4:	9e 81       	ldd	r25, Y+6	; 0x06
    28a6:	9a 83       	std	Y+2, r25	; 0x02
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <LCD_vShiftDisplay+0x230>
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	89 83       	std	Y+1, r24	; 0x01
		LCD_vSendCmd(SHIFT_LEFT);
		_delay_ms(100);
	}
	break;
	case RIGHT:
	for(int i=0;i<Copy_u8ShiftIterations;i++)
    28b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	9e 8f       	std	Y+30, r25	; 0x1e
    28be:	8d 8f       	std	Y+29, r24	; 0x1d
    28c0:	8a a1       	ldd	r24, Y+34	; 0x22
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28ca:	82 17       	cp	r24, r18
    28cc:	93 07       	cpc	r25, r19
    28ce:	0c f4       	brge	.+2      	; 0x28d2 <LCD_vShiftDisplay+0x254>
    28d0:	7d cf       	rjmp	.-262    	; 0x27cc <LCD_vShiftDisplay+0x14e>
		LCD_vSendCmd(SHIFT_RIGHT);
		_delay_ms(100);
	}
	break;
	}
}
    28d2:	a4 96       	adiw	r28, 0x24	; 36
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	cd bf       	out	0x3d, r28	; 61
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <LCD_vStoreSpecChar>:

//Function to create and print special character on LCD
void LCD_vStoreSpecChar(u8 *Copy_u8ASpecChar, u8 Copy_u8CGRAM_Location)
{
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	63 97       	sbiw	r28, 0x13	; 19
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	9a 8b       	std	Y+18, r25	; 0x12
    28fa:	89 8b       	std	Y+17, r24	; 0x11
    28fc:	6b 8b       	std	Y+19, r22	; 0x13
	LCD_vSendCmd(SET_CGRAM_LOCATION | (Copy_u8CGRAM_Location*8));
    28fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2900:	88 2f       	mov	r24, r24
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	88 0f       	add	r24, r24
    290a:	99 1f       	adc	r25, r25
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	80 64       	ori	r24, 0x40	; 64
    2912:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <LCD_vSendCmd>
	for(int i=0; i<8;i++)
    2916:	18 8a       	std	Y+16, r1	; 0x10
    2918:	1f 86       	std	Y+15, r1	; 0x0f
    291a:	0f c0       	rjmp	.+30     	; 0x293a <LCD_vStoreSpecChar+0x56>
	{
		LCD_vDisplayChar(Copy_u8ASpecChar[i]);
    291c:	2f 85       	ldd	r18, Y+15	; 0x0f
    291e:	38 89       	ldd	r19, Y+16	; 0x10
    2920:	89 89       	ldd	r24, Y+17	; 0x11
    2922:	9a 89       	ldd	r25, Y+18	; 0x12
    2924:	fc 01       	movw	r30, r24
    2926:	e2 0f       	add	r30, r18
    2928:	f3 1f       	adc	r31, r19
    292a:	80 81       	ld	r24, Z
    292c:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vDisplayChar>

//Function to create and print special character on LCD
void LCD_vStoreSpecChar(u8 *Copy_u8ASpecChar, u8 Copy_u8CGRAM_Location)
{
	LCD_vSendCmd(SET_CGRAM_LOCATION | (Copy_u8CGRAM_Location*8));
	for(int i=0; i<8;i++)
    2930:	8f 85       	ldd	r24, Y+15	; 0x0f
    2932:	98 89       	ldd	r25, Y+16	; 0x10
    2934:	01 96       	adiw	r24, 0x01	; 1
    2936:	98 8b       	std	Y+16, r25	; 0x10
    2938:	8f 87       	std	Y+15, r24	; 0x0f
    293a:	8f 85       	ldd	r24, Y+15	; 0x0f
    293c:	98 89       	ldd	r25, Y+16	; 0x10
    293e:	88 30       	cpi	r24, 0x08	; 8
    2940:	91 05       	cpc	r25, r1
    2942:	64 f3       	brlt	.-40     	; 0x291c <LCD_vStoreSpecChar+0x38>
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	a8 ec       	ldi	r26, 0xC8	; 200
    294a:	b2 e4       	ldi	r27, 0x42	; 66
    294c:	8b 87       	std	Y+11, r24	; 0x0b
    294e:	9c 87       	std	Y+12, r25	; 0x0c
    2950:	ad 87       	std	Y+13, r26	; 0x0d
    2952:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2954:	6b 85       	ldd	r22, Y+11	; 0x0b
    2956:	7c 85       	ldd	r23, Y+12	; 0x0c
    2958:	8d 85       	ldd	r24, Y+13	; 0x0d
    295a:	9e 85       	ldd	r25, Y+14	; 0x0e
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	4a ef       	ldi	r20, 0xFA	; 250
    2962:	54 e4       	ldi	r21, 0x44	; 68
    2964:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	8f 83       	std	Y+7, r24	; 0x07
    296e:	98 87       	std	Y+8, r25	; 0x08
    2970:	a9 87       	std	Y+9, r26	; 0x09
    2972:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2974:	6f 81       	ldd	r22, Y+7	; 0x07
    2976:	78 85       	ldd	r23, Y+8	; 0x08
    2978:	89 85       	ldd	r24, Y+9	; 0x09
    297a:	9a 85       	ldd	r25, Y+10	; 0x0a
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e8       	ldi	r20, 0x80	; 128
    2982:	5f e3       	ldi	r21, 0x3F	; 63
    2984:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2988:	88 23       	and	r24, r24
    298a:	2c f4       	brge	.+10     	; 0x2996 <LCD_vStoreSpecChar+0xb2>
		__ticks = 1;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9e 83       	std	Y+6, r25	; 0x06
    2992:	8d 83       	std	Y+5, r24	; 0x05
    2994:	3f c0       	rjmp	.+126    	; 0x2a14 <LCD_vStoreSpecChar+0x130>
	else if (__tmp > 65535)
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	3f ef       	ldi	r19, 0xFF	; 255
    29a2:	4f e7       	ldi	r20, 0x7F	; 127
    29a4:	57 e4       	ldi	r21, 0x47	; 71
    29a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29aa:	18 16       	cp	r1, r24
    29ac:	4c f5       	brge	.+82     	; 0x2a00 <LCD_vStoreSpecChar+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e2       	ldi	r20, 0x20	; 32
    29bc:	51 e4       	ldi	r21, 0x41	; 65
    29be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	8d 83       	std	Y+5, r24	; 0x05
    29d6:	0f c0       	rjmp	.+30     	; 0x29f6 <LCD_vStoreSpecChar+0x112>
    29d8:	88 ec       	ldi	r24, 0xC8	; 200
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9c 83       	std	Y+4, r25	; 0x04
    29de:	8b 83       	std	Y+3, r24	; 0x03
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <LCD_vStoreSpecChar+0x100>
    29e8:	9c 83       	std	Y+4, r25	; 0x04
    29ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f6:	8d 81       	ldd	r24, Y+5	; 0x05
    29f8:	9e 81       	ldd	r25, Y+6	; 0x06
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	69 f7       	brne	.-38     	; 0x29d8 <LCD_vStoreSpecChar+0xf4>
    29fe:	14 c0       	rjmp	.+40     	; 0x2a28 <LCD_vStoreSpecChar+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a00:	6f 81       	ldd	r22, Y+7	; 0x07
    2a02:	78 85       	ldd	r23, Y+8	; 0x08
    2a04:	89 85       	ldd	r24, Y+9	; 0x09
    2a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	9e 83       	std	Y+6, r25	; 0x06
    2a12:	8d 83       	std	Y+5, r24	; 0x05
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <LCD_vStoreSpecChar+0x13c>
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
		LCD_vDisplayChar(Copy_u8ASpecChar[i]);
		//LCD_vSendCmd(0b01000000 | i);
	}
	_delay_ms(100);

}
    2a28:	63 96       	adiw	r28, 0x13	; 19
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <KPD_vInitKeypad>:

const u8 GLOBAL_u8AcolNumber [4] = {KPD_C1, KPD_C2, KPD_C3, KPD_C4};


//This function will initialize the keypad ports
void KPD_vInitKeypad(void){
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
	DIO_vSet4LSBDir(KPD_PORT, OUTPUT);
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	61 e0       	ldi	r22, 0x01	; 1
    2a46:	0e 94 c6 09 	call	0x138c	; 0x138c <DIO_vSet4LSBDir>
	DIO_vSet4LSBValue(KPD_PORT, HIGH);
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_vSet4LSBValue>
	DIO_vSet4MSBDir(KPD_PORT, INPUT);
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	60 e0       	ldi	r22, 0x00	; 0
    2a56:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <DIO_vSet4MSBDir>
	DIO_vSet4MSBValue(KPD_PORT, HIGH);
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	61 e0       	ldi	r22, 0x01	; 1
    2a5e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <DIO_vSet4MSBValue>


}
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <KPD_vGetPressedKey>:


//This function shall be responsible for getting the pressed key from keypad
void KPD_vGetPressedKey(u8 *Copy_u8PressedKey){
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	64 97       	sbiw	r28, 0x14	; 20
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	9c 8b       	std	Y+20, r25	; 0x14
    2a7e:	8b 8b       	std	Y+19, r24	; 0x13
	u8 LOCAL_u8RowCounter, LOCAL_u8ColCounter, LOCAL_u8PinValue, LOCAL_u8Flag=0;
    2a80:	1f 86       	std	Y+15, r1	; 0x0f
	for(LOCAL_u8RowCounter=0;LOCAL_u8RowCounter<4;LOCAL_u8RowCounter++)
    2a82:	1a 8a       	std	Y+18, r1	; 0x12
    2a84:	cf c0       	rjmp	.+414    	; 0x2c24 <KPD_vGetPressedKey+0x1bc>
	{
		DIO_vSetPinValue(KPD_PORT, GLOBAL_u8ArowNumber[LOCAL_u8RowCounter], LOW);
    2a86:	8a 89       	ldd	r24, Y+18	; 0x12
    2a88:	88 2f       	mov	r24, r24
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	e8 58       	subi	r30, 0x88	; 136
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	90 81       	ld	r25, Z
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	69 2f       	mov	r22, r25
    2a98:	40 e0       	ldi	r20, 0x00	; 0
    2a9a:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vSetPinValue>
		for(LOCAL_u8ColCounter=0;LOCAL_u8ColCounter<4;LOCAL_u8ColCounter++)
    2a9e:	19 8a       	std	Y+17, r1	; 0x11
    2aa0:	ab c0       	rjmp	.+342    	; 0x2bf8 <KPD_vGetPressedKey+0x190>
		{
			LOCAL_u8PinValue = DIO_u8ReadPinValue(KPD_PORT, GLOBAL_u8AcolNumber[LOCAL_u8ColCounter]);
    2aa2:	89 89       	ldd	r24, Y+17	; 0x11
    2aa4:	88 2f       	mov	r24, r24
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	e4 58       	subi	r30, 0x84	; 132
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	90 81       	ld	r25, Z
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	69 2f       	mov	r22, r25
    2ab4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8ReadPinValue>
    2ab8:	88 8b       	std	Y+16, r24	; 0x10
			if (LOCAL_u8PinValue == BTN_PRESSED)
    2aba:	88 89       	ldd	r24, Y+16	; 0x10
    2abc:	88 23       	and	r24, r24
    2abe:	09 f0       	breq	.+2      	; 0x2ac2 <KPD_vGetPressedKey+0x5a>
    2ac0:	98 c0       	rjmp	.+304    	; 0x2bf2 <KPD_vGetPressedKey+0x18a>
    2ac2:	72 c0       	rjmp	.+228    	; 0x2ba8 <KPD_vGetPressedKey+0x140>
			{
				while(DIO_u8ReadPinValue(KPD_PORT, GLOBAL_u8AcolNumber[LOCAL_u8ColCounter]) == BTN_PRESSED)
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a8 e4       	ldi	r26, 0x48	; 72
    2aca:	b2 e4       	ldi	r27, 0x42	; 66
    2acc:	8b 87       	std	Y+11, r24	; 0x0b
    2ace:	9c 87       	std	Y+12, r25	; 0x0c
    2ad0:	ad 87       	std	Y+13, r26	; 0x0d
    2ad2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a ef       	ldi	r20, 0xFA	; 250
    2ae2:	54 e4       	ldi	r21, 0x44	; 68
    2ae4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	8f 83       	std	Y+7, r24	; 0x07
    2aee:	98 87       	std	Y+8, r25	; 0x08
    2af0:	a9 87       	std	Y+9, r26	; 0x09
    2af2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af4:	6f 81       	ldd	r22, Y+7	; 0x07
    2af6:	78 85       	ldd	r23, Y+8	; 0x08
    2af8:	89 85       	ldd	r24, Y+9	; 0x09
    2afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	2c f4       	brge	.+10     	; 0x2b16 <KPD_vGetPressedKey+0xae>
		__ticks = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9e 83       	std	Y+6, r25	; 0x06
    2b12:	8d 83       	std	Y+5, r24	; 0x05
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <KPD_vGetPressedKey+0x12c>
	else if (__tmp > 65535)
    2b16:	6f 81       	ldd	r22, Y+7	; 0x07
    2b18:	78 85       	ldd	r23, Y+8	; 0x08
    2b1a:	89 85       	ldd	r24, Y+9	; 0x09
    2b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	4f e7       	ldi	r20, 0x7F	; 127
    2b24:	57 e4       	ldi	r21, 0x47	; 71
    2b26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b2a:	18 16       	cp	r1, r24
    2b2c:	4c f5       	brge	.+82     	; 0x2b80 <KPD_vGetPressedKey+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <KPD_vGetPressedKey+0x10e>
    2b58:	88 ec       	ldi	r24, 0xC8	; 200
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	9c 83       	std	Y+4, r25	; 0x04
    2b5e:	8b 83       	std	Y+3, r24	; 0x03
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	9c 81       	ldd	r25, Y+4	; 0x04
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <KPD_vGetPressedKey+0xfc>
    2b68:	9c 83       	std	Y+4, r25	; 0x04
    2b6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	9e 83       	std	Y+6, r25	; 0x06
    2b74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	69 f7       	brne	.-38     	; 0x2b58 <KPD_vGetPressedKey+0xf0>
    2b7e:	14 c0       	rjmp	.+40     	; 0x2ba8 <KPD_vGetPressedKey+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b80:	6f 81       	ldd	r22, Y+7	; 0x07
    2b82:	78 85       	ldd	r23, Y+8	; 0x08
    2b84:	89 85       	ldd	r24, Y+9	; 0x09
    2b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	8d 81       	ldd	r24, Y+5	; 0x05
    2b96:	9e 81       	ldd	r25, Y+6	; 0x06
    2b98:	9a 83       	std	Y+2, r25	; 0x02
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <KPD_vGetPressedKey+0x138>
    2ba4:	9a 83       	std	Y+2, r25	; 0x02
    2ba6:	89 83       	std	Y+1, r24	; 0x01
    2ba8:	89 89       	ldd	r24, Y+17	; 0x11
    2baa:	88 2f       	mov	r24, r24
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	fc 01       	movw	r30, r24
    2bb0:	e4 58       	subi	r30, 0x84	; 132
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	90 81       	ld	r25, Z
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	69 2f       	mov	r22, r25
    2bba:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8ReadPinValue>
    2bbe:	88 23       	and	r24, r24
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <KPD_vGetPressedKey+0x15c>
    2bc2:	80 cf       	rjmp	.-256    	; 0x2ac4 <KPD_vGetPressedKey+0x5c>
				{
					_delay_ms(50);
				}
				*Copy_u8PressedKey = GLOBAL_u8AkpdInterface[LOCAL_u8RowCounter][LOCAL_u8ColCounter];
    2bc4:	8a 89       	ldd	r24, Y+18	; 0x12
    2bc6:	48 2f       	mov	r20, r24
    2bc8:	50 e0       	ldi	r21, 0x00	; 0
    2bca:	89 89       	ldd	r24, Y+17	; 0x11
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	ca 01       	movw	r24, r20
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	82 0f       	add	r24, r18
    2bdc:	93 1f       	adc	r25, r19
    2bde:	fc 01       	movw	r30, r24
    2be0:	e8 59       	subi	r30, 0x98	; 152
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	80 81       	ld	r24, Z
    2be6:	eb 89       	ldd	r30, Y+19	; 0x13
    2be8:	fc 89       	ldd	r31, Y+20	; 0x14
    2bea:	80 83       	st	Z, r24
				LOCAL_u8Flag = 1;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	8f 87       	std	Y+15, r24	; 0x0f
    2bf0:	07 c0       	rjmp	.+14     	; 0x2c00 <KPD_vGetPressedKey+0x198>
void KPD_vGetPressedKey(u8 *Copy_u8PressedKey){
	u8 LOCAL_u8RowCounter, LOCAL_u8ColCounter, LOCAL_u8PinValue, LOCAL_u8Flag=0;
	for(LOCAL_u8RowCounter=0;LOCAL_u8RowCounter<4;LOCAL_u8RowCounter++)
	{
		DIO_vSetPinValue(KPD_PORT, GLOBAL_u8ArowNumber[LOCAL_u8RowCounter], LOW);
		for(LOCAL_u8ColCounter=0;LOCAL_u8ColCounter<4;LOCAL_u8ColCounter++)
    2bf2:	89 89       	ldd	r24, Y+17	; 0x11
    2bf4:	8f 5f       	subi	r24, 0xFF	; 255
    2bf6:	89 8b       	std	Y+17, r24	; 0x11
    2bf8:	89 89       	ldd	r24, Y+17	; 0x11
    2bfa:	84 30       	cpi	r24, 0x04	; 4
    2bfc:	08 f4       	brcc	.+2      	; 0x2c00 <KPD_vGetPressedKey+0x198>
    2bfe:	51 cf       	rjmp	.-350    	; 0x2aa2 <KPD_vGetPressedKey+0x3a>
				*Copy_u8PressedKey = GLOBAL_u8AkpdInterface[LOCAL_u8RowCounter][LOCAL_u8ColCounter];
				LOCAL_u8Flag = 1;
				break;
			}
		}
		DIO_vSetPinValue(KPD_PORT, GLOBAL_u8ArowNumber[LOCAL_u8RowCounter], HIGH);
    2c00:	8a 89       	ldd	r24, Y+18	; 0x12
    2c02:	88 2f       	mov	r24, r24
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	fc 01       	movw	r30, r24
    2c08:	e8 58       	subi	r30, 0x88	; 136
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	90 81       	ld	r25, Z
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	69 2f       	mov	r22, r25
    2c12:	41 e0       	ldi	r20, 0x01	; 1
    2c14:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vSetPinValue>
		if(LOCAL_u8Flag == 1)
    2c18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c1a:	81 30       	cpi	r24, 0x01	; 1
    2c1c:	39 f0       	breq	.+14     	; 0x2c2c <KPD_vGetPressedKey+0x1c4>


//This function shall be responsible for getting the pressed key from keypad
void KPD_vGetPressedKey(u8 *Copy_u8PressedKey){
	u8 LOCAL_u8RowCounter, LOCAL_u8ColCounter, LOCAL_u8PinValue, LOCAL_u8Flag=0;
	for(LOCAL_u8RowCounter=0;LOCAL_u8RowCounter<4;LOCAL_u8RowCounter++)
    2c1e:	8a 89       	ldd	r24, Y+18	; 0x12
    2c20:	8f 5f       	subi	r24, 0xFF	; 255
    2c22:	8a 8b       	std	Y+18, r24	; 0x12
    2c24:	8a 89       	ldd	r24, Y+18	; 0x12
    2c26:	84 30       	cpi	r24, 0x04	; 4
    2c28:	08 f4       	brcc	.+2      	; 0x2c2c <KPD_vGetPressedKey+0x1c4>
    2c2a:	2d cf       	rjmp	.-422    	; 0x2a86 <KPD_vGetPressedKey+0x1e>
		if(LOCAL_u8Flag == 1)
		{
			break;
		}
	}
}
    2c2c:	64 96       	adiw	r28, 0x14	; 20
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	08 95       	ret

00002c3e <main>:
#include "../../MCAL/ATMEGA32/DIO/DIO_interface.h"
#include "../../MCAL/ATMEGA32/EXTI/EXTI_interface.h"
#include "../../MCAL/ATMEGA32/GIE/GIE_interface.h"

void main(void)
{
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDir(PORTC, PIN6, OUTPUT);
    2c46:	82 e0       	ldi	r24, 0x02	; 2
    2c48:	66 e0       	ldi	r22, 0x06	; 6
    2c4a:	41 e0       	ldi	r20, 0x01	; 1
    2c4c:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vSetPinDir>
	DIO_vSetPinValue(PORTC, PIN6, HIGH);
    2c50:	82 e0       	ldi	r24, 0x02	; 2
    2c52:	66 e0       	ldi	r22, 0x06	; 6
    2c54:	41 e0       	ldi	r20, 0x01	; 1
    2c56:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vSetPinValue>
	DIO_vSetPinDir(PORTD, PIN3, INPUT);
    2c5a:	83 e0       	ldi	r24, 0x03	; 3
    2c5c:	63 e0       	ldi	r22, 0x03	; 3
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vSetPinDir>
	DIO_vSetPinValue(PORTC, PIN3, HIGH);
    2c64:	82 e0       	ldi	r24, 0x02	; 2
    2c66:	63 e0       	ldi	r22, 0x03	; 3
    2c68:	41 e0       	ldi	r20, 0x01	; 1
    2c6a:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_vSetPinValue>
    2c6e:	ff cf       	rjmp	.-2      	; 0x2c6e <main+0x30>

00002c70 <SET_Direction>:
 */

#include "DIO_Interface.h"

void SET_Direction(u8 Copy_PORT, u8 Copy_PIN, u8 Direction)//set a specific pin as input or output
{
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	27 97       	sbiw	r28, 0x07	; 7
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	f8 94       	cli
    2c7e:	de bf       	out	0x3e, r29	; 62
    2c80:	0f be       	out	0x3f, r0	; 63
    2c82:	cd bf       	out	0x3d, r28	; 61
    2c84:	89 83       	std	Y+1, r24	; 0x01
    2c86:	6a 83       	std	Y+2, r22	; 0x02
    2c88:	4b 83       	std	Y+3, r20	; 0x03
	if(Direction == OUTPUT)
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	81 30       	cpi	r24, 0x01	; 1
    2c8e:	09 f0       	breq	.+2      	; 0x2c92 <SET_Direction+0x22>
    2c90:	70 c0       	rjmp	.+224    	; 0x2d72 <SET_Direction+0x102>
	{
		switch(Copy_PORT)
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	28 2f       	mov	r18, r24
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	3f 83       	std	Y+7, r19	; 0x07
    2c9a:	2e 83       	std	Y+6, r18	; 0x06
    2c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2ca0:	82 30       	cpi	r24, 0x02	; 2
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	51 f1       	breq	.+84     	; 0x2cfa <SET_Direction+0x8a>
    2ca6:	2e 81       	ldd	r18, Y+6	; 0x06
    2ca8:	3f 81       	ldd	r19, Y+7	; 0x07
    2caa:	23 30       	cpi	r18, 0x03	; 3
    2cac:	31 05       	cpc	r19, r1
    2cae:	34 f4       	brge	.+12     	; 0x2cbc <SET_Direction+0x4c>
    2cb0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cb2:	9f 81       	ldd	r25, Y+7	; 0x07
    2cb4:	81 30       	cpi	r24, 0x01	; 1
    2cb6:	91 05       	cpc	r25, r1
    2cb8:	61 f0       	breq	.+24     	; 0x2cd2 <SET_Direction+0x62>
    2cba:	d3 c0       	rjmp	.+422    	; 0x2e62 <SET_Direction+0x1f2>
    2cbc:	2e 81       	ldd	r18, Y+6	; 0x06
    2cbe:	3f 81       	ldd	r19, Y+7	; 0x07
    2cc0:	23 30       	cpi	r18, 0x03	; 3
    2cc2:	31 05       	cpc	r19, r1
    2cc4:	71 f1       	breq	.+92     	; 0x2d22 <SET_Direction+0xb2>
    2cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc8:	9f 81       	ldd	r25, Y+7	; 0x07
    2cca:	84 30       	cpi	r24, 0x04	; 4
    2ccc:	91 05       	cpc	r25, r1
    2cce:	e9 f1       	breq	.+122    	; 0x2d4a <SET_Direction+0xda>
    2cd0:	c8 c0       	rjmp	.+400    	; 0x2e62 <SET_Direction+0x1f2>
		{
		case PORTA:
			SET_BIT(DDRA_REG, Copy_PIN);
    2cd2:	aa e3       	ldi	r26, 0x3A	; 58
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	ea e3       	ldi	r30, 0x3A	; 58
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	48 2f       	mov	r20, r24
    2cde:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	02 2e       	mov	r0, r18
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <SET_Direction+0x80>
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	0a 94       	dec	r0
    2cf2:	e2 f7       	brpl	.-8      	; 0x2cec <SET_Direction+0x7c>
    2cf4:	84 2b       	or	r24, r20
    2cf6:	8c 93       	st	X, r24
    2cf8:	b4 c0       	rjmp	.+360    	; 0x2e62 <SET_Direction+0x1f2>
			break;
		case PORTB:
			SET_BIT(DDRB_REG, Copy_PIN);
    2cfa:	a7 e3       	ldi	r26, 0x37	; 55
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e7 e3       	ldi	r30, 0x37	; 55
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	48 2f       	mov	r20, r24
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	02 2e       	mov	r0, r18
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <SET_Direction+0xa8>
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	0a 94       	dec	r0
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <SET_Direction+0xa4>
    2d1c:	84 2b       	or	r24, r20
    2d1e:	8c 93       	st	X, r24
    2d20:	a0 c0       	rjmp	.+320    	; 0x2e62 <SET_Direction+0x1f2>
			break;
		case PORTC:
			SET_BIT(DDRC_REG, Copy_PIN);
    2d22:	a4 e3       	ldi	r26, 0x34	; 52
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	e4 e3       	ldi	r30, 0x34	; 52
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	48 2f       	mov	r20, r24
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	02 2e       	mov	r0, r18
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <SET_Direction+0xd0>
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	0a 94       	dec	r0
    2d42:	e2 f7       	brpl	.-8      	; 0x2d3c <SET_Direction+0xcc>
    2d44:	84 2b       	or	r24, r20
    2d46:	8c 93       	st	X, r24
    2d48:	8c c0       	rjmp	.+280    	; 0x2e62 <SET_Direction+0x1f2>
			break;
		case PORTD:
			SET_BIT(DDRD_REG, Copy_PIN);
    2d4a:	a1 e3       	ldi	r26, 0x31	; 49
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e1 e3       	ldi	r30, 0x31	; 49
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	48 2f       	mov	r20, r24
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	02 2e       	mov	r0, r18
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <SET_Direction+0xf8>
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	0a 94       	dec	r0
    2d6a:	e2 f7       	brpl	.-8      	; 0x2d64 <SET_Direction+0xf4>
    2d6c:	84 2b       	or	r24, r20
    2d6e:	8c 93       	st	X, r24
    2d70:	78 c0       	rjmp	.+240    	; 0x2e62 <SET_Direction+0x1f2>
			break;
		}
	}
	else if(Direction == INPUT)
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	88 23       	and	r24, r24
    2d76:	09 f0       	breq	.+2      	; 0x2d7a <SET_Direction+0x10a>
    2d78:	74 c0       	rjmp	.+232    	; 0x2e62 <SET_Direction+0x1f2>
	{
		switch(Copy_PORT)
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	3d 83       	std	Y+5, r19	; 0x05
    2d82:	2c 83       	std	Y+4, r18	; 0x04
    2d84:	8c 81       	ldd	r24, Y+4	; 0x04
    2d86:	9d 81       	ldd	r25, Y+5	; 0x05
    2d88:	82 30       	cpi	r24, 0x02	; 2
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	61 f1       	breq	.+88     	; 0x2de6 <SET_Direction+0x176>
    2d8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d90:	3d 81       	ldd	r19, Y+5	; 0x05
    2d92:	23 30       	cpi	r18, 0x03	; 3
    2d94:	31 05       	cpc	r19, r1
    2d96:	34 f4       	brge	.+12     	; 0x2da4 <SET_Direction+0x134>
    2d98:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d9c:	81 30       	cpi	r24, 0x01	; 1
    2d9e:	91 05       	cpc	r25, r1
    2da0:	69 f0       	breq	.+26     	; 0x2dbc <SET_Direction+0x14c>
    2da2:	5f c0       	rjmp	.+190    	; 0x2e62 <SET_Direction+0x1f2>
    2da4:	2c 81       	ldd	r18, Y+4	; 0x04
    2da6:	3d 81       	ldd	r19, Y+5	; 0x05
    2da8:	23 30       	cpi	r18, 0x03	; 3
    2daa:	31 05       	cpc	r19, r1
    2dac:	89 f1       	breq	.+98     	; 0x2e10 <SET_Direction+0x1a0>
    2dae:	8c 81       	ldd	r24, Y+4	; 0x04
    2db0:	9d 81       	ldd	r25, Y+5	; 0x05
    2db2:	84 30       	cpi	r24, 0x04	; 4
    2db4:	91 05       	cpc	r25, r1
    2db6:	09 f4       	brne	.+2      	; 0x2dba <SET_Direction+0x14a>
    2db8:	40 c0       	rjmp	.+128    	; 0x2e3a <SET_Direction+0x1ca>
    2dba:	53 c0       	rjmp	.+166    	; 0x2e62 <SET_Direction+0x1f2>
		{
		case PORTA:
			CLR_BIT(DDRA_REG, Copy_PIN);
    2dbc:	aa e3       	ldi	r26, 0x3A	; 58
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	ea e3       	ldi	r30, 0x3A	; 58
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	48 2f       	mov	r20, r24
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	02 2e       	mov	r0, r18
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <SET_Direction+0x16a>
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	0a 94       	dec	r0
    2ddc:	e2 f7       	brpl	.-8      	; 0x2dd6 <SET_Direction+0x166>
    2dde:	80 95       	com	r24
    2de0:	84 23       	and	r24, r20
    2de2:	8c 93       	st	X, r24
    2de4:	3e c0       	rjmp	.+124    	; 0x2e62 <SET_Direction+0x1f2>
			break;
		case PORTB:
			CLR_BIT(DDRB_REG, Copy_PIN);
    2de6:	a7 e3       	ldi	r26, 0x37	; 55
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e7 e3       	ldi	r30, 0x37	; 55
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	48 2f       	mov	r20, r24
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	28 2f       	mov	r18, r24
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	02 2e       	mov	r0, r18
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <SET_Direction+0x194>
    2e00:	88 0f       	add	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	0a 94       	dec	r0
    2e06:	e2 f7       	brpl	.-8      	; 0x2e00 <SET_Direction+0x190>
    2e08:	80 95       	com	r24
    2e0a:	84 23       	and	r24, r20
    2e0c:	8c 93       	st	X, r24
    2e0e:	29 c0       	rjmp	.+82     	; 0x2e62 <SET_Direction+0x1f2>
			break;
		case PORTC:
			CLR_BIT(DDRC_REG, Copy_PIN);
    2e10:	a4 e3       	ldi	r26, 0x34	; 52
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e4 e3       	ldi	r30, 0x34	; 52
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	48 2f       	mov	r20, r24
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	28 2f       	mov	r18, r24
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	02 2e       	mov	r0, r18
    2e28:	02 c0       	rjmp	.+4      	; 0x2e2e <SET_Direction+0x1be>
    2e2a:	88 0f       	add	r24, r24
    2e2c:	99 1f       	adc	r25, r25
    2e2e:	0a 94       	dec	r0
    2e30:	e2 f7       	brpl	.-8      	; 0x2e2a <SET_Direction+0x1ba>
    2e32:	80 95       	com	r24
    2e34:	84 23       	and	r24, r20
    2e36:	8c 93       	st	X, r24
    2e38:	14 c0       	rjmp	.+40     	; 0x2e62 <SET_Direction+0x1f2>
			break;
		case PORTD:
			CLR_BIT(DDRD_REG, Copy_PIN);
    2e3a:	a1 e3       	ldi	r26, 0x31	; 49
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	e1 e3       	ldi	r30, 0x31	; 49
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	48 2f       	mov	r20, r24
    2e46:	8a 81       	ldd	r24, Y+2	; 0x02
    2e48:	28 2f       	mov	r18, r24
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	02 2e       	mov	r0, r18
    2e52:	02 c0       	rjmp	.+4      	; 0x2e58 <SET_Direction+0x1e8>
    2e54:	88 0f       	add	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	0a 94       	dec	r0
    2e5a:	e2 f7       	brpl	.-8      	; 0x2e54 <SET_Direction+0x1e4>
    2e5c:	80 95       	com	r24
    2e5e:	84 23       	and	r24, r20
    2e60:	8c 93       	st	X, r24
			break;
		}
	}
}
    2e62:	27 96       	adiw	r28, 0x07	; 7
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	f8 94       	cli
    2e68:	de bf       	out	0x3e, r29	; 62
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	cd bf       	out	0x3d, r28	; 61
    2e6e:	cf 91       	pop	r28
    2e70:	df 91       	pop	r29
    2e72:	08 95       	ret

00002e74 <SET_State>:

void SET_State(u8 Copy_PORT, u8 Copy_PIN, u8 State)//set a specific output pin as high or low
{
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	27 97       	sbiw	r28, 0x07	; 7
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	6a 83       	std	Y+2, r22	; 0x02
    2e8c:	4b 83       	std	Y+3, r20	; 0x03
	if(State == HIGH)
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	81 30       	cpi	r24, 0x01	; 1
    2e92:	09 f0       	breq	.+2      	; 0x2e96 <SET_State+0x22>
    2e94:	70 c0       	rjmp	.+224    	; 0x2f76 <SET_State+0x102>
	{
		switch(Copy_PORT)
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	28 2f       	mov	r18, r24
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	3f 83       	std	Y+7, r19	; 0x07
    2e9e:	2e 83       	std	Y+6, r18	; 0x06
    2ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ea2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ea4:	82 30       	cpi	r24, 0x02	; 2
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	51 f1       	breq	.+84     	; 0x2efe <SET_State+0x8a>
    2eaa:	2e 81       	ldd	r18, Y+6	; 0x06
    2eac:	3f 81       	ldd	r19, Y+7	; 0x07
    2eae:	23 30       	cpi	r18, 0x03	; 3
    2eb0:	31 05       	cpc	r19, r1
    2eb2:	34 f4       	brge	.+12     	; 0x2ec0 <SET_State+0x4c>
    2eb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb8:	81 30       	cpi	r24, 0x01	; 1
    2eba:	91 05       	cpc	r25, r1
    2ebc:	61 f0       	breq	.+24     	; 0x2ed6 <SET_State+0x62>
    2ebe:	d3 c0       	rjmp	.+422    	; 0x3066 <SET_State+0x1f2>
    2ec0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ec2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ec4:	23 30       	cpi	r18, 0x03	; 3
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	71 f1       	breq	.+92     	; 0x2f26 <SET_State+0xb2>
    2eca:	8e 81       	ldd	r24, Y+6	; 0x06
    2ecc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ece:	84 30       	cpi	r24, 0x04	; 4
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	e9 f1       	breq	.+122    	; 0x2f4e <SET_State+0xda>
    2ed4:	c8 c0       	rjmp	.+400    	; 0x3066 <SET_State+0x1f2>
		{
		case PORTA:
			SET_BIT(PORTA_REG, Copy_PIN);
    2ed6:	ab e3       	ldi	r26, 0x3B	; 59
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	eb e3       	ldi	r30, 0x3B	; 59
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	48 2f       	mov	r20, r24
    2ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	02 2e       	mov	r0, r18
    2eee:	02 c0       	rjmp	.+4      	; 0x2ef4 <SET_State+0x80>
    2ef0:	88 0f       	add	r24, r24
    2ef2:	99 1f       	adc	r25, r25
    2ef4:	0a 94       	dec	r0
    2ef6:	e2 f7       	brpl	.-8      	; 0x2ef0 <SET_State+0x7c>
    2ef8:	84 2b       	or	r24, r20
    2efa:	8c 93       	st	X, r24
    2efc:	b4 c0       	rjmp	.+360    	; 0x3066 <SET_State+0x1f2>
			break;
		case PORTB:
			SET_BIT(PORTB_REG, Copy_PIN);
    2efe:	a8 e3       	ldi	r26, 0x38	; 56
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	e8 e3       	ldi	r30, 0x38	; 56
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	48 2f       	mov	r20, r24
    2f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	02 2e       	mov	r0, r18
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <SET_State+0xa8>
    2f18:	88 0f       	add	r24, r24
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	0a 94       	dec	r0
    2f1e:	e2 f7       	brpl	.-8      	; 0x2f18 <SET_State+0xa4>
    2f20:	84 2b       	or	r24, r20
    2f22:	8c 93       	st	X, r24
    2f24:	a0 c0       	rjmp	.+320    	; 0x3066 <SET_State+0x1f2>
			break;
		case PORTC:
			SET_BIT(PORTC_REG, Copy_PIN);
    2f26:	a5 e3       	ldi	r26, 0x35	; 53
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e5 e3       	ldi	r30, 0x35	; 53
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	48 2f       	mov	r20, r24
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	28 2f       	mov	r18, r24
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	02 2e       	mov	r0, r18
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <SET_State+0xd0>
    2f40:	88 0f       	add	r24, r24
    2f42:	99 1f       	adc	r25, r25
    2f44:	0a 94       	dec	r0
    2f46:	e2 f7       	brpl	.-8      	; 0x2f40 <SET_State+0xcc>
    2f48:	84 2b       	or	r24, r20
    2f4a:	8c 93       	st	X, r24
    2f4c:	8c c0       	rjmp	.+280    	; 0x3066 <SET_State+0x1f2>
			break;
		case PORTD:
			SET_BIT(PORTD_REG, Copy_PIN);
    2f4e:	a2 e3       	ldi	r26, 0x32	; 50
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e2 e3       	ldi	r30, 0x32	; 50
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	48 2f       	mov	r20, r24
    2f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5c:	28 2f       	mov	r18, r24
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	02 2e       	mov	r0, r18
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <SET_State+0xf8>
    2f68:	88 0f       	add	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	0a 94       	dec	r0
    2f6e:	e2 f7       	brpl	.-8      	; 0x2f68 <SET_State+0xf4>
    2f70:	84 2b       	or	r24, r20
    2f72:	8c 93       	st	X, r24
    2f74:	78 c0       	rjmp	.+240    	; 0x3066 <SET_State+0x1f2>
			break;
		}
	}
	else if(State == LOW)
    2f76:	8b 81       	ldd	r24, Y+3	; 0x03
    2f78:	88 23       	and	r24, r24
    2f7a:	09 f0       	breq	.+2      	; 0x2f7e <SET_State+0x10a>
    2f7c:	74 c0       	rjmp	.+232    	; 0x3066 <SET_State+0x1f2>
	{
		switch(Copy_PORT)
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	28 2f       	mov	r18, r24
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	3d 83       	std	Y+5, r19	; 0x05
    2f86:	2c 83       	std	Y+4, r18	; 0x04
    2f88:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f8c:	82 30       	cpi	r24, 0x02	; 2
    2f8e:	91 05       	cpc	r25, r1
    2f90:	61 f1       	breq	.+88     	; 0x2fea <SET_State+0x176>
    2f92:	2c 81       	ldd	r18, Y+4	; 0x04
    2f94:	3d 81       	ldd	r19, Y+5	; 0x05
    2f96:	23 30       	cpi	r18, 0x03	; 3
    2f98:	31 05       	cpc	r19, r1
    2f9a:	34 f4       	brge	.+12     	; 0x2fa8 <SET_State+0x134>
    2f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa0:	81 30       	cpi	r24, 0x01	; 1
    2fa2:	91 05       	cpc	r25, r1
    2fa4:	69 f0       	breq	.+26     	; 0x2fc0 <SET_State+0x14c>
    2fa6:	5f c0       	rjmp	.+190    	; 0x3066 <SET_State+0x1f2>
    2fa8:	2c 81       	ldd	r18, Y+4	; 0x04
    2faa:	3d 81       	ldd	r19, Y+5	; 0x05
    2fac:	23 30       	cpi	r18, 0x03	; 3
    2fae:	31 05       	cpc	r19, r1
    2fb0:	89 f1       	breq	.+98     	; 0x3014 <SET_State+0x1a0>
    2fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb6:	84 30       	cpi	r24, 0x04	; 4
    2fb8:	91 05       	cpc	r25, r1
    2fba:	09 f4       	brne	.+2      	; 0x2fbe <SET_State+0x14a>
    2fbc:	40 c0       	rjmp	.+128    	; 0x303e <SET_State+0x1ca>
    2fbe:	53 c0       	rjmp	.+166    	; 0x3066 <SET_State+0x1f2>
		{
		case PORTA:
			CLR_BIT(PORTA_REG, Copy_PIN);
    2fc0:	ab e3       	ldi	r26, 0x3B	; 59
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	eb e3       	ldi	r30, 0x3B	; 59
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	48 2f       	mov	r20, r24
    2fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fce:	28 2f       	mov	r18, r24
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	02 2e       	mov	r0, r18
    2fd8:	02 c0       	rjmp	.+4      	; 0x2fde <SET_State+0x16a>
    2fda:	88 0f       	add	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	0a 94       	dec	r0
    2fe0:	e2 f7       	brpl	.-8      	; 0x2fda <SET_State+0x166>
    2fe2:	80 95       	com	r24
    2fe4:	84 23       	and	r24, r20
    2fe6:	8c 93       	st	X, r24
    2fe8:	3e c0       	rjmp	.+124    	; 0x3066 <SET_State+0x1f2>
			break;
		case PORTB:
			CLR_BIT(PORTB_REG, Copy_PIN);
    2fea:	a8 e3       	ldi	r26, 0x38	; 56
    2fec:	b0 e0       	ldi	r27, 0x00	; 0
    2fee:	e8 e3       	ldi	r30, 0x38	; 56
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	80 81       	ld	r24, Z
    2ff4:	48 2f       	mov	r20, r24
    2ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff8:	28 2f       	mov	r18, r24
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	02 2e       	mov	r0, r18
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <SET_State+0x194>
    3004:	88 0f       	add	r24, r24
    3006:	99 1f       	adc	r25, r25
    3008:	0a 94       	dec	r0
    300a:	e2 f7       	brpl	.-8      	; 0x3004 <SET_State+0x190>
    300c:	80 95       	com	r24
    300e:	84 23       	and	r24, r20
    3010:	8c 93       	st	X, r24
    3012:	29 c0       	rjmp	.+82     	; 0x3066 <SET_State+0x1f2>
			break;
		case PORTC:
			CLR_BIT(PORTC_REG, Copy_PIN);
    3014:	a5 e3       	ldi	r26, 0x35	; 53
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	e5 e3       	ldi	r30, 0x35	; 53
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	48 2f       	mov	r20, r24
    3020:	8a 81       	ldd	r24, Y+2	; 0x02
    3022:	28 2f       	mov	r18, r24
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	02 2e       	mov	r0, r18
    302c:	02 c0       	rjmp	.+4      	; 0x3032 <SET_State+0x1be>
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	0a 94       	dec	r0
    3034:	e2 f7       	brpl	.-8      	; 0x302e <SET_State+0x1ba>
    3036:	80 95       	com	r24
    3038:	84 23       	and	r24, r20
    303a:	8c 93       	st	X, r24
    303c:	14 c0       	rjmp	.+40     	; 0x3066 <SET_State+0x1f2>
			break;
		case PORTD:
			CLR_BIT(PORTD_REG, Copy_PIN);
    303e:	a2 e3       	ldi	r26, 0x32	; 50
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	e2 e3       	ldi	r30, 0x32	; 50
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
    3048:	48 2f       	mov	r20, r24
    304a:	8a 81       	ldd	r24, Y+2	; 0x02
    304c:	28 2f       	mov	r18, r24
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	02 2e       	mov	r0, r18
    3056:	02 c0       	rjmp	.+4      	; 0x305c <SET_State+0x1e8>
    3058:	88 0f       	add	r24, r24
    305a:	99 1f       	adc	r25, r25
    305c:	0a 94       	dec	r0
    305e:	e2 f7       	brpl	.-8      	; 0x3058 <SET_State+0x1e4>
    3060:	80 95       	com	r24
    3062:	84 23       	and	r24, r20
    3064:	8c 93       	st	X, r24
			break;
		}
	}
}
    3066:	27 96       	adiw	r28, 0x07	; 7
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	de bf       	out	0x3e, r29	; 62
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	cd bf       	out	0x3d, r28	; 61
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <GET_State>:

u8 GET_State(u8 Copy_PORT, u8 Copy_PIN)//read data from input pin
{
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	00 d0       	rcall	.+0      	; 0x307e <GET_State+0x6>
    307e:	00 d0       	rcall	.+0      	; 0x3080 <GET_State+0x8>
    3080:	00 d0       	rcall	.+0      	; 0x3082 <GET_State+0xa>
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	89 83       	std	Y+1, r24	; 0x01
    3088:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_PORT)
    308a:	89 81       	ldd	r24, Y+1	; 0x01
    308c:	28 2f       	mov	r18, r24
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	3d 83       	std	Y+5, r19	; 0x05
    3092:	2c 83       	std	Y+4, r18	; 0x04
    3094:	4c 81       	ldd	r20, Y+4	; 0x04
    3096:	5d 81       	ldd	r21, Y+5	; 0x05
    3098:	42 30       	cpi	r20, 0x02	; 2
    309a:	51 05       	cpc	r21, r1
    309c:	49 f1       	breq	.+82     	; 0x30f0 <GET_State+0x78>
    309e:	8c 81       	ldd	r24, Y+4	; 0x04
    30a0:	9d 81       	ldd	r25, Y+5	; 0x05
    30a2:	83 30       	cpi	r24, 0x03	; 3
    30a4:	91 05       	cpc	r25, r1
    30a6:	34 f4       	brge	.+12     	; 0x30b4 <GET_State+0x3c>
    30a8:	2c 81       	ldd	r18, Y+4	; 0x04
    30aa:	3d 81       	ldd	r19, Y+5	; 0x05
    30ac:	21 30       	cpi	r18, 0x01	; 1
    30ae:	31 05       	cpc	r19, r1
    30b0:	61 f0       	breq	.+24     	; 0x30ca <GET_State+0x52>
    30b2:	57 c0       	rjmp	.+174    	; 0x3162 <GET_State+0xea>
    30b4:	4c 81       	ldd	r20, Y+4	; 0x04
    30b6:	5d 81       	ldd	r21, Y+5	; 0x05
    30b8:	43 30       	cpi	r20, 0x03	; 3
    30ba:	51 05       	cpc	r21, r1
    30bc:	61 f1       	breq	.+88     	; 0x3116 <GET_State+0x9e>
    30be:	8c 81       	ldd	r24, Y+4	; 0x04
    30c0:	9d 81       	ldd	r25, Y+5	; 0x05
    30c2:	84 30       	cpi	r24, 0x04	; 4
    30c4:	91 05       	cpc	r25, r1
    30c6:	d1 f1       	breq	.+116    	; 0x313c <GET_State+0xc4>
    30c8:	4c c0       	rjmp	.+152    	; 0x3162 <GET_State+0xea>
	{
	case PORTA:
		return GET_BIT(PINA_REG, Copy_PIN);
    30ca:	e9 e3       	ldi	r30, 0x39	; 57
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	88 2f       	mov	r24, r24
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	a9 01       	movw	r20, r18
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <GET_State+0x6a>
    30de:	55 95       	asr	r21
    30e0:	47 95       	ror	r20
    30e2:	8a 95       	dec	r24
    30e4:	e2 f7       	brpl	.-8      	; 0x30de <GET_State+0x66>
    30e6:	ca 01       	movw	r24, r20
    30e8:	58 2f       	mov	r21, r24
    30ea:	51 70       	andi	r21, 0x01	; 1
    30ec:	5b 83       	std	Y+3, r21	; 0x03
    30ee:	3a c0       	rjmp	.+116    	; 0x3164 <GET_State+0xec>
		break;
	case PORTB:
		return GET_BIT(PINB_REG, Copy_PIN);
    30f0:	e6 e3       	ldi	r30, 0x36	; 54
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	28 2f       	mov	r18, r24
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	8a 81       	ldd	r24, Y+2	; 0x02
    30fc:	88 2f       	mov	r24, r24
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	a9 01       	movw	r20, r18
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <GET_State+0x90>
    3104:	55 95       	asr	r21
    3106:	47 95       	ror	r20
    3108:	8a 95       	dec	r24
    310a:	e2 f7       	brpl	.-8      	; 0x3104 <GET_State+0x8c>
    310c:	ca 01       	movw	r24, r20
    310e:	58 2f       	mov	r21, r24
    3110:	51 70       	andi	r21, 0x01	; 1
    3112:	5b 83       	std	Y+3, r21	; 0x03
    3114:	27 c0       	rjmp	.+78     	; 0x3164 <GET_State+0xec>
		break;
	case PORTC:
		return GET_BIT(PINC_REG, Copy_PIN);
    3116:	e3 e3       	ldi	r30, 0x33	; 51
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	28 2f       	mov	r18, r24
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	88 2f       	mov	r24, r24
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	a9 01       	movw	r20, r18
    3128:	02 c0       	rjmp	.+4      	; 0x312e <GET_State+0xb6>
    312a:	55 95       	asr	r21
    312c:	47 95       	ror	r20
    312e:	8a 95       	dec	r24
    3130:	e2 f7       	brpl	.-8      	; 0x312a <GET_State+0xb2>
    3132:	ca 01       	movw	r24, r20
    3134:	58 2f       	mov	r21, r24
    3136:	51 70       	andi	r21, 0x01	; 1
    3138:	5b 83       	std	Y+3, r21	; 0x03
    313a:	14 c0       	rjmp	.+40     	; 0x3164 <GET_State+0xec>
		break;
	case PORTD:
		return GET_BIT(PIND_REG, Copy_PIN);
    313c:	e0 e3       	ldi	r30, 0x30	; 48
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	8a 81       	ldd	r24, Y+2	; 0x02
    3148:	88 2f       	mov	r24, r24
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	a9 01       	movw	r20, r18
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <GET_State+0xdc>
    3150:	55 95       	asr	r21
    3152:	47 95       	ror	r20
    3154:	8a 95       	dec	r24
    3156:	e2 f7       	brpl	.-8      	; 0x3150 <GET_State+0xd8>
    3158:	ca 01       	movw	r24, r20
    315a:	58 2f       	mov	r21, r24
    315c:	51 70       	andi	r21, 0x01	; 1
    315e:	5b 83       	std	Y+3, r21	; 0x03
    3160:	01 c0       	rjmp	.+2      	; 0x3164 <GET_State+0xec>
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <GET_State+0xf0>
		break;
	}
}
    3164:	8b 81       	ldd	r24, Y+3	; 0x03
    3166:	8e 83       	std	Y+6, r24	; 0x06
    3168:	8e 81       	ldd	r24, Y+6	; 0x06
    316a:	26 96       	adiw	r28, 0x06	; 6
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	cf 91       	pop	r28
    3178:	df 91       	pop	r29
    317a:	08 95       	ret

0000317c <SET_Direction_4LSB>:

void SET_Direction_4LSB(u8 Copy_PORT, u8 Direction)//set 4 LSB as input or output
{
    317c:	df 93       	push	r29
    317e:	cf 93       	push	r28
    3180:	00 d0       	rcall	.+0      	; 0x3182 <SET_Direction_4LSB+0x6>
    3182:	00 d0       	rcall	.+0      	; 0x3184 <SET_Direction_4LSB+0x8>
    3184:	00 d0       	rcall	.+0      	; 0x3186 <SET_Direction_4LSB+0xa>
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
    318a:	89 83       	std	Y+1, r24	; 0x01
    318c:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction == OUTPUT)
    318e:	8a 81       	ldd	r24, Y+2	; 0x02
    3190:	81 30       	cpi	r24, 0x01	; 1
    3192:	09 f0       	breq	.+2      	; 0x3196 <SET_Direction_4LSB+0x1a>
    3194:	3f c0       	rjmp	.+126    	; 0x3214 <SET_Direction_4LSB+0x98>
	{
		switch(Copy_PORT)
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	28 2f       	mov	r18, r24
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	3e 83       	std	Y+6, r19	; 0x06
    319e:	2d 83       	std	Y+5, r18	; 0x05
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	82 30       	cpi	r24, 0x02	; 2
    31a6:	91 05       	cpc	r25, r1
    31a8:	f1 f0       	breq	.+60     	; 0x31e6 <SET_Direction_4LSB+0x6a>
    31aa:	2d 81       	ldd	r18, Y+5	; 0x05
    31ac:	3e 81       	ldd	r19, Y+6	; 0x06
    31ae:	23 30       	cpi	r18, 0x03	; 3
    31b0:	31 05       	cpc	r19, r1
    31b2:	34 f4       	brge	.+12     	; 0x31c0 <SET_Direction_4LSB+0x44>
    31b4:	8d 81       	ldd	r24, Y+5	; 0x05
    31b6:	9e 81       	ldd	r25, Y+6	; 0x06
    31b8:	81 30       	cpi	r24, 0x01	; 1
    31ba:	91 05       	cpc	r25, r1
    31bc:	61 f0       	breq	.+24     	; 0x31d6 <SET_Direction_4LSB+0x5a>
    31be:	2a c0       	rjmp	.+84     	; 0x3214 <SET_Direction_4LSB+0x98>
    31c0:	2d 81       	ldd	r18, Y+5	; 0x05
    31c2:	3e 81       	ldd	r19, Y+6	; 0x06
    31c4:	23 30       	cpi	r18, 0x03	; 3
    31c6:	31 05       	cpc	r19, r1
    31c8:	b1 f0       	breq	.+44     	; 0x31f6 <SET_Direction_4LSB+0x7a>
    31ca:	8d 81       	ldd	r24, Y+5	; 0x05
    31cc:	9e 81       	ldd	r25, Y+6	; 0x06
    31ce:	84 30       	cpi	r24, 0x04	; 4
    31d0:	91 05       	cpc	r25, r1
    31d2:	c9 f0       	breq	.+50     	; 0x3206 <SET_Direction_4LSB+0x8a>
    31d4:	1f c0       	rjmp	.+62     	; 0x3214 <SET_Direction_4LSB+0x98>
		{
		case PORTA:
			DDRA_REG |= 0x0F;
    31d6:	aa e3       	ldi	r26, 0x3A	; 58
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	ea e3       	ldi	r30, 0x3A	; 58
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	8f 60       	ori	r24, 0x0F	; 15
    31e2:	8c 93       	st	X, r24
    31e4:	17 c0       	rjmp	.+46     	; 0x3214 <SET_Direction_4LSB+0x98>
			break;
		case PORTB:
			DDRB_REG |= 0x0F;
    31e6:	a7 e3       	ldi	r26, 0x37	; 55
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	e7 e3       	ldi	r30, 0x37	; 55
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 81       	ld	r24, Z
    31f0:	8f 60       	ori	r24, 0x0F	; 15
    31f2:	8c 93       	st	X, r24
    31f4:	0f c0       	rjmp	.+30     	; 0x3214 <SET_Direction_4LSB+0x98>
			break;
		case PORTC:
			DDRC_REG |= 0x0F;
    31f6:	a4 e3       	ldi	r26, 0x34	; 52
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	e4 e3       	ldi	r30, 0x34	; 52
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	80 81       	ld	r24, Z
    3200:	8f 60       	ori	r24, 0x0F	; 15
    3202:	8c 93       	st	X, r24
    3204:	07 c0       	rjmp	.+14     	; 0x3214 <SET_Direction_4LSB+0x98>
			break;
		case PORTD:
			DDRD_REG |= 0x0F;
    3206:	a1 e3       	ldi	r26, 0x31	; 49
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	e1 e3       	ldi	r30, 0x31	; 49
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	8f 60       	ori	r24, 0x0F	; 15
    3212:	8c 93       	st	X, r24
			break;
		}
	}
	if(Direction == INPUT)
    3214:	8a 81       	ldd	r24, Y+2	; 0x02
    3216:	88 23       	and	r24, r24
    3218:	09 f0       	breq	.+2      	; 0x321c <SET_Direction_4LSB+0xa0>
    321a:	3f c0       	rjmp	.+126    	; 0x329a <SET_Direction_4LSB+0x11e>
	{
		switch(Copy_PORT)
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	28 2f       	mov	r18, r24
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	3c 83       	std	Y+4, r19	; 0x04
    3224:	2b 83       	std	Y+3, r18	; 0x03
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	9c 81       	ldd	r25, Y+4	; 0x04
    322a:	82 30       	cpi	r24, 0x02	; 2
    322c:	91 05       	cpc	r25, r1
    322e:	f1 f0       	breq	.+60     	; 0x326c <SET_Direction_4LSB+0xf0>
    3230:	2b 81       	ldd	r18, Y+3	; 0x03
    3232:	3c 81       	ldd	r19, Y+4	; 0x04
    3234:	23 30       	cpi	r18, 0x03	; 3
    3236:	31 05       	cpc	r19, r1
    3238:	34 f4       	brge	.+12     	; 0x3246 <SET_Direction_4LSB+0xca>
    323a:	8b 81       	ldd	r24, Y+3	; 0x03
    323c:	9c 81       	ldd	r25, Y+4	; 0x04
    323e:	81 30       	cpi	r24, 0x01	; 1
    3240:	91 05       	cpc	r25, r1
    3242:	61 f0       	breq	.+24     	; 0x325c <SET_Direction_4LSB+0xe0>
    3244:	2a c0       	rjmp	.+84     	; 0x329a <SET_Direction_4LSB+0x11e>
    3246:	2b 81       	ldd	r18, Y+3	; 0x03
    3248:	3c 81       	ldd	r19, Y+4	; 0x04
    324a:	23 30       	cpi	r18, 0x03	; 3
    324c:	31 05       	cpc	r19, r1
    324e:	b1 f0       	breq	.+44     	; 0x327c <SET_Direction_4LSB+0x100>
    3250:	8b 81       	ldd	r24, Y+3	; 0x03
    3252:	9c 81       	ldd	r25, Y+4	; 0x04
    3254:	84 30       	cpi	r24, 0x04	; 4
    3256:	91 05       	cpc	r25, r1
    3258:	c9 f0       	breq	.+50     	; 0x328c <SET_Direction_4LSB+0x110>
    325a:	1f c0       	rjmp	.+62     	; 0x329a <SET_Direction_4LSB+0x11e>
		{
		case PORTA:
			DDRA_REG &= 0xF0;
    325c:	aa e3       	ldi	r26, 0x3A	; 58
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	ea e3       	ldi	r30, 0x3A	; 58
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	80 7f       	andi	r24, 0xF0	; 240
    3268:	8c 93       	st	X, r24
    326a:	17 c0       	rjmp	.+46     	; 0x329a <SET_Direction_4LSB+0x11e>
			break;
		case PORTB:
			DDRB_REG &= 0xF0;
    326c:	a7 e3       	ldi	r26, 0x37	; 55
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	e7 e3       	ldi	r30, 0x37	; 55
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	80 7f       	andi	r24, 0xF0	; 240
    3278:	8c 93       	st	X, r24
    327a:	0f c0       	rjmp	.+30     	; 0x329a <SET_Direction_4LSB+0x11e>
			break;
		case PORTC:
			DDRC_REG &= 0xF0;
    327c:	a4 e3       	ldi	r26, 0x34	; 52
    327e:	b0 e0       	ldi	r27, 0x00	; 0
    3280:	e4 e3       	ldi	r30, 0x34	; 52
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	80 81       	ld	r24, Z
    3286:	80 7f       	andi	r24, 0xF0	; 240
    3288:	8c 93       	st	X, r24
    328a:	07 c0       	rjmp	.+14     	; 0x329a <SET_Direction_4LSB+0x11e>
			break;
		case PORTD:
			DDRD_REG &= 0xF0;
    328c:	a1 e3       	ldi	r26, 0x31	; 49
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	e1 e3       	ldi	r30, 0x31	; 49
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	80 7f       	andi	r24, 0xF0	; 240
    3298:	8c 93       	st	X, r24
			break;
		}
	}
}
    329a:	26 96       	adiw	r28, 0x06	; 6
    329c:	0f b6       	in	r0, 0x3f	; 63
    329e:	f8 94       	cli
    32a0:	de bf       	out	0x3e, r29	; 62
    32a2:	0f be       	out	0x3f, r0	; 63
    32a4:	cd bf       	out	0x3d, r28	; 61
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <SET_Direction_4MSB>:

void SET_Direction_4MSB(u8 Copy_PORT, u8 Direction)//set 4 MSB as input or output
{
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	00 d0       	rcall	.+0      	; 0x32b2 <SET_Direction_4MSB+0x6>
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <SET_Direction_4MSB+0x8>
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <SET_Direction_4MSB+0xa>
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	89 83       	std	Y+1, r24	; 0x01
    32bc:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction == OUTPUT)
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	81 30       	cpi	r24, 0x01	; 1
    32c2:	09 f0       	breq	.+2      	; 0x32c6 <SET_Direction_4MSB+0x1a>
    32c4:	3f c0       	rjmp	.+126    	; 0x3344 <SET_Direction_4MSB+0x98>
	{
		switch(Copy_PORT)
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	28 2f       	mov	r18, r24
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	3e 83       	std	Y+6, r19	; 0x06
    32ce:	2d 83       	std	Y+5, r18	; 0x05
    32d0:	8d 81       	ldd	r24, Y+5	; 0x05
    32d2:	9e 81       	ldd	r25, Y+6	; 0x06
    32d4:	82 30       	cpi	r24, 0x02	; 2
    32d6:	91 05       	cpc	r25, r1
    32d8:	f1 f0       	breq	.+60     	; 0x3316 <SET_Direction_4MSB+0x6a>
    32da:	2d 81       	ldd	r18, Y+5	; 0x05
    32dc:	3e 81       	ldd	r19, Y+6	; 0x06
    32de:	23 30       	cpi	r18, 0x03	; 3
    32e0:	31 05       	cpc	r19, r1
    32e2:	34 f4       	brge	.+12     	; 0x32f0 <SET_Direction_4MSB+0x44>
    32e4:	8d 81       	ldd	r24, Y+5	; 0x05
    32e6:	9e 81       	ldd	r25, Y+6	; 0x06
    32e8:	81 30       	cpi	r24, 0x01	; 1
    32ea:	91 05       	cpc	r25, r1
    32ec:	61 f0       	breq	.+24     	; 0x3306 <SET_Direction_4MSB+0x5a>
    32ee:	2a c0       	rjmp	.+84     	; 0x3344 <SET_Direction_4MSB+0x98>
    32f0:	2d 81       	ldd	r18, Y+5	; 0x05
    32f2:	3e 81       	ldd	r19, Y+6	; 0x06
    32f4:	23 30       	cpi	r18, 0x03	; 3
    32f6:	31 05       	cpc	r19, r1
    32f8:	b1 f0       	breq	.+44     	; 0x3326 <SET_Direction_4MSB+0x7a>
    32fa:	8d 81       	ldd	r24, Y+5	; 0x05
    32fc:	9e 81       	ldd	r25, Y+6	; 0x06
    32fe:	84 30       	cpi	r24, 0x04	; 4
    3300:	91 05       	cpc	r25, r1
    3302:	c9 f0       	breq	.+50     	; 0x3336 <SET_Direction_4MSB+0x8a>
    3304:	1f c0       	rjmp	.+62     	; 0x3344 <SET_Direction_4MSB+0x98>
		{
		case PORTA:
			DDRA_REG |= 0xF0;
    3306:	aa e3       	ldi	r26, 0x3A	; 58
    3308:	b0 e0       	ldi	r27, 0x00	; 0
    330a:	ea e3       	ldi	r30, 0x3A	; 58
    330c:	f0 e0       	ldi	r31, 0x00	; 0
    330e:	80 81       	ld	r24, Z
    3310:	80 6f       	ori	r24, 0xF0	; 240
    3312:	8c 93       	st	X, r24
    3314:	17 c0       	rjmp	.+46     	; 0x3344 <SET_Direction_4MSB+0x98>
			break;
		case PORTB:
			DDRB_REG |= 0xF0;
    3316:	a7 e3       	ldi	r26, 0x37	; 55
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	e7 e3       	ldi	r30, 0x37	; 55
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	80 6f       	ori	r24, 0xF0	; 240
    3322:	8c 93       	st	X, r24
    3324:	0f c0       	rjmp	.+30     	; 0x3344 <SET_Direction_4MSB+0x98>
			break;
		case PORTC:
			DDRC_REG |= 0xF0;
    3326:	a4 e3       	ldi	r26, 0x34	; 52
    3328:	b0 e0       	ldi	r27, 0x00	; 0
    332a:	e4 e3       	ldi	r30, 0x34	; 52
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	80 81       	ld	r24, Z
    3330:	80 6f       	ori	r24, 0xF0	; 240
    3332:	8c 93       	st	X, r24
    3334:	07 c0       	rjmp	.+14     	; 0x3344 <SET_Direction_4MSB+0x98>
			break;
		case PORTD:
			DDRD_REG |= 0xF0;
    3336:	a1 e3       	ldi	r26, 0x31	; 49
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	e1 e3       	ldi	r30, 0x31	; 49
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	80 6f       	ori	r24, 0xF0	; 240
    3342:	8c 93       	st	X, r24
			break;
		}
	}
	if(Direction == INPUT)
    3344:	8a 81       	ldd	r24, Y+2	; 0x02
    3346:	88 23       	and	r24, r24
    3348:	09 f0       	breq	.+2      	; 0x334c <SET_Direction_4MSB+0xa0>
    334a:	3f c0       	rjmp	.+126    	; 0x33ca <SET_Direction_4MSB+0x11e>
	{
		switch(Copy_PORT)
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	28 2f       	mov	r18, r24
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	3c 83       	std	Y+4, r19	; 0x04
    3354:	2b 83       	std	Y+3, r18	; 0x03
    3356:	8b 81       	ldd	r24, Y+3	; 0x03
    3358:	9c 81       	ldd	r25, Y+4	; 0x04
    335a:	82 30       	cpi	r24, 0x02	; 2
    335c:	91 05       	cpc	r25, r1
    335e:	f1 f0       	breq	.+60     	; 0x339c <SET_Direction_4MSB+0xf0>
    3360:	2b 81       	ldd	r18, Y+3	; 0x03
    3362:	3c 81       	ldd	r19, Y+4	; 0x04
    3364:	23 30       	cpi	r18, 0x03	; 3
    3366:	31 05       	cpc	r19, r1
    3368:	34 f4       	brge	.+12     	; 0x3376 <SET_Direction_4MSB+0xca>
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	9c 81       	ldd	r25, Y+4	; 0x04
    336e:	81 30       	cpi	r24, 0x01	; 1
    3370:	91 05       	cpc	r25, r1
    3372:	61 f0       	breq	.+24     	; 0x338c <SET_Direction_4MSB+0xe0>
    3374:	2a c0       	rjmp	.+84     	; 0x33ca <SET_Direction_4MSB+0x11e>
    3376:	2b 81       	ldd	r18, Y+3	; 0x03
    3378:	3c 81       	ldd	r19, Y+4	; 0x04
    337a:	23 30       	cpi	r18, 0x03	; 3
    337c:	31 05       	cpc	r19, r1
    337e:	b1 f0       	breq	.+44     	; 0x33ac <SET_Direction_4MSB+0x100>
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	9c 81       	ldd	r25, Y+4	; 0x04
    3384:	84 30       	cpi	r24, 0x04	; 4
    3386:	91 05       	cpc	r25, r1
    3388:	c9 f0       	breq	.+50     	; 0x33bc <SET_Direction_4MSB+0x110>
    338a:	1f c0       	rjmp	.+62     	; 0x33ca <SET_Direction_4MSB+0x11e>
		{
		case PORTA:
			DDRA_REG &= 0x0F;
    338c:	aa e3       	ldi	r26, 0x3A	; 58
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	ea e3       	ldi	r30, 0x3A	; 58
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	8f 70       	andi	r24, 0x0F	; 15
    3398:	8c 93       	st	X, r24
    339a:	17 c0       	rjmp	.+46     	; 0x33ca <SET_Direction_4MSB+0x11e>
			break;
		case PORTB:
			DDRB_REG &= 0x0F;
    339c:	a7 e3       	ldi	r26, 0x37	; 55
    339e:	b0 e0       	ldi	r27, 0x00	; 0
    33a0:	e7 e3       	ldi	r30, 0x37	; 55
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	8f 70       	andi	r24, 0x0F	; 15
    33a8:	8c 93       	st	X, r24
    33aa:	0f c0       	rjmp	.+30     	; 0x33ca <SET_Direction_4MSB+0x11e>
			break;
		case PORTC:
			DDRC_REG &= 0x0F;
    33ac:	a4 e3       	ldi	r26, 0x34	; 52
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	e4 e3       	ldi	r30, 0x34	; 52
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	8f 70       	andi	r24, 0x0F	; 15
    33b8:	8c 93       	st	X, r24
    33ba:	07 c0       	rjmp	.+14     	; 0x33ca <SET_Direction_4MSB+0x11e>
			break;
		case PORTD:
			DDRD_REG &= 0x0F;
    33bc:	a1 e3       	ldi	r26, 0x31	; 49
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	e1 e3       	ldi	r30, 0x31	; 49
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	80 81       	ld	r24, Z
    33c6:	8f 70       	andi	r24, 0x0F	; 15
    33c8:	8c 93       	st	X, r24
			break;
		}
	}
}
    33ca:	26 96       	adiw	r28, 0x06	; 6
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	f8 94       	cli
    33d0:	de bf       	out	0x3e, r29	; 62
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	cd bf       	out	0x3d, r28	; 61
    33d6:	cf 91       	pop	r28
    33d8:	df 91       	pop	r29
    33da:	08 95       	ret

000033dc <SET_State_4LSB>:

void SET_State_4LSB(u8 Copy_PORT, u8 State)//set 4LSB output pins as high or low
{
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	00 d0       	rcall	.+0      	; 0x33e2 <SET_State_4LSB+0x6>
    33e2:	00 d0       	rcall	.+0      	; 0x33e4 <SET_State_4LSB+0x8>
    33e4:	00 d0       	rcall	.+0      	; 0x33e6 <SET_State_4LSB+0xa>
    33e6:	cd b7       	in	r28, 0x3d	; 61
    33e8:	de b7       	in	r29, 0x3e	; 62
    33ea:	89 83       	std	Y+1, r24	; 0x01
    33ec:	6a 83       	std	Y+2, r22	; 0x02
	if(State == HIGH)
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	81 30       	cpi	r24, 0x01	; 1
    33f2:	09 f0       	breq	.+2      	; 0x33f6 <SET_State_4LSB+0x1a>
    33f4:	40 c0       	rjmp	.+128    	; 0x3476 <SET_State_4LSB+0x9a>
	{
		switch(Copy_PORT)
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	28 2f       	mov	r18, r24
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	3e 83       	std	Y+6, r19	; 0x06
    33fe:	2d 83       	std	Y+5, r18	; 0x05
    3400:	8d 81       	ldd	r24, Y+5	; 0x05
    3402:	9e 81       	ldd	r25, Y+6	; 0x06
    3404:	82 30       	cpi	r24, 0x02	; 2
    3406:	91 05       	cpc	r25, r1
    3408:	f1 f0       	breq	.+60     	; 0x3446 <SET_State_4LSB+0x6a>
    340a:	2d 81       	ldd	r18, Y+5	; 0x05
    340c:	3e 81       	ldd	r19, Y+6	; 0x06
    340e:	23 30       	cpi	r18, 0x03	; 3
    3410:	31 05       	cpc	r19, r1
    3412:	34 f4       	brge	.+12     	; 0x3420 <SET_State_4LSB+0x44>
    3414:	8d 81       	ldd	r24, Y+5	; 0x05
    3416:	9e 81       	ldd	r25, Y+6	; 0x06
    3418:	81 30       	cpi	r24, 0x01	; 1
    341a:	91 05       	cpc	r25, r1
    341c:	61 f0       	breq	.+24     	; 0x3436 <SET_State_4LSB+0x5a>
    341e:	6e c0       	rjmp	.+220    	; 0x34fc <SET_State_4LSB+0x120>
    3420:	2d 81       	ldd	r18, Y+5	; 0x05
    3422:	3e 81       	ldd	r19, Y+6	; 0x06
    3424:	23 30       	cpi	r18, 0x03	; 3
    3426:	31 05       	cpc	r19, r1
    3428:	b1 f0       	breq	.+44     	; 0x3456 <SET_State_4LSB+0x7a>
    342a:	8d 81       	ldd	r24, Y+5	; 0x05
    342c:	9e 81       	ldd	r25, Y+6	; 0x06
    342e:	84 30       	cpi	r24, 0x04	; 4
    3430:	91 05       	cpc	r25, r1
    3432:	c9 f0       	breq	.+50     	; 0x3466 <SET_State_4LSB+0x8a>
    3434:	63 c0       	rjmp	.+198    	; 0x34fc <SET_State_4LSB+0x120>
		{
		case PORTA:
			PORTA_REG |= 0x0F;
    3436:	ab e3       	ldi	r26, 0x3B	; 59
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	eb e3       	ldi	r30, 0x3B	; 59
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	8f 60       	ori	r24, 0x0F	; 15
    3442:	8c 93       	st	X, r24
    3444:	5b c0       	rjmp	.+182    	; 0x34fc <SET_State_4LSB+0x120>
			break;
		case PORTB:
			PORTB_REG |= 0x0F;
    3446:	a8 e3       	ldi	r26, 0x38	; 56
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	e8 e3       	ldi	r30, 0x38	; 56
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	8f 60       	ori	r24, 0x0F	; 15
    3452:	8c 93       	st	X, r24
    3454:	53 c0       	rjmp	.+166    	; 0x34fc <SET_State_4LSB+0x120>
			break;
		case PORTC:
			PORTC_REG |= 0x0F;
    3456:	a5 e3       	ldi	r26, 0x35	; 53
    3458:	b0 e0       	ldi	r27, 0x00	; 0
    345a:	e5 e3       	ldi	r30, 0x35	; 53
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	8f 60       	ori	r24, 0x0F	; 15
    3462:	8c 93       	st	X, r24
    3464:	4b c0       	rjmp	.+150    	; 0x34fc <SET_State_4LSB+0x120>
			break;
		case PORTD:
			PORTD_REG |= 0x0F;
    3466:	a2 e3       	ldi	r26, 0x32	; 50
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e2 e3       	ldi	r30, 0x32	; 50
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	8f 60       	ori	r24, 0x0F	; 15
    3472:	8c 93       	st	X, r24
    3474:	43 c0       	rjmp	.+134    	; 0x34fc <SET_State_4LSB+0x120>
			break;
		}
	}
	else if(State == LOW)
    3476:	8a 81       	ldd	r24, Y+2	; 0x02
    3478:	88 23       	and	r24, r24
    347a:	09 f0       	breq	.+2      	; 0x347e <SET_State_4LSB+0xa2>
    347c:	3f c0       	rjmp	.+126    	; 0x34fc <SET_State_4LSB+0x120>
	{
		switch(Copy_PORT)
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	28 2f       	mov	r18, r24
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	3c 83       	std	Y+4, r19	; 0x04
    3486:	2b 83       	std	Y+3, r18	; 0x03
    3488:	8b 81       	ldd	r24, Y+3	; 0x03
    348a:	9c 81       	ldd	r25, Y+4	; 0x04
    348c:	82 30       	cpi	r24, 0x02	; 2
    348e:	91 05       	cpc	r25, r1
    3490:	f1 f0       	breq	.+60     	; 0x34ce <SET_State_4LSB+0xf2>
    3492:	2b 81       	ldd	r18, Y+3	; 0x03
    3494:	3c 81       	ldd	r19, Y+4	; 0x04
    3496:	23 30       	cpi	r18, 0x03	; 3
    3498:	31 05       	cpc	r19, r1
    349a:	34 f4       	brge	.+12     	; 0x34a8 <SET_State_4LSB+0xcc>
    349c:	8b 81       	ldd	r24, Y+3	; 0x03
    349e:	9c 81       	ldd	r25, Y+4	; 0x04
    34a0:	81 30       	cpi	r24, 0x01	; 1
    34a2:	91 05       	cpc	r25, r1
    34a4:	61 f0       	breq	.+24     	; 0x34be <SET_State_4LSB+0xe2>
    34a6:	2a c0       	rjmp	.+84     	; 0x34fc <SET_State_4LSB+0x120>
    34a8:	2b 81       	ldd	r18, Y+3	; 0x03
    34aa:	3c 81       	ldd	r19, Y+4	; 0x04
    34ac:	23 30       	cpi	r18, 0x03	; 3
    34ae:	31 05       	cpc	r19, r1
    34b0:	b1 f0       	breq	.+44     	; 0x34de <SET_State_4LSB+0x102>
    34b2:	8b 81       	ldd	r24, Y+3	; 0x03
    34b4:	9c 81       	ldd	r25, Y+4	; 0x04
    34b6:	84 30       	cpi	r24, 0x04	; 4
    34b8:	91 05       	cpc	r25, r1
    34ba:	c9 f0       	breq	.+50     	; 0x34ee <SET_State_4LSB+0x112>
    34bc:	1f c0       	rjmp	.+62     	; 0x34fc <SET_State_4LSB+0x120>
		{
		case PORTA:
			PORTA_REG &= 0xF0;
    34be:	ab e3       	ldi	r26, 0x3B	; 59
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	eb e3       	ldi	r30, 0x3B	; 59
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	80 7f       	andi	r24, 0xF0	; 240
    34ca:	8c 93       	st	X, r24
    34cc:	17 c0       	rjmp	.+46     	; 0x34fc <SET_State_4LSB+0x120>
			break;
		case PORTB:
			PORTB_REG &= 0xF0;
    34ce:	a8 e3       	ldi	r26, 0x38	; 56
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	e8 e3       	ldi	r30, 0x38	; 56
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	80 7f       	andi	r24, 0xF0	; 240
    34da:	8c 93       	st	X, r24
    34dc:	0f c0       	rjmp	.+30     	; 0x34fc <SET_State_4LSB+0x120>
			break;
		case PORTC:
			PORTC_REG &= 0xF0;
    34de:	a5 e3       	ldi	r26, 0x35	; 53
    34e0:	b0 e0       	ldi	r27, 0x00	; 0
    34e2:	e5 e3       	ldi	r30, 0x35	; 53
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	80 81       	ld	r24, Z
    34e8:	80 7f       	andi	r24, 0xF0	; 240
    34ea:	8c 93       	st	X, r24
    34ec:	07 c0       	rjmp	.+14     	; 0x34fc <SET_State_4LSB+0x120>
			break;
		case PORTD:
			PORTD_REG &= 0xF0;
    34ee:	a2 e3       	ldi	r26, 0x32	; 50
    34f0:	b0 e0       	ldi	r27, 0x00	; 0
    34f2:	e2 e3       	ldi	r30, 0x32	; 50
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	80 81       	ld	r24, Z
    34f8:	80 7f       	andi	r24, 0xF0	; 240
    34fa:	8c 93       	st	X, r24
			break;
		}
	}
}
    34fc:	26 96       	adiw	r28, 0x06	; 6
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	f8 94       	cli
    3502:	de bf       	out	0x3e, r29	; 62
    3504:	0f be       	out	0x3f, r0	; 63
    3506:	cd bf       	out	0x3d, r28	; 61
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <SET_State_4MSB>:

void SET_State_4MSB(u8 Copy_PORT, u8 State)//set 4MSB output pins as high or low
{
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	00 d0       	rcall	.+0      	; 0x3514 <SET_State_4MSB+0x6>
    3514:	00 d0       	rcall	.+0      	; 0x3516 <SET_State_4MSB+0x8>
    3516:	00 d0       	rcall	.+0      	; 0x3518 <SET_State_4MSB+0xa>
    3518:	cd b7       	in	r28, 0x3d	; 61
    351a:	de b7       	in	r29, 0x3e	; 62
    351c:	89 83       	std	Y+1, r24	; 0x01
    351e:	6a 83       	std	Y+2, r22	; 0x02
	if(State == HIGH)
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	81 30       	cpi	r24, 0x01	; 1
    3524:	09 f0       	breq	.+2      	; 0x3528 <SET_State_4MSB+0x1a>
    3526:	40 c0       	rjmp	.+128    	; 0x35a8 <SET_State_4MSB+0x9a>
	{
		switch(Copy_PORT)
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	28 2f       	mov	r18, r24
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	3e 83       	std	Y+6, r19	; 0x06
    3530:	2d 83       	std	Y+5, r18	; 0x05
    3532:	8d 81       	ldd	r24, Y+5	; 0x05
    3534:	9e 81       	ldd	r25, Y+6	; 0x06
    3536:	82 30       	cpi	r24, 0x02	; 2
    3538:	91 05       	cpc	r25, r1
    353a:	f1 f0       	breq	.+60     	; 0x3578 <SET_State_4MSB+0x6a>
    353c:	2d 81       	ldd	r18, Y+5	; 0x05
    353e:	3e 81       	ldd	r19, Y+6	; 0x06
    3540:	23 30       	cpi	r18, 0x03	; 3
    3542:	31 05       	cpc	r19, r1
    3544:	34 f4       	brge	.+12     	; 0x3552 <SET_State_4MSB+0x44>
    3546:	8d 81       	ldd	r24, Y+5	; 0x05
    3548:	9e 81       	ldd	r25, Y+6	; 0x06
    354a:	81 30       	cpi	r24, 0x01	; 1
    354c:	91 05       	cpc	r25, r1
    354e:	61 f0       	breq	.+24     	; 0x3568 <SET_State_4MSB+0x5a>
    3550:	6e c0       	rjmp	.+220    	; 0x362e <SET_State_4MSB+0x120>
    3552:	2d 81       	ldd	r18, Y+5	; 0x05
    3554:	3e 81       	ldd	r19, Y+6	; 0x06
    3556:	23 30       	cpi	r18, 0x03	; 3
    3558:	31 05       	cpc	r19, r1
    355a:	b1 f0       	breq	.+44     	; 0x3588 <SET_State_4MSB+0x7a>
    355c:	8d 81       	ldd	r24, Y+5	; 0x05
    355e:	9e 81       	ldd	r25, Y+6	; 0x06
    3560:	84 30       	cpi	r24, 0x04	; 4
    3562:	91 05       	cpc	r25, r1
    3564:	c9 f0       	breq	.+50     	; 0x3598 <SET_State_4MSB+0x8a>
    3566:	63 c0       	rjmp	.+198    	; 0x362e <SET_State_4MSB+0x120>
		{
		case PORTA:
			PORTA_REG |= 0xF0;
    3568:	ab e3       	ldi	r26, 0x3B	; 59
    356a:	b0 e0       	ldi	r27, 0x00	; 0
    356c:	eb e3       	ldi	r30, 0x3B	; 59
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	80 81       	ld	r24, Z
    3572:	80 6f       	ori	r24, 0xF0	; 240
    3574:	8c 93       	st	X, r24
    3576:	5b c0       	rjmp	.+182    	; 0x362e <SET_State_4MSB+0x120>
			break;
		case PORTB:
			PORTB_REG |= 0xF0;
    3578:	a8 e3       	ldi	r26, 0x38	; 56
    357a:	b0 e0       	ldi	r27, 0x00	; 0
    357c:	e8 e3       	ldi	r30, 0x38	; 56
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	80 81       	ld	r24, Z
    3582:	80 6f       	ori	r24, 0xF0	; 240
    3584:	8c 93       	st	X, r24
    3586:	53 c0       	rjmp	.+166    	; 0x362e <SET_State_4MSB+0x120>
			break;
		case PORTC:
			PORTC_REG |= 0xF0;
    3588:	a5 e3       	ldi	r26, 0x35	; 53
    358a:	b0 e0       	ldi	r27, 0x00	; 0
    358c:	e5 e3       	ldi	r30, 0x35	; 53
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	80 81       	ld	r24, Z
    3592:	80 6f       	ori	r24, 0xF0	; 240
    3594:	8c 93       	st	X, r24
    3596:	4b c0       	rjmp	.+150    	; 0x362e <SET_State_4MSB+0x120>
			break;
		case PORTD:
			PORTD_REG |= 0xF0;
    3598:	a2 e3       	ldi	r26, 0x32	; 50
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	e2 e3       	ldi	r30, 0x32	; 50
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	80 6f       	ori	r24, 0xF0	; 240
    35a4:	8c 93       	st	X, r24
    35a6:	43 c0       	rjmp	.+134    	; 0x362e <SET_State_4MSB+0x120>
			break;
		}
	}
	else if(State == LOW)
    35a8:	8a 81       	ldd	r24, Y+2	; 0x02
    35aa:	88 23       	and	r24, r24
    35ac:	09 f0       	breq	.+2      	; 0x35b0 <SET_State_4MSB+0xa2>
    35ae:	3f c0       	rjmp	.+126    	; 0x362e <SET_State_4MSB+0x120>
	{
		switch(Copy_PORT)
    35b0:	89 81       	ldd	r24, Y+1	; 0x01
    35b2:	28 2f       	mov	r18, r24
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	3c 83       	std	Y+4, r19	; 0x04
    35b8:	2b 83       	std	Y+3, r18	; 0x03
    35ba:	8b 81       	ldd	r24, Y+3	; 0x03
    35bc:	9c 81       	ldd	r25, Y+4	; 0x04
    35be:	82 30       	cpi	r24, 0x02	; 2
    35c0:	91 05       	cpc	r25, r1
    35c2:	f1 f0       	breq	.+60     	; 0x3600 <SET_State_4MSB+0xf2>
    35c4:	2b 81       	ldd	r18, Y+3	; 0x03
    35c6:	3c 81       	ldd	r19, Y+4	; 0x04
    35c8:	23 30       	cpi	r18, 0x03	; 3
    35ca:	31 05       	cpc	r19, r1
    35cc:	34 f4       	brge	.+12     	; 0x35da <SET_State_4MSB+0xcc>
    35ce:	8b 81       	ldd	r24, Y+3	; 0x03
    35d0:	9c 81       	ldd	r25, Y+4	; 0x04
    35d2:	81 30       	cpi	r24, 0x01	; 1
    35d4:	91 05       	cpc	r25, r1
    35d6:	61 f0       	breq	.+24     	; 0x35f0 <SET_State_4MSB+0xe2>
    35d8:	2a c0       	rjmp	.+84     	; 0x362e <SET_State_4MSB+0x120>
    35da:	2b 81       	ldd	r18, Y+3	; 0x03
    35dc:	3c 81       	ldd	r19, Y+4	; 0x04
    35de:	23 30       	cpi	r18, 0x03	; 3
    35e0:	31 05       	cpc	r19, r1
    35e2:	b1 f0       	breq	.+44     	; 0x3610 <SET_State_4MSB+0x102>
    35e4:	8b 81       	ldd	r24, Y+3	; 0x03
    35e6:	9c 81       	ldd	r25, Y+4	; 0x04
    35e8:	84 30       	cpi	r24, 0x04	; 4
    35ea:	91 05       	cpc	r25, r1
    35ec:	c9 f0       	breq	.+50     	; 0x3620 <SET_State_4MSB+0x112>
    35ee:	1f c0       	rjmp	.+62     	; 0x362e <SET_State_4MSB+0x120>
		{
		case PORTA:
			PORTA_REG &= 0x0F;
    35f0:	ab e3       	ldi	r26, 0x3B	; 59
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	eb e3       	ldi	r30, 0x3B	; 59
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	8f 70       	andi	r24, 0x0F	; 15
    35fc:	8c 93       	st	X, r24
    35fe:	17 c0       	rjmp	.+46     	; 0x362e <SET_State_4MSB+0x120>
			break;
		case PORTB:
			PORTB_REG &= 0x0F;
    3600:	a8 e3       	ldi	r26, 0x38	; 56
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	e8 e3       	ldi	r30, 0x38	; 56
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	8f 70       	andi	r24, 0x0F	; 15
    360c:	8c 93       	st	X, r24
    360e:	0f c0       	rjmp	.+30     	; 0x362e <SET_State_4MSB+0x120>
			break;
		case PORTC:
			PORTC_REG &= 0x0F;
    3610:	a5 e3       	ldi	r26, 0x35	; 53
    3612:	b0 e0       	ldi	r27, 0x00	; 0
    3614:	e5 e3       	ldi	r30, 0x35	; 53
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	80 81       	ld	r24, Z
    361a:	8f 70       	andi	r24, 0x0F	; 15
    361c:	8c 93       	st	X, r24
    361e:	07 c0       	rjmp	.+14     	; 0x362e <SET_State_4MSB+0x120>
			break;
		case PORTD:
			PORTD_REG &= 0x0F;
    3620:	a2 e3       	ldi	r26, 0x32	; 50
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	e2 e3       	ldi	r30, 0x32	; 50
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	80 81       	ld	r24, Z
    362a:	8f 70       	andi	r24, 0x0F	; 15
    362c:	8c 93       	st	X, r24
			break;
		}
	}
}
    362e:	26 96       	adiw	r28, 0x06	; 6
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	f8 94       	cli
    3634:	de bf       	out	0x3e, r29	; 62
    3636:	0f be       	out	0x3f, r0	; 63
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	cf 91       	pop	r28
    363c:	df 91       	pop	r29
    363e:	08 95       	ret

00003640 <__udivmodhi4>:
    3640:	aa 1b       	sub	r26, r26
    3642:	bb 1b       	sub	r27, r27
    3644:	51 e1       	ldi	r21, 0x11	; 17
    3646:	07 c0       	rjmp	.+14     	; 0x3656 <__udivmodhi4_ep>

00003648 <__udivmodhi4_loop>:
    3648:	aa 1f       	adc	r26, r26
    364a:	bb 1f       	adc	r27, r27
    364c:	a6 17       	cp	r26, r22
    364e:	b7 07       	cpc	r27, r23
    3650:	10 f0       	brcs	.+4      	; 0x3656 <__udivmodhi4_ep>
    3652:	a6 1b       	sub	r26, r22
    3654:	b7 0b       	sbc	r27, r23

00003656 <__udivmodhi4_ep>:
    3656:	88 1f       	adc	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	5a 95       	dec	r21
    365c:	a9 f7       	brne	.-22     	; 0x3648 <__udivmodhi4_loop>
    365e:	80 95       	com	r24
    3660:	90 95       	com	r25
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	08 95       	ret

00003668 <__prologue_saves__>:
    3668:	2f 92       	push	r2
    366a:	3f 92       	push	r3
    366c:	4f 92       	push	r4
    366e:	5f 92       	push	r5
    3670:	6f 92       	push	r6
    3672:	7f 92       	push	r7
    3674:	8f 92       	push	r8
    3676:	9f 92       	push	r9
    3678:	af 92       	push	r10
    367a:	bf 92       	push	r11
    367c:	cf 92       	push	r12
    367e:	df 92       	push	r13
    3680:	ef 92       	push	r14
    3682:	ff 92       	push	r15
    3684:	0f 93       	push	r16
    3686:	1f 93       	push	r17
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    3690:	ca 1b       	sub	r28, r26
    3692:	db 0b       	sbc	r29, r27
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    369e:	09 94       	ijmp

000036a0 <__epilogue_restores__>:
    36a0:	2a 88       	ldd	r2, Y+18	; 0x12
    36a2:	39 88       	ldd	r3, Y+17	; 0x11
    36a4:	48 88       	ldd	r4, Y+16	; 0x10
    36a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    36a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    36aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    36ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    36ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    36b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    36b2:	b9 84       	ldd	r11, Y+9	; 0x09
    36b4:	c8 84       	ldd	r12, Y+8	; 0x08
    36b6:	df 80       	ldd	r13, Y+7	; 0x07
    36b8:	ee 80       	ldd	r14, Y+6	; 0x06
    36ba:	fd 80       	ldd	r15, Y+5	; 0x05
    36bc:	0c 81       	ldd	r16, Y+4	; 0x04
    36be:	1b 81       	ldd	r17, Y+3	; 0x03
    36c0:	aa 81       	ldd	r26, Y+2	; 0x02
    36c2:	b9 81       	ldd	r27, Y+1	; 0x01
    36c4:	ce 0f       	add	r28, r30
    36c6:	d1 1d       	adc	r29, r1
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61
    36d2:	ed 01       	movw	r28, r26
    36d4:	08 95       	ret

000036d6 <_exit>:
    36d6:	f8 94       	cli

000036d8 <__stop_program>:
    36d8:	ff cf       	rjmp	.-2      	; 0x36d8 <__stop_program>
